<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营10（FHI）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A510%EF%BC%88FHI%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A510%EF%BC%88FHI%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33195">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#f-shannon-switching-game">F Shannon Switching Game?</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#h-wheel-of-fortune">H Wheel of Fortune</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#i-yet-another-fft-problem">I Yet Another FFT Problem?</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li></ul></p><h2 id="f-shannon-switching-game"><a class="markdownIt-Anchor" href="#f-shannon-switching-game"></a> F Shannon Switching Game?</h2><p>博弈论</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>从结束点开始向外考虑，结束点我们认为是必胜点，考虑其他点如何成为必胜点：</p><p>如果某点存在两条（可重）边连接至另一个必胜点，则认为该点也是必胜点；</p><p>以终点开始进行bfs寻找必胜点即可；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> win[<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">110</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; E[<span class="hljs-number">110</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; que;<br>    que.<span class="hljs-built_in">push</span>(x);<br>    win[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> y = que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> ty : E[y])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (win[ty])<br>                <span class="hljs-keyword">continue</span>;<br>            vis[ty]++;<br>            <span class="hljs-keyword">if</span> (vis[ty] == <span class="hljs-number">2</span>)<br>            &#123;<br>                win[ty] = <span class="hljs-number">1</span>;<br>                que.<span class="hljs-built_in">push</span>(ty);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">int</span> s, t;<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--)<br>    &#123;<br>        <span class="hljs-type">int</span> n, m;<br>        cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            vis[i] = <span class="hljs-number">0</span>;<br>            win[i] = <span class="hljs-number">0</span>;<br>            E[i].<span class="hljs-built_in">clear</span>();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> u, v;<br>            cin &gt;&gt; u &gt;&gt; v;<br>            E[u].<span class="hljs-built_in">push_back</span>(v);<br>            E[v].<span class="hljs-built_in">push_back</span>(u);<br>        &#125;<br>        <span class="hljs-built_in">bfs</span>(t);<br>        <span class="hljs-keyword">if</span> (win[s])<br>            cout &lt;&lt; <span class="hljs-string">&quot;Join Player\n&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;Cut Player\n&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-wheel-of-fortune"><a class="markdownIt-Anchor" href="#h-wheel-of-fortune"></a> H Wheel of Fortune</h2><p>概率期望</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>假设 a,b 分别为 A,B 的最大受击数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">t_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示 a 胜利的期望量（方案数*方案对应概率），则有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>a</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow></munderover><msubsup><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mi>b</mi><mo>−</mo><mn>1</mn></mrow><mi>i</mi></msubsup><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mo stretchy="false">)</mo><mrow><mi>i</mi><mo>+</mo><mi>b</mi></mrow></msup></mrow><annotation encoding="application/x-tex">t_a=\sum_{i=1}^{a-1}C_{i+b-1}^i(\frac 12)^{i+b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">Q_power</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b = MOD - <span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            res = res * a % MOD;<br>        a = a * a % MOD;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> Fact[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> InvF[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> tw[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Fact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        Fact[i] = Fact[i - <span class="hljs-number">1</span>] * i % MOD;<br>    &#125;<br><br>    InvF[N - <span class="hljs-number">1</span>] = <span class="hljs-built_in">Q_power</span>(Fact[N - <span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        InvF[i] = InvF[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % MOD;<br>    &#125;<br><br>    tw[N - <span class="hljs-number">1</span>] = <span class="hljs-built_in">Q_power</span>(<span class="hljs-built_in">Q_power</span>(<span class="hljs-number">2</span> , N - <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N - <span class="hljs-number">2</span> ; i &gt;= <span class="hljs-number">0</span> ; i -- ) &#123;<br>        tw[i] = tw[i + <span class="hljs-number">1</span>] * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(tw[i] &gt;= MOD) tw[i] -= MOD;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt; m)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> Fact[n] * InvF[m] % MOD * InvF[n - m] % MOD;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a;<br>    a = (a - <span class="hljs-number">1</span>) / <span class="hljs-number">10</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++)<br>        cin &gt;&gt; b;<br>    cin &gt;&gt; b;<br>    b = (b - <span class="hljs-number">1</span>) / <span class="hljs-number">10</span> + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> A, B;<br>    A = B = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)<br>    &#123;<br>        A += <span class="hljs-built_in">C</span>(i + b - <span class="hljs-number">1</span>, i) * tw[i+b] % MOD;<br>        <span class="hljs-keyword">if</span> (A &gt;= MOD)<br>            A -= MOD;<br>    &#125;<br><span class="hljs-comment">//     for (int i = 0; i &lt; b; i++)</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         B += C(i + a - 1, i) * tw[i+a] % MOD;</span><br><span class="hljs-comment">//         if (B &gt;= MOD)</span><br><span class="hljs-comment">//             B -= MOD;</span><br><span class="hljs-comment">//     &#125;</span><br><br>    cout &lt;&lt; A &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-yet-another-fft-problem"><a class="markdownIt-Anchor" href="#i-yet-another-fft-problem"></a> I Yet Another FFT Problem?</h2><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>去掉绝对值后移项可得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>b</mi><mi>l</mi></msub><mo>=</mo><msub><mi>a</mi><mi>j</mi></msub><mo>+</mo><msub><mi>b</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">a_i+b_l=a_j+b_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，考虑两数之和不会超过 2e7 ，我们只需要去重后双重循环枚举两个数组的数字，记录每个和数的一组解，如果遇到当前和数已经有解，则发现答案；</p><p>存在一种特殊情况，唯一解即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>j</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>k</mi></msub><mo>=</mo><msub><mi>b</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">a_i=a_j,b_k=b_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，在去重时会被舍弃掉，特判这种情况即可；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e7</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(maxn)</span>, <span class="hljs-title">b</span><span class="hljs-params">(maxn)</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mka</span><span class="hljs-params">(maxn, <span class="hljs-number">-1</span>)</span>, <span class="hljs-title">mkb</span><span class="hljs-params">(maxn, <span class="hljs-number">-1</span>)</span></span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; pa, pb;<br>vector&lt;array&lt;<span class="hljs-type">int</span>, 2&gt;&gt; <span class="hljs-built_in">su</span>(<span class="hljs-number">2</span> * maxn, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;);<br>pair&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; ans = &#123;&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">if</span> (mka[a[i]] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            mka[a[i]] = i;<br>            pa.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ans.first.first = mka[a[i]];<br>            ans.first.second = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br>        <span class="hljs-keyword">if</span> (mkb[b[i]] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            mkb[b[i]] = i;<br>            pb.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ans.second.first = mkb[b[i]];<br>            ans.second.second = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans.first.first != <span class="hljs-number">-1</span> &amp;&amp; ans.second.first != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, ans.first.first, ans.first.second, ans.second.first,<br>               ans.second.second);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : pa)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : pb)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (su[a[i] + b[j]][<span class="hljs-number">0</span>] == <span class="hljs-number">-1</span>)<br>            &#123;<br>                su[a[i] + b[j]] = &#123;i, j&#125;;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, su[a[i] + b[j]][<span class="hljs-number">0</span>], i, j, su[a[i] + b[j]][<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;-1\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营（加赛）（EGHJM）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E5%8A%A0%E8%B5%9B%EF%BC%89%EF%BC%88EGHJM%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E5%8A%A0%E8%B5%9B%EF%BC%89%EF%BC%88EGHJM%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/38727">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#e-everyone-is-bot">E Everyone is bot</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#g-good-red-string">G Good red-string</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#h-here-is-an-easy-problem-of-zero-chan">H Here is an Easy Problem of Zero-chan</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#j-jellyfish-and-its-dream">J Jellyfish and its dream</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#m-maimai-dx-2077">M Maimai DX 2077</a><br />*<ul><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li></ul></p><h2 id="e-everyone-is-bot"><a class="markdownIt-Anchor" href="#e-everyone-is-bot"></a> E Everyone is bot</h2><p>博弈论</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>考虑<code>n=10,p=3</code>：<br />假设前7人均选择复读，则第8,9,10人均不选择复读，因为此三人任意一人选择复读，另外两人可以在下一轮接下，该人即被禁言；<br />同理，若前4人均选择复读，则第5,6,7,8,9,10人均不选择复读，因为此六人任意一人选择复读，就会有两人跟随，该人即被禁言，到达上面一种情况；<br />进一步地，若第一人选择复读，那么另外9人均不会选择复读；</p><p>每种情况删去了p人，即最后可能拿到奖励的为前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">n\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord">%</span><span class="mord mathdefault">p</span></span></span></span> 人，其余人均不敢复读；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1020</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            cin&gt;&gt;x;<br>            <span class="hljs-keyword">if</span>(i==j)&#123;<br>                a[i]=x;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=(n%k);i++)&#123;<br>        cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=(n%k)+<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-good-red-string"><a class="markdownIt-Anchor" href="#g-good-red-string"></a> G Good red-string</h2><p>贪心</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>与合法括号序列类似，标记cr,ce,cd为子串中字符r,e,d的个数；<br />对于任意i,j，应该满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>r</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo>⩾</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo>⩾</mo><mi>c</mi><mi>d</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>c</mi><mi>r</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>⩽</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>⩽</mo><mi>c</mi><mi>d</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>c</mi><mi>r</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>c</mi><mi>d</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">cr[1,i]\geqslant ce[1,i]\geqslant cd[1,i],cr[j,n]\leqslant ce[j,n]\leqslant cd[j,n],cr[1,n]=ce[1,n]=cd[1,n]=n/3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">3</span></span></span></span> ；</p><p>具体操作时，依照 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>r</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo>⩾</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>⩽</mo><mi>c</mi><mi>d</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">cr[1,i]\geqslant ce[1,i],ce[j,n]\leqslant cd[j,n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> 来优先分配<code>?</code>位，再将剩余<code>?</code>位向 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">n/3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">3</span></span></span></span> 靠拢；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string g;<br>        cin &gt;&gt; g;<br>        <span class="hljs-type">int</span> n = g.<span class="hljs-built_in">length</span>(), m = n / <span class="hljs-number">3</span>, c = <span class="hljs-number">0</span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; stk;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>                ++c;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                --c;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;?&#x27;</span>)<br>                stk.<span class="hljs-built_in">push</span>(i);<br>            <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (!stk.<span class="hljs-built_in">empty</span>())<br>                &#123;<br>                    g[stk.<span class="hljs-built_in">top</span>()] = <span class="hljs-string">&#x27;e&#x27;</span>, stk.<span class="hljs-built_in">pop</span>(), --c;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        c = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>())<br>            stk.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;r&#x27;</span>)<br>                ++c;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                --c;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;?&#x27;</span>)<br>                stk.<span class="hljs-built_in">push</span>(i);<br>            <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (!stk.<span class="hljs-built_in">empty</span>())<br>                &#123;<br>                    g[stk.<span class="hljs-built_in">top</span>()] = <span class="hljs-string">&#x27;e&#x27;</span>, stk.<span class="hljs-built_in">pop</span>(), --c;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> cr = <span class="hljs-number">0</span>, ce = <span class="hljs-number">0</span>, cd = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;r&#x27;</span>)<br>                ++cr;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                ++ce;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>                ++cd;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;?&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (cr &lt; m)<br>                &#123;<br>                    g[i] = <span class="hljs-string">&#x27;r&#x27;</span>, ++cr;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ce &lt; m)<br>                &#123;<br>                    g[i] = <span class="hljs-string">&#x27;e&#x27;</span>, ++ce;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cd &lt; m)<br>                &#123;<br>                    g[i] = <span class="hljs-string">&#x27;d&#x27;</span>, ++cd;<br>                &#125;<br>            &#125;<br>        &#125;<br>        cr = <span class="hljs-number">0</span>, ce = <span class="hljs-number">0</span>, cd = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;r&#x27;</span>)<br>                ++cr;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                ++ce;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>                ++cd;<br>            <span class="hljs-keyword">if</span> (!(cr &gt;= ce &amp;&amp; ce &gt;= cd))<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        cr = <span class="hljs-number">0</span>, ce = <span class="hljs-number">0</span>, cd = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;r&#x27;</span>)<br>                ++cr;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                ++ce;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>                ++cd;<br>            <span class="hljs-keyword">if</span> (!(cr &lt;= ce &amp;&amp; ce &lt;= cd))<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-here-is-an-easy-problem-of-zero-chan"><a class="markdownIt-Anchor" href="#h-here-is-an-easy-problem-of-zero-chan"></a> H Here is an Easy Problem of Zero-chan</h2><p>LCA</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>l</mi><mi>c</mi><mi>a</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)= \prod_{i=1}^nlca(x,i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> ，给定 q 个 x ，输出每个 x 的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 中结尾0的个数；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>定义 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">cnt[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 为以 x 为根的子树中节点个数；<br />考虑子树中的节点，对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的总贡献为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">cnt[x]x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mord mathdefault">x</span></span></span></span>；<br />考虑 x 的某个祖先节点 y,z ，满足z是y的父节点，<strong>在z子树中且不在y子树中的节点对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的总贡献为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>z</mi><mo stretchy="false">]</mo><mo>−</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">(cnt[z]-cnt[y])z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></strong>；</p><p>依此，我们可以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 复杂度内求出所有点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的相关值；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> sz[N],five[N],two[N],fa[N],n,tot,head[N];<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br><span class="hljs-type">int</span> lg2,lg5;<br><span class="hljs-built_in">node</span>()&#123;lg2=lg5=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<br>lg2 = x;<br>lg5 = y;<br>&#125;<br>node <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> node &amp;rhs)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">node</span>(lg2+rhs.lg2,lg5+rhs.lg5);<br>&#125;<br>node <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> node &amp;rhs)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">node</span>(lg2-rhs.lg2,lg5-rhs.lg5);<br>&#125;<br>node <span class="hljs-keyword">operator</span>*(<span class="hljs-type">int</span> rhs)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">node</span>(lg2*rhs,lg5*rhs);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">min</span>(lg2,lg5) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br>&#125;sum[N];<br><span class="hljs-function">node <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>node x = <span class="hljs-built_in">node</span>(two[u],five[u]);<br>node fx = <span class="hljs-built_in">node</span>(two[fa[u]],five[fa[u]]);<br><span class="hljs-keyword">return</span> (x-fx)*sz[u];<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br><span class="hljs-type">int</span> to,nxt;<br>&#125;e[N&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>e[++tot].nxt = head[u];<br>head[u] = tot;<br>e[tot].to = v;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>sz[u] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[u];i;i=e[i].nxt)&#123;<br><span class="hljs-type">int</span> v = e[i].to;<br><span class="hljs-keyword">if</span>(v==fa[u])<span class="hljs-keyword">continue</span>;<br>fa[v] = u;<br><span class="hljs-built_in">dfs</span>(v);<br>sz[u] += sz[v];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>sum[u] = sum[fa[u]] + <span class="hljs-built_in">calc</span>(u);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[u];i;i=e[i].nxt)&#123;<br><span class="hljs-type">int</span> v = e[i].to;<br><span class="hljs-keyword">if</span>(v==fa[u])<span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs2</span>(v);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> T;<br>cin &gt;&gt; n &gt;&gt; T;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)&#123;<br><span class="hljs-type">int</span> x = i;<br><span class="hljs-keyword">while</span>(~x&amp;<span class="hljs-number">1</span>)two[i] ++, x &gt;&gt;= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(x%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)five[i] ++,x /= <span class="hljs-number">5</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;++i)&#123;<br><span class="hljs-type">int</span> u,v;cin &gt;&gt; u &gt;&gt; v;<br><span class="hljs-built_in">addEdge</span>(u,v);<br><span class="hljs-built_in">addEdge</span>(v,u);<br>&#125;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(T--)&#123;<br><span class="hljs-type">int</span> u;cin &gt;&gt; u;<br>sum[u].<span class="hljs-built_in">print</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-jellyfish-and-its-dream"><a class="markdownIt-Anchor" href="#j-jellyfish-and-its-dream"></a> J Jellyfish and its dream</h2><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>考虑循环序列中相邻两数的情况：相等对（<code>00</code>,<code>11</code>,<code>22</code>），上升对（<code>01</code>,<code>12</code>,<code>20</code>）,上升对（<code>02</code>,<code>10</code>,<code>21</code>），我们的最终目标是将所有部分变为相等对；</p><p>单个上升对可以通过一次变换变为相等对，同时使该对左侧的下降对变为相等对，在这个过程中，上升对和下降对一一对应；<br />如果该上升对左侧也是上升对，经操作后，左侧变为下降对；<br />如果左侧是相等对，则可以直接略过，认为整个相等对均变换为上升对的右侧数字；</p><p>在上述过程中，如果仅存在上升对和相等对，则可以均变为相等对，如果存在下降对，则上升对数量需要大于等于下降对；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1000006</span>],b[<span class="hljs-number">1000006</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    b[<span class="hljs-number">0</span>] = (a[<span class="hljs-number">0</span>] - a[n - <span class="hljs-number">1</span>] + <span class="hljs-number">3</span>) % <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        b[i] = (a[i] - a[i - <span class="hljs-number">1</span>] + <span class="hljs-number">3</span>) % <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> c1 = <span class="hljs-number">0</span>, c2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b[i] == <span class="hljs-number">1</span>)<br>            c1++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b[i] == <span class="hljs-number">2</span>)<br>            c2++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c1 &gt;= c2)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="m-maimai-dx-2077"><a class="markdownIt-Anchor" href="#m-maimai-dx-2077"></a> M Maimai DX 2077</h2><p>模拟</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><p>注意对0的处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">double</span> mk[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>] = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-type">double</span> mke[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tmp, sum = <span class="hljs-number">0</span>, sm3 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> a, b, a0, b0;<br>    a = b = a0 = b0 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> sm = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>        &#123;<br>            cin &gt;&gt; tmp;<br>            sm += tmp;<br>            a0 += tmp * mk[i][j];<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)<br>                b0 += tmp * mke[j];<br>        &#125;<br>        a += sm * mk[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)<br>            b += sm * mke[<span class="hljs-number">0</span>], sm3 += sm;<br>        sum += sm;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12lf&quot;</span>, ((sum != <span class="hljs-number">0</span>) ? a0 / a * <span class="hljs-number">100</span> : <span class="hljs-number">100</span>) + ((sm3 != <span class="hljs-number">0</span>) ? b0 / b : <span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营9（ABEG）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A59%EF%BC%88ABEG%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A59%EF%BC%88ABEG%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33194">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#a-car-show">A Car Show</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-two-frogs">B Two Frogs</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-2">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#e-longest-increasing-subsequence">E Longest Increasing Subsequence</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-3">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#g-magic-spells">G Magic Spells</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-4">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li></ul></p><h2 id="a-car-show"><a class="markdownIt-Anchor" href="#a-car-show"></a> A Car Show</h2><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>给定长度为n，由数字1~m组成的数列，问包含全部m个数字的子串个数；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>定位每一个左端点，向右寻找最近的符合要求的右界，得到最小子串，右界从此处开始直至序列末尾均合法，依此更新答案；</p><p>更新答案后左界左移，再次执行以上过程；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1</span>, ct = <span class="hljs-number">0</span>;<br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span> (; r &lt;= n; r++)<br>    &#123;<br>        mp[a[r]]++;<br>        <span class="hljs-keyword">if</span> (mp[a[r]] == <span class="hljs-number">1</span>)<br>        &#123;<br>            ct++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (ct == m &amp;&amp; l &lt;= r)<br>        &#123;<br>            ans += n - r + <span class="hljs-number">1</span>;<br>            mp[a[l]]--;<br>            <span class="hljs-keyword">if</span> (!mp[a[l]])<br>                ct--;<br>            l++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-two-frogs"><a class="markdownIt-Anchor" href="#b-two-frogs"></a> B Two Frogs</h2><p>概率期望</p><h4 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h4><p>有n个荷叶排成一列，每个荷叶有属性值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，当青蛙在i号荷叶上时，下一步可以跳到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo>+</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i+1,i+a_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 号荷叶上，求两只青蛙从1号荷叶起经过相同次数的跳动，同时到达n号荷叶的概率；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>考虑 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">q[m][x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 为跳m次到达x号的概率，则有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn><mo>⩽</mo><mi>x</mi><mo>⩽</mo><mi>i</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msub><mfrac><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">q[m][x]=\sum_{i+1\leqslant x\leqslant i+a[i]}\frac {q[m-1][i]}{a[i]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mrel amsrm mtight">⩽</span><span class="mord mathdefault mtight">x</span><span class="mrel amsrm mtight">⩽</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">a</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">]</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ；<br />答案即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>q</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><msup><mo stretchy="false">]</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n-1}q[i][n]^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>；</p><p>考虑计算过程，由于对于每一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">q[m][x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> ，更新的是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>i</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">q[m][x+i],i\in[1,a[x]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span> 连续区间的值，我们可以用差分优化这个操作；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">998244353</span>;<br>ll q[<span class="hljs-number">8003</span>][<span class="hljs-number">8003</span>];<br><span class="hljs-type">int</span> exs[<span class="hljs-number">8003</span>];<br>ll inv[<span class="hljs-number">8003</span>];<br><span class="hljs-type">int</span> a[<span class="hljs-number">8003</span>];<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">Q_power</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b = M - <span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            res = res * a % M;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = a * a % M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>    &#123;<br>        inv[j] = <span class="hljs-built_in">Q_power</span>(j);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        exs[i] = <span class="hljs-number">10000</span>;<br>    exs[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= a[i]; j++)<br>        &#123;<br>            exs[i + j] = <span class="hljs-built_in">min</span>(exs[i + j], exs[i] + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    q[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = exs[i]; j &lt;= i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            q[i][j] = q[i - <span class="hljs-number">1</span>][j] + q[i][j];<br>            q[i][j] %= M;<br>            ll p = q[i][j] * inv[a[i]];<br>            q[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = (q[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] + p) % M;<br>            q[i + a[i] + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = (q[i + a[i] + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] - p) % M;<br>        &#125;<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = exs[n]; i &lt; n; i++)<br>        ans += q[n][i] * q[n][i], ans %= M;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-longest-increasing-subsequence"><a class="markdownIt-Anchor" href="#e-longest-increasing-subsequence"></a> E Longest Increasing Subsequence</h2><p>构造</p><h4 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h4><p>构造长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">n\leqslant100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span> 的排序，使得最长上升子序列恰好为m个；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>将m进行二进制拆分，考虑以下构造方法：</p><p><img src="https://s2.loli.net/2022/08/25/wL1eNZp4rCfjMnP.png" alt="image.png" /></p><p><img src="https://s2.loli.net/2022/08/25/TFfv9YqmLcG4HuV.png" alt="image.png" /></p><p><img src="https://s2.loli.net/2022/08/25/W7fKIT9AhlFHRzi.png" alt="image.png" /></p><p>对于每层最右侧的点，其向下的支是累计下层计数，向左的支是累计本层计数；</p><p>依照此策略，可以在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">3\log(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的长度内构造完成；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> ct = <span class="hljs-number">1</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">r</span><span class="hljs-params">(<span class="hljs-number">90</span>)</span></span>;<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((n &gt;&gt; i) &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                r[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>] = ct++;<br>                r[<span class="hljs-number">60</span> + i] = ct++;<br>                r[<span class="hljs-number">2</span> * i] = ct++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                r[<span class="hljs-number">60</span> + i] = ct++;<br>                r[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>] = ct++;<br>                r[<span class="hljs-number">2</span> * i] = ct++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;90\n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">90</span>;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>,r[i],<span class="hljs-string">&quot; \n&quot;</span>[i == <span class="hljs-number">89</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-magic-spells"><a class="markdownIt-Anchor" href="#g-magic-spells"></a> G Magic Spells</h2><p>manacher，二分</p><h4 id="题意-4"><a class="markdownIt-Anchor" href="#题意-4"></a> 题意</h4><p>给定k个字符串，找出在每个串都出现的回文串数量；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>首先考虑马拉车算法，找出所有字符串进行统计，使用map将字符串从哈希值映射到最近出现时间（1~k）；</p><p>果不其然地T了，接下来考虑优化：</p><p>首先进行剪枝，在固定圆心从大到小遍历半径的过程中，如果发现某串最近出现时间已经是当前，那么该圆心下半径更小的串就不用考虑了；</p><p>依然T，继续优化：</p><p>考虑二分，对于固定圆心从大到小遍历半径的过程中，存在分界半径i，半径小于i时最近出现时间均是上串，大于i时最近出现时间均早于上串，以此二分快速确定有效半径；</p><p>单哈希可以过；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">3e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">char</span> s[maxn * <span class="hljs-number">2</span>];<br>string str;<br><span class="hljs-type">int</span> d[maxn * <span class="hljs-number">2</span>], len;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getstr</span><span class="hljs-params">()</span> </span>&#123;<br>   str.<span class="hljs-built_in">clear</span>();<br>   <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>   str += <span class="hljs-string">&#x27;&#123;&#x27;</span>;<br>   k++;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>      str += <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>      str += s[i];<br>      k += <span class="hljs-number">2</span>;<br>   &#125;<br>   str += <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>   k++;<br>   len = k;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">manacher</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>, id;<br>   <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>      <span class="hljs-keyword">if</span> (i &lt; mx)<br>         d[i] = <span class="hljs-built_in">min</span>(mx - i + <span class="hljs-number">1</span>, d[<span class="hljs-number">2</span> * id - i]);<br>      <span class="hljs-keyword">else</span><br>         d[i] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> (i + d[i] &lt;= str.<span class="hljs-built_in">size</span>() &amp;&amp; i - d[i] &gt;= <span class="hljs-number">0</span> &amp;&amp;<br>             str[i + d[i]] == str[i - d[i]])<br>         d[i]++;<br>      <span class="hljs-keyword">if</span> (d[i] + i - <span class="hljs-number">1</span> &gt; mx) &#123;<br>         mx = d[i] + i - <span class="hljs-number">1</span>;<br>         id = i;<br>         maxx = <span class="hljs-built_in">max</span>(maxx, d[i]);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> (maxx - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> MAGIC = <span class="hljs-number">1e12</span> + <span class="hljs-number">39</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> hsh[maxn * <span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>   hsh[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i != maxn * <span class="hljs-number">2</span>; i++) &#123;<br>      hsh[i] = hsh[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1013ll</span> % MAGIC;<br>   &#125;<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> str_hsh[maxn * <span class="hljs-number">2</span>];<br><span class="hljs-type">void</span> _hsh() &#123;<br>   str_hsh[<span class="hljs-number">0</span>] = str[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;_&#x27;</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i != str.<span class="hljs-built_in">length</span>(); i++) &#123;<br>      str_hsh[i] = (str_hsh[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1013ll</span> + str[i] - <span class="hljs-string">&#x27;_&#x27;</span>) % MAGIC;<br>   &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">get_hash</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> str_hsh[r];<br>   <span class="hljs-keyword">auto</span> fna = str_hsh[r] -<br>              <span class="hljs-type">__int128_t</span>(<span class="hljs-number">1</span>) * str_hsh[l - <span class="hljs-number">1</span>] * hsh[r - l + <span class="hljs-number">1</span>] % MAGIC;<br>   <span class="hljs-keyword">if</span> (fna &lt; <span class="hljs-number">0</span>) fna += MAGIC;<br>   <span class="hljs-keyword">return</span> fna % MAGIC;<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> _len_hash(<span class="hljs-type">long</span> <span class="hljs-type">long</span> raw, <span class="hljs-type">int</span> len) &#123;<br>   <span class="hljs-keyword">return</span> raw * (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)<span class="hljs-number">3e5</span> + len;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> k;<br>   <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>   cin &gt;&gt; k;<br>   <span class="hljs-built_in">init</span>();<br>   unordered_map&lt;ll, <span class="hljs-type">int</span>&gt; mp;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> kki = <span class="hljs-number">0</span>; kki &lt; k; kki++) &#123;<br>      cin &gt;&gt; s;<br>      len = <span class="hljs-built_in">strlen</span>(s);<br>      <span class="hljs-built_in">getstr</span>();<br>      _hsh();<br>      <span class="hljs-built_in">manacher</span>();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>         <span class="hljs-comment">// printf(&quot;%c%d&quot;,str[i],d[i]);</span><br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = d[i]; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>            <span class="hljs-keyword">auto</span> hsh = <span class="hljs-built_in">get_hash</span>(i, i + j - <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">if</span> (mp[hsh] == kki + <span class="hljs-number">1</span>)<br>               <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[hsh] != kki) &#123;<br>               <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = j;<br><br>               <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>               <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>                  j = (l + r) / <span class="hljs-number">2</span>;<br>                  hsh = <span class="hljs-built_in">get_hash</span>(i, i + j - <span class="hljs-number">1</span>);<br>                  <span class="hljs-keyword">if</span> (mp[hsh] &lt; kki) &#123;<br>                     res = j;<br>                     r = j - <span class="hljs-number">1</span>;<br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                     l = j + <span class="hljs-number">1</span>;<br>                  &#125;<br>               &#125;<br>               j = res;<br>               <span class="hljs-comment">// cerr &lt;&lt; &quot;IN binary &quot; &lt;&lt; j &lt;&lt; &#x27;\n&#x27;;</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[hsh] == kki) &#123;<br>               mp[hsh] = kki + <span class="hljs-number">1</span>;<br>               <span class="hljs-keyword">if</span> (mp[hsh] == k &amp;&amp;<br>                   !(str[i + j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;&#125;&#x27;</span> || str[i + j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;&#123;&#x27;</span>))<br>                  ans++;<br>               <span class="hljs-comment">// break;</span><br>            &#125;<br><br>            <span class="hljs-comment">// cerr &lt;&lt; str.substr(i, j) &lt;&lt; &quot; &quot; &lt;&lt; hsh &lt;&lt; &quot; &quot; &lt;&lt;</span><br>            <span class="hljs-comment">// mp[hsh]</span><br>            <span class="hljs-comment">//      &lt;&lt; endl;</span><br><br>            <span class="hljs-comment">// printf(&quot;*%lld %d\n&quot;, mp[hsh],kki);</span><br>         &#125;<br>      &#125;<br>   &#125;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营8（DF）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A58%EF%BC%88DF%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A58%EF%BC%88DF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33193">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#d-poker-game-decision">D Poker Game: Decision</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#f-longest-common-subsequence">F Longest Common Subsequence</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li></ul></p><h2 id="d-poker-game-decision"><a class="markdownIt-Anchor" href="#d-poker-game-decision"></a> D Poker Game: Decision</h2><p>模拟</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>由于牌堆总数仅为6，所有情况也只有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo stretchy="false">!</mo><mo>=</mo><mn>720</mn></mrow><annotation encoding="application/x-tex">6!=720</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">2</span><span class="mord">0</span></span></span></span> 种，可以枚举所有情况来进行判断；</p><p>对于当前情况，代码中使用 <code>mnn</code> 来代表此时操作者所有操作中的最优情况（此判断中赢为1），对来自下一层的返回值进行取负处理；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; Alice[<span class="hljs-number">5</span>], Bob[<span class="hljs-number">5</span>];<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; dui[<span class="hljs-number">6</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">6</span>];<br><br><span class="hljs-comment">// &#123;color , number&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> color first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> number second</span><br><br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; cover_to = &#123;<br>    &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">14</span>&#125;, &#123;<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-number">13</span>&#125;, &#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-number">12</span>&#125;, &#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-number">11</span>&#125;, &#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-number">9</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-number">8</span>&#125;,  &#123;<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-number">7</span>&#125;,  &#123;<span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-number">6</span>&#125;,  &#123;<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-number">5</span>&#125;,  &#123;<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-number">4</span>&#125;,  &#123;<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">2</span>&#125;,  &#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">1</span>&#125;,  &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-number">2</span>&#125;,  &#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">3</span>&#125;,  &#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">4</span>&#125;,<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&amp; v)</span> </span>&#123;<br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),<br>        [](<span class="hljs-keyword">auto</span> a, <span class="hljs-keyword">auto</span> b) &#123; <span class="hljs-keyword">return</span> a.number &lt; b.number; &#125;);<br>   <span class="hljs-type">int</span> smc = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> &amp;&amp; smc; i++) &#123;<br>      <span class="hljs-keyword">if</span> (v[i].first != v[i - <span class="hljs-number">1</span>].first) smc = <span class="hljs-number">0</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (smc &amp;&amp; v[<span class="hljs-number">0</span>].second == <span class="hljs-number">10</span> &amp;&amp; v[<span class="hljs-number">1</span>].second == <span class="hljs-number">11</span> &amp;&amp;<br>       v[<span class="hljs-number">2</span>].second == <span class="hljs-number">12</span> &amp;&amp; v[<span class="hljs-number">3</span>].second == <span class="hljs-number">13</span> &amp;&amp; v[<span class="hljs-number">4</span>].second == <span class="hljs-number">14</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>   &#125;<br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; a, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; b) &#123;<br>      <span class="hljs-built_in">return</span> (a.second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> &lt; (b.second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span>;<br>   &#125;);<br>   <span class="hljs-keyword">if</span> (smc &amp;&amp; (v[<span class="hljs-number">1</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">0</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">2</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">1</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">3</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">2</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">4</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">3</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>   &#125;<br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),<br>        [](<span class="hljs-keyword">auto</span> a, <span class="hljs-keyword">auto</span> b) &#123; <span class="hljs-keyword">return</span> a.number &lt; b.number; &#125;);<br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">1</span>].second == v[<span class="hljs-number">2</span>].second &amp;&amp; v[<span class="hljs-number">2</span>].second == v[<span class="hljs-number">3</span>].second) &amp;&amp;<br>       (v[<span class="hljs-number">0</span>].second == v[<span class="hljs-number">1</span>].second || v[<span class="hljs-number">3</span>].second == v[<span class="hljs-number">4</span>].second)) &#123;<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">4</span>].number == v[<span class="hljs-number">3</span>].number) <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">0</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Full house</span><br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">0</span>].second == v[<span class="hljs-number">1</span>].second &amp;&amp; v[<span class="hljs-number">1</span>].second == v[<span class="hljs-number">2</span>].second &amp;&amp;<br>        v[<span class="hljs-number">3</span>].second == v[<span class="hljs-number">4</span>].second) ||<br>       (v[<span class="hljs-number">0</span>].second == v[<span class="hljs-number">1</span>].second &amp;&amp; v[<span class="hljs-number">2</span>].second == v[<span class="hljs-number">3</span>].second &amp;&amp;<br>        v[<span class="hljs-number">3</span>].second == v[<span class="hljs-number">4</span>].second)) &#123;<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">2</span>].number == v[<span class="hljs-number">4</span>].number) <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Flush</span><br>   <span class="hljs-keyword">if</span> (smc &amp;&amp; v[<span class="hljs-number">0</span>].second != v[<span class="hljs-number">1</span>].second &amp;&amp;<br>       v[<span class="hljs-number">1</span>].second != v[<span class="hljs-number">2</span>].second &amp;&amp; v[<span class="hljs-number">2</span>].second != v[<span class="hljs-number">3</span>].second &amp;&amp;<br>       v[<span class="hljs-number">3</span>].second != v[<span class="hljs-number">4</span>].second) &#123;<br>      <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Straight</span><br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; a, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; b) &#123;<br>      <span class="hljs-built_in">return</span> (a.second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> &lt; (b.second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span>;<br>   &#125;);<br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">1</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">0</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">2</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">1</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">3</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">2</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">4</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">3</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>   &#125;<br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),<br>        [](<span class="hljs-keyword">auto</span> a, <span class="hljs-keyword">auto</span> b) &#123; <span class="hljs-keyword">return</span> a.number &lt; b.number; &#125;);<br>   &#123;<br>      <span class="hljs-type">bool</span> f = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>         <span class="hljs-keyword">if</span> (v[i].number == v[i - <span class="hljs-number">1</span>].number + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>         <span class="hljs-keyword">else</span><br>            f = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">if</span>(f) &#123;<br>         <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>() , v.<span class="hljs-built_in">end</span>());<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">// Three of a kind</span><br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">0</span>].second == v[<span class="hljs-number">1</span>].second &amp;&amp; v[<span class="hljs-number">1</span>].second == v[<span class="hljs-number">2</span>].second)) &#123;<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">3</span>].number &lt; v[<span class="hljs-number">4</span>].number) <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">3</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">1</span>].second == v[<span class="hljs-number">2</span>].second &amp;&amp; v[<span class="hljs-number">2</span>].second == v[<span class="hljs-number">3</span>].second)) &#123;<br>      <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">0</span>], v[<span class="hljs-number">3</span>]);<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">3</span>].number &lt; v[<span class="hljs-number">4</span>].number) <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">3</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">2</span>].second == v[<span class="hljs-number">3</span>].second &amp;&amp; v[<span class="hljs-number">3</span>].second == v[<span class="hljs-number">4</span>].second)) &#123;<br>      <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">3</span>].number &lt; v[<span class="hljs-number">4</span>].number) <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">3</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Two pairs</span><br>   <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>   <span class="hljs-keyword">if</span> (v[<span class="hljs-number">0</span>].number == v[<span class="hljs-number">1</span>].number &amp;&amp; v[<span class="hljs-number">2</span>].number == v[<span class="hljs-number">3</span>].number)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">if</span> (v[<span class="hljs-number">0</span>].number == v[<span class="hljs-number">1</span>].number &amp;&amp; v[<span class="hljs-number">3</span>].number == v[<span class="hljs-number">4</span>].number) &#123;<br>      <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">2</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (v[<span class="hljs-number">1</span>].number == v[<span class="hljs-number">2</span>].number &amp;&amp; v[<span class="hljs-number">3</span>].number == v[<span class="hljs-number">4</span>].number) &#123;<br>      <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">0</span>], v[<span class="hljs-number">2</span>]);<br>      <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">2</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Pair</span><br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>      <span class="hljs-keyword">if</span> (v[i].number == v[i - <span class="hljs-number">1</span>].number) &#123;<br>         <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">0</span>], v[i - <span class="hljs-number">1</span>]);<br>         <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">1</span>], v[i]);<br>         <span class="hljs-keyword">if</span>(v[<span class="hljs-number">2</span>].number&lt;v[<span class="hljs-number">3</span>].number)<span class="hljs-built_in">swap</span>(v[<span class="hljs-number">2</span>],v[<span class="hljs-number">3</span>]);<br>         <span class="hljs-keyword">if</span>(v[<span class="hljs-number">3</span>].number&lt;v[<span class="hljs-number">4</span>].number)<span class="hljs-built_in">swap</span>(v[<span class="hljs-number">3</span>],v[<span class="hljs-number">4</span>]);<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; as, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; bs)</span> </span>&#123;<br>   <span class="hljs-type">int</span> a = <span class="hljs-built_in">judge</span>(as), b = <span class="hljs-built_in">judge</span>(bs);<br>   <span class="hljs-keyword">if</span> (a &gt; b)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; b)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (a == <span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>         <span class="hljs-keyword">if</span> (as[i].number &gt; bs[i].number)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (as[i].number &lt; bs[i].number)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> last = <span class="hljs-number">6</span>)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (last == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-type">int</span> k = <span class="hljs-built_in">check</span>(vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;(<span class="hljs-built_in">begin</span>(Alice), <span class="hljs-built_in">end</span>(Alice)),<br>                    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;(<span class="hljs-built_in">begin</span>(Bob), <span class="hljs-built_in">end</span>(Bob)));<br>      <span class="hljs-keyword">return</span> k;<br>   &#125;<br><br>   <span class="hljs-type">int</span> mnn = <span class="hljs-number">-1</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">if</span> (vis[i]) <span class="hljs-keyword">continue</span>;<br>      vis[i] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (last % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>         Alice[<span class="hljs-number">5</span> - (last + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] = dui[i];<br>      <span class="hljs-keyword">else</span><br>         Bob[<span class="hljs-number">5</span> - (last + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] = dui[i];<br>      mnn = <span class="hljs-built_in">max</span>(-<span class="hljs-built_in">get</span>(last - <span class="hljs-number">1</span>), mnn);<br>      vis[i] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> (mnn == <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> mnn;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>      string s;<br>      cin &gt;&gt; s;<br>      Alice[i] = &#123;cover_to[s[<span class="hljs-number">1</span>]], cover_to[s[<span class="hljs-number">0</span>]]&#125;;<br>   &#125;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>      string s;<br>      cin &gt;&gt; s;<br>      Bob[i] = &#123;cover_to[s[<span class="hljs-number">1</span>]], cover_to[s[<span class="hljs-number">0</span>]]&#125;;<br>   &#125;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      string s;<br>      cin &gt;&gt; s;<br>      dui[i] = &#123;cover_to[s[<span class="hljs-number">1</span>]], cover_to[s[<span class="hljs-number">0</span>]]&#125;;<br>   &#125;<br><br>   <span class="hljs-keyword">auto</span> ans = <span class="hljs-built_in">get</span>();<br><br>   <span class="hljs-comment">// cout &lt;&lt; ans &lt;&lt; &#x27;\n&#x27;;</span><br><br>   <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">1</span>)<br>      cout &lt;&lt; <span class="hljs-string">&quot;Alice\n&quot;</span>;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">0</span>)<br>      cout &lt;&lt; <span class="hljs-string">&quot;Draw\n&quot;</span>;<br>   <span class="hljs-keyword">else</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;Bob\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> t;<br>   cin &gt;&gt; t;<br><br>   <span class="hljs-keyword">while</span> (t--) <span class="hljs-built_in">solve</span>();<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-longest-common-subsequence"><a class="markdownIt-Anchor" href="#f-longest-common-subsequence"></a> F Longest Common Subsequence</h2><p>数学</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>给出两个数列长度和随机数生成方式，求按要求生成两数列后，两数列的最长公共子序列；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>介于数列长度非常大（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi>e</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">1e6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">6</span></span></span></span>）通常的DP方法复杂度不可接受；</p><p>我们考虑数列的生成方式：由于在生成过程中，一个数的取值只与上一个数有关，那么在这两个序列中，只要有一位相同，那么接下来的部分均相同；</p><p>我们只需要记录下每个数字在序列n中第一次出现的下标，如果在m中再次出现，我们便可以计算出以其起始的最长公共子序列长度，并更新答案；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t, n, m, p, x, a, b, c;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;p, &amp;x, &amp;a, &amp;b, &amp;c);<br>        unordered_map&lt;ll, <span class="hljs-type">int</span>&gt; mp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            x = a * x % p * x % p + b * x % p + c;<br>            x %= p;<br>            <span class="hljs-keyword">if</span> (!mp[x])<br>                mp[x] = i;<br>        &#125;<br>        ll ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            x = a * x % p * x % p + b * x % p + c;<br>            x %= p;<br>            <span class="hljs-keyword">if</span> (mp[x])<br>            &#123;<br>                ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">min</span>(n - mp[x] + <span class="hljs-number">1</span>, m - i + <span class="hljs-number">1</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营7（BCFGJ）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A57%EF%BC%88BCFGJ%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A57%EF%BC%88BCFGJ%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33192">题集链接</a>；</p><p><a href="https://www.bilibili.com/video/BV1ev4y1F75d">视频题解</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#b-rotate-sum-3">B Rotate Sum 3</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#c-constructive-problems-never-die">C Constructive Problems Never Die</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-2">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#f-candies">F Candies</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-3">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#g-regular-expression">G Regular Expression</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-4">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#j-melborp-elcissalc">J Melborp Elcissalc</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-5">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li></ul></p><h2 id="b-rotate-sum-3"><a class="markdownIt-Anchor" href="#b-rotate-sum-3"></a> B Rotate Sum 3</h2><p>计算几何</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>给出一个凸包，使其绕对称轴旋转，求其扫过的体积；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>分类讨论：</p><ol><li>若没有对称轴，则不存在体积；</li><li>若仅有一条对称轴，则按照旋转体求体积，为了避免被long double卡精度，可以将凸包形成的旋转体切成若干圆台，累加体积；</li><li>若有大于等于2条对称轴，则其可以旋转为一个球，其半径为所有点与重心的距离的最大值；</li></ol><p>对于第三种情况，由于其具有多条对称轴，重心可以通过坐标累加求平均值来得出；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sign</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// 符号函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(x) &lt; eps)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    ll x, y;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">double</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> b = <span class="hljs-number">0</span>) &#123; x = a, y = b; &#125;<br>    Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x + a.x, y + a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x - a.x, y - a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x * a, y * a); &#125;<br>    Point <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x / a, y / a); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> !<span class="hljs-built_in">sign</span>(x - a.x) &amp;&amp; !<span class="hljs-built_in">sign</span>(y - a.y); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> (<span class="hljs-built_in">fabs</span>(x - a.x) &lt; eps) ? (y &lt; a.y) : (x &lt; a.x); &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Line</span><br>&#123;<br>    Point a, v;<br>    <span class="hljs-built_in">Line</span>(Point x = <span class="hljs-built_in">Point</span>(), Point y = <span class="hljs-built_in">Point</span>()) &#123; a = x, v = y; &#125;<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dots_num = <span class="hljs-number">100005</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Poly</span><br>&#123;<br>    <span class="hljs-type">int</span> num;<br>    Point dots[dots_num];<br>    <span class="hljs-built_in">Poly</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>) &#123; num = x; &#125;<br>&#125;;<br><span class="hljs-function">ll <span class="hljs-title">dot</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.x + a.y * b.y; &#125;<br><span class="hljs-function">ll <span class="hljs-title">cross</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.y - b.x * a.y; &#125;<br><span class="hljs-function">ll <span class="hljs-title">get_length2</span><span class="hljs-params">(Point a)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">dot</span>(a, a)); &#125;<br><span class="hljs-function">ll <span class="hljs-title">polygon_square2</span><span class="hljs-params">(Poly m)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m.num; i++)<br>    &#123;<br>        ans += <span class="hljs-built_in">cross</span>(m.dots[i], m.dots[(i + <span class="hljs-number">1</span>) % m.num]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(ans);<br>&#125;<br><span class="hljs-type">int</span> pos;<br><br><span class="hljs-type">int</span> d[<span class="hljs-number">4</span> * dots_num];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">manacher</span><span class="hljs-params">(Poly v)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;pair&lt;ll, pair&lt;Point, Point&gt;&gt;&gt; str;<br>    <span class="hljs-type">int</span> axiss = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v.num; i++)<br>    &#123;<br>        str.<span class="hljs-built_in">push_back</span>(<br>            <span class="hljs-built_in">make_pair</span>(<span class="hljs-built_in">get_length2</span>(v.dots[(i - <span class="hljs-number">1</span> + v.num) % v.num] - v.dots[(i + <span class="hljs-number">1</span>) % v.num]),<br>                      <span class="hljs-built_in">make_pair</span>(v.dots[(i - <span class="hljs-number">1</span> + v.num) % v.num], v.dots[(i + <span class="hljs-number">1</span>) % v.num])));<br>        str.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-built_in">get_length2</span>(v.dots[i] - v.dots[(i + <span class="hljs-number">1</span>) % v.num]),<br>                                <span class="hljs-built_in">make_pair</span>(v.dots[i], v.dots[(i + <span class="hljs-number">1</span>) % v.num])));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v.num &lt;&lt; <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        str.<span class="hljs-built_in">push_back</span>(str[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>, id; <span class="hljs-comment">// mx为最右边，id为中心点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; mx)<br>            d[i] = <span class="hljs-built_in">min</span>(mx - i + <span class="hljs-number">1</span>, d[<span class="hljs-number">2</span> * id - i]); <span class="hljs-comment">//判断当前点超没超过mx</span><br>        <span class="hljs-keyword">else</span><br>            d[i] = <span class="hljs-number">1</span>; <span class="hljs-comment">//超过了就让他等于1，之后再进行查找</span><br>                      <span class="hljs-comment">// if (i + d[i] - 1 &gt;= mx) //实际操作中并不需要特判</span><br>        <span class="hljs-keyword">while</span> (i + d[i] &lt;= str.<span class="hljs-built_in">size</span>() &amp;&amp; i - d[i] &gt;= <span class="hljs-number">0</span> &amp;&amp;<br>               !<span class="hljs-built_in">sign</span>(str[i + d[i]].first - str[i - d[i]].first))<br>            d[i]++; <span class="hljs-comment">//判断当前点是不是最长回文子串，不断的向右扩展</span><br>        <span class="hljs-keyword">if</span> (d[i] + i - <span class="hljs-number">1</span> &gt; mx)<br>        &#123; <span class="hljs-comment">//更新mx</span><br>            mx = d[i] + i - <span class="hljs-number">1</span>;<br>            id = i; <span class="hljs-comment">//更新中间点</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &gt;= v.num &amp;&amp; i &lt; <span class="hljs-number">2</span> * v.num &amp;&amp; <span class="hljs-number">1</span> + <span class="hljs-number">2</span> * (d[i] - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">2</span> * v.num)<br>            axiss++, pos = i -v.num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> axiss;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">distance_to_line</span><span class="hljs-params">(Point p, Line m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">cross</span>(p - m.a, m.v) / <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">get_length2</span>(m.v)));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">polygon_center</span><span class="hljs-params">(Poly m, Line ml)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br>    pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; mp;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">polygon_square2</span>(m)) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m.num; i++)<br>    &#123;<br>        ans =<br>            ans + (m.dots[i] + m.dots[(i + <span class="hljs-number">1</span>) % m.num]) * <span class="hljs-built_in">cross</span>(m.dots[i], m.dots[(i + <span class="hljs-number">1</span>) % m.num]);<br>    &#125;<br>    mp.first = ans.x / <span class="hljs-number">3.0</span> / (<span class="hljs-built_in">polygon_square2</span>(m));<br>    mp.second = ans.y / <span class="hljs-number">3.0</span> / (<span class="hljs-built_in">polygon_square2</span>(m));<br>    pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; tmp = &#123;mp.first - ml.a.x, mp.second - ml.a.y&#125;;<br>    <span class="hljs-type">double</span> dis = <span class="hljs-built_in">fabs</span>((tmp.first * ml.v.y - ml.v.x * tmp.second) / <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">get_length2</span>(ml.v)));<br>    <span class="hljs-keyword">return</span> dis;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    Poly a = <span class="hljs-built_in">Poly</span>(n), h = <span class="hljs-built_in">Poly</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;a.dots[i].x, &amp;a.dots[i].y);<br>    &#125;<br>    <span class="hljs-type">int</span> as = <span class="hljs-built_in">manacher</span>(a);<br>    <span class="hljs-comment">// cout &lt;&lt; as &lt;&lt; endl;</span><br>    <span class="hljs-keyword">if</span> (as == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (as == <span class="hljs-number">1</span>)<br>    &#123;<br>        vector&lt;Point&gt; u;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.num; i++)<br>        &#123;<br>            u.<span class="hljs-built_in">push_back</span>(a.dots[i] + a.dots[i]);<br>            u.<span class="hljs-built_in">push_back</span>(a.dots[i] + a.dots[(i + <span class="hljs-number">1</span>) % a.num]);<br>        &#125;<br>        <span class="hljs-comment">// u[pos] 为对称轴的上的点</span><br>        Point lp = u[(pos + a.num) % (<span class="hljs-number">2</span> * a.num)], lv = lp - u[pos];<br>        <span class="hljs-type">int</span> l = (pos - <span class="hljs-number">1</span> + (<span class="hljs-number">2</span> * a.num)) % (<span class="hljs-number">2</span> * a.num), r = (pos + <span class="hljs-number">1</span>) % (<span class="hljs-number">2</span> * a.num);<br>        <span class="hljs-type">long</span> <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>, k2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; l != r; l = (l - <span class="hljs-number">1</span> + (<span class="hljs-number">2</span> * a.num)) % (<span class="hljs-number">2</span> * a.num), r = (r + <span class="hljs-number">1</span>) % (<span class="hljs-number">2</span> * a.num))<br>        &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">double</span> k1 = <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">get_length2</span>(u[l] - u[r])) / <span class="hljs-number">2</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-type">double</span> h = <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">dot</span>(u[r] - u[(r - <span class="hljs-number">1</span> + (<span class="hljs-number">2</span> * a.num)) % (<span class="hljs-number">2</span> * a.num)], lv));<br>            ans += h * (k1 * k1 + k2 * k2 + k1 * k2);<br>            k2 = k1;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12Lf&quot;</span>, PI * ans / <span class="hljs-number">24</span> / <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">get_length2</span>(lv)));<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Point m = <span class="hljs-built_in">Point</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            m = m + a.dots[i];<br>        &#125;<br>        __int128 r = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            r = <span class="hljs-built_in">max</span>(r, (__int128)(m.x - n * a.dots[i].x) * (m.x - n * a.dots[i].x) + (__int128)(m.y - n * a.dots[i].y) * (m.y - n * a.dots[i].y));<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; r &lt;&lt; endl;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12Lf&quot;</span>, (<span class="hljs-type">long</span> <span class="hljs-type">double</span>)<span class="hljs-number">4.0</span> / <span class="hljs-number">3</span> * PI * <span class="hljs-built_in">sqrtl</span>(r) / n * r / n / n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-constructive-problems-never-die"><a class="markdownIt-Anchor" href="#c-constructive-problems-never-die"></a> C Constructive Problems Never Die</h2><p>构造</p><h4 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h4><p>给定一个长度为 n 的序列，要求构造一个等长的排列，使得排列每一位都与序列的对应位不同；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>默认排列为1~n，顺次处理每一位，如果此位与序列对应位相同，则将此位与最后一位对换；</p><p>对于最后一位，如果与序列对应位相同，则向前寻找合适的位来对换，若寻找不到，则认为此情况无解；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> b[<span class="hljs-number">100005</span>], a[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n, f = <span class="hljs-number">1</span>;<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]), a[i] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>            <span class="hljs-keyword">if</span> (b[i] == a[i])<br>                <span class="hljs-built_in">swap</span>(a[i], a[i + <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span> (a[n] == b[n])<br>        &#123;<br>            <span class="hljs-type">int</span> i = n;<br>            <span class="hljs-keyword">while</span> (b[i] == a[n] &amp;&amp; i &gt;= <span class="hljs-number">1</span>)<br>                i--;<br>            <span class="hljs-keyword">if</span> (i)<br>                <span class="hljs-built_in">swap</span>(a[i], a[n]);<br>            <span class="hljs-keyword">else</span><br>                f = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-candies"><a class="markdownIt-Anchor" href="#f-candies"></a> F Candies</h2><p>数据结构、贪心</p><h4 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h4><p>给出一个长度为n的循环序列和数字x，若序列中相邻的两位相同或和为x，则删去这两位，与这两位相邻的两位变得相邻；求最多删去多少次；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>考虑贪心维护双向链表暴力做，赛时并没有发现可以卡掉贪心策略或将其复杂度卡至 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的情况；<br />注意判断在双向链表过短时的处理方式；</p><p>也可以将所有满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>&lt;</mo><msub><mi>a</mi><mi>i</mi></msub><mo>⩽</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">x/2&lt;a_i\leqslant x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.78667em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的数字处理成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x-a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，之后使用栈来依据相等判据维护，最后处理栈顶和栈底是否可以消除；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><p>下面是第一种</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    ll a;<br>    <span class="hljs-type">int</span> lst, nxt;<br>&#125; lk[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n, x, ct = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n &gt;&gt; x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;lk[i].a);<br>        lk[i].nxt = (i + <span class="hljs-number">1</span>) % n;<br>        lk[i].lst = (i - <span class="hljs-number">1</span> + n) % n;<br>    &#125;<br>    <span class="hljs-type">int</span> nw = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n - <span class="hljs-number">2</span> * ct &lt;= <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> f = <span class="hljs-number">0</span>, ctt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (ctt / <span class="hljs-number">2</span> &lt;= n - <span class="hljs-number">2</span> * ct)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (lk[nw].a == lk[lk[nw].nxt].a || lk[nw].a + lk[lk[nw].nxt].a == x)<br>            &#123;<br>                <span class="hljs-comment">// printf(&quot;%d %d %d*\n&quot;,nw,lk[nw].a,lk[lk[nw].nxt].a);</span><br>                nw = lk[nw].lst;<br>                lk[nw].nxt = lk[lk[lk[nw].nxt].nxt].nxt;<br>                <span class="hljs-type">int</span> tmp = lk[nw].nxt;<br>                lk[tmp].lst = nw;<br>                ct++;<br>                f++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">// printf(&quot;%d*\n&quot;,nw);</span><br>                nw = lk[nw].nxt;<br>            &#125;<br>            ctt++;<br>            <span class="hljs-comment">// nw%=n;</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (!f)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout &lt;&lt; ct;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-regular-expression"><a class="markdownIt-Anchor" href="#g-regular-expression"></a> G Regular Expression</h2><h4 id="题意-4"><a class="markdownIt-Anchor" href="#题意-4"></a> 题意</h4><p>依照题目中给出的正则表达式规则，对于每个题给串找出最短的、全匹配的正则表达式长度，和最短长度下的表达式数目；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>我们发现表达式 <code>.*</code> 即可以表示任意串，所以表达式长度不会超过2；</p><p>对于长度为1的串，其正则表达式最短长度为1，2种情况为 <code>a</code> <code>.</code>；<br />对于长度为2的串，如果每位相同，则最短长度为2，8种情况为<code>aa</code> <code>a.</code> <code>.a</code> <code>a*</code> <code>a+</code> <code>..</code> <code>.*</code> <code>.+</code>；<br />对于长度为2的串，如果每位不同，则最短长度是2，6种情况为<code>ab</code> <code>a.</code> <code>.b</code> <code>..</code> <code>.*</code> <code>.+</code>；<br />对于长度大于等于3的串，如果每位相同，则最短长度为2，4种情况为<code>a*</code> <code>a+</code> <code>.*</code> <code>.+</code>；<br />对于长度大于等于3的串，如果不满足每位相同，则最短长度为2，2种情况为<code>.*</code> <code>.+</code>；<br />（上述a,b均仅为示意）</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">int</span> t ; cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--) &#123;<br>        string s ; cin &gt;&gt; s;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">length</span>() == <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;1 2\n&quot;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">length</span>() == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] == s[<span class="hljs-number">1</span>]) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;2 8\n&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;2 6\n&quot;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">bool</span> f = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i != s.<span class="hljs-built_in">length</span>() ; i ++ ) &#123;<br>            <span class="hljs-keyword">if</span>(s[i] == s[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            f = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(f) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;2 4\n&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;2 2\n&quot;</span>;<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-melborp-elcissalc"><a class="markdownIt-Anchor" href="#j-melborp-elcissalc"></a> J Melborp Elcissalc</h2><p>数学，DP</p><h4 id="题意-5"><a class="markdownIt-Anchor" href="#题意-5"></a> 题意</h4><p>定义由0~k-1数字组成的序列的k意义下好度为该序列所有子序列中，子序列和在k意义下与0同余的数量；求长度为n的序列中k意义下好度为t的序列个数；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>我们将序列转换成模k前缀和，我们定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">c[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>为数字i在模k前缀和中出现的次数；<br />我们发现该序列的好度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msubsup><mi>C</mi><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sum_{i=0}^{k-1}C_{c[i]}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4860079999999998em;vertical-align:-0.49699999999999994em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.378em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49699999999999994em;"><span></span></span></span></span></span></span></span></span></span>；<br />也就是说每一个模k前缀和序列都对应着一个原始序列，我们只需要统计模k前缀和序列中符合条件的个数即可；</p><p>我们定义状态表示：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>为仅使用数字0~i，长度为j，好度为k的方案数；<br />有初态：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi>j</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dp[0][j][(j+1)j/2]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；<br />有状态转移方程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><munderover><mo>∑</mo><mrow><mi>c</mi><mi>t</mi><mo>=</mo><mn>0</mn></mrow><mi>j</mi></munderover><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>c</mi><mi>t</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><mi>t</mi></munderover><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>c</mi><mi>t</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mfrac><mrow><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>c</mi><mi>t</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo stretchy="false">]</mo><msubsup><mi>C</mi><mi>j</mi><mrow><mi>c</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">dp[i][j][k]=\sum_{j=0}^n\sum_{ct=0}^j\sum_{k=\frac{ct(ct-1)}{2}}^{t}dp[i-1][j-ct][k-\frac{ct(ct-1)}{2}]C_{j}^{ct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6420320000000004em;vertical-align:-1.7832549999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000007em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8587770000000003em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7805610000000005em;"><span style="top:-1.607545em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0377857142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7832549999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.843556em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>即从j长度中填入ct个数字i；</p><p>答案即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[k-1][n][t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span>；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">70</span>;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">998244353</span>;<br>ll dp[N][N][N * N / <span class="hljs-number">2</span>]; <span class="hljs-comment">//使用数字0~i，长度j，贡献k</span><br>ll fc[N], inv[N];<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a % M;<br>        a = a * a % M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123; <span class="hljs-keyword">return</span> fc[n] * inv[m] % M * inv[n - m] % M; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    fc[<span class="hljs-number">0</span>] = inv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        fc[i] = fc[i - <span class="hljs-number">1</span>] * i % M;<br>        inv[i] = <span class="hljs-built_in">qm</span>(fc[i], M - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, t;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; (j + <span class="hljs-number">1</span>) * j / <span class="hljs-number">2</span> &lt;= t; j++)<br>        dp[<span class="hljs-number">0</span>][j][(j + <span class="hljs-number">1</span>) * j / <span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) <span class="hljs-comment">//限定数字</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++) <span class="hljs-comment">//限定长度</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> ct = <span class="hljs-number">0</span>; ct &lt;= j; ct++) <span class="hljs-comment">//限定i的使用量</span><br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = ct * (ct - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; k &lt;= t; k++) <span class="hljs-comment">//限定贡献</span><br>                &#123;<br>                    dp[i][j][k] += dp[i - <span class="hljs-number">1</span>][j - ct][k - ct * (ct - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] * <span class="hljs-built_in">c</span>(j, ct) % M;<br>                    dp[i][j][k] %= M;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; dp[m<span class="hljs-number">-1</span>][n][t];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营6（ABGIJM）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A56%EF%BC%88ABGIJM%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A56%EF%BC%88ABGIJM%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33191">题集链接</a>；<br /><a href="https://www.bilibili.com/video/BV17W4y1Y74t">视频题解</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#a-array">A Array</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-eezie-and-pie">B Eezie and Pie</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-2">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#g-icon-design">G Icon Design</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-3">题意</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#i-line">I Line</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-4">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#j-number-game">J Number Game</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-5">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#m-game-on-grid">M Game on grid</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-6">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li></ul></p><h2 id="a-array"><a class="markdownIt-Anchor" href="#a-array"></a> A Array</h2><p>构造</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>给定序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mfrac><mn>1</mn><msub><mi>a</mi><mi>i</mi></msub></mfrac><mo>⩽</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\sum\frac 1{a_i}\leqslant\frac 12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2902079999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，构造长度不超过1e6的序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，满足在 c 序列首尾相接形成的序列 b 中，任意长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的子串都含有数字 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> ；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的限制，我们可以理解为“填充率”，即数字 i 至少占所求序列的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msub><mi>a</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">\frac 1{a_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2902079999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ；</p><p>然后我们考虑构造，考虑序列 c 的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2\max(a_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，对于每一个 i ，按 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 升序排列，依次构造，从起始处开始每 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 位填入一个 i ，如果对应位被占，则向左找最近的空位；</p><p>在结尾处，我们考虑可能存在由于被占位造成的左移，使得c序列最后一个 i 和下一个c序列的第一个i之间的距离不满足要求，则我们在结尾处重新寻找空位插入；</p><p>由于保证有解，所以不存在<em>数组前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 位均被占</em>或<em>找不到空位</em>等情况；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> ans[<span class="hljs-number">1000006</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, mxg = <span class="hljs-number">0</span>;<br>    pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; g[<span class="hljs-number">100005</span>];<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g[i].first), g[i].second = i, mxg = <span class="hljs-built_in">max</span>(mxg, g[i].first);<br>    <span class="hljs-built_in">sort</span>(g + <span class="hljs-number">1</span>, g + n + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br><span class="hljs-type">int</span> j=c;<br><span class="hljs-keyword">while</span>(ans[j])j++,c++;<br>        <span class="hljs-keyword">for</span> (; j &lt;= <span class="hljs-number">2</span>*mxg; j += g[i].first)<br>        &#123;<br><span class="hljs-keyword">while</span>(ans[j])j--;<br>            ans[j] = g[i].second;<br>        &#125;<br><span class="hljs-keyword">if</span>(j<span class="hljs-number">-2</span>*mxg&lt;c)<br>&#123;<br><span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">2</span>*mxg||ans[j])j--;<br>ans[j] = g[i].second;<br>&#125;<br>        c++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">2</span>*mxg);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span>*mxg; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, (ans[i])?ans[i]:<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-eezie-and-pie"><a class="markdownIt-Anchor" href="#b-eezie-and-pie"></a> B Eezie and Pie</h2><p>树上差分</p><h4 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h4><p>在一棵以 1 为根的树中，每一个点有一个属性 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，表示该点可以覆盖自己和向根方向的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个点（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不含自身），输出每个点可以被几个点覆盖；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>区间加问题，我们考虑差分来解决；</p><p>在dfs形成的每一条链上，我们对末端点的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 进行差分，在dfs离开该点时，将该点的差分值加到父亲上，以此统计每个点的被覆盖次数；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>vector&lt;<span class="hljs-type">int</span>&gt; rod[<span class="hljs-number">2000006</span>];<br>ll ans[<span class="hljs-number">2000006</span>], d[<span class="hljs-number">2000006</span>];<br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; tmp;<span class="hljs-comment">//这里的.first实际上无意义</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    tmp.<span class="hljs-built_in">push_back</span>(&#123;x, <span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">int</span>)tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> - d[x] - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>)<br>        tmp[(<span class="hljs-type">int</span>)tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> - d[x] - <span class="hljs-number">1</span>].second--;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : rod[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (u == f)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(u, x);<br>    &#125;<br><br>    ans[x] = tmp[tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>].second;<br>    <span class="hljs-keyword">if</span> (tmp.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        tmp[tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>].second += tmp[tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>].second;<br>    &#125;<br>    tmp.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, u, v;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        rod[u].<span class="hljs-built_in">push_back</span>(v);<br>        rod[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;d[i]);<br>    &#125;<br><span class="hljs-comment">// tmp.push_back(&#123;0,0&#125;);</span><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="g-icon-design"><a class="markdownIt-Anchor" href="#g-icon-design"></a> G Icon Design</h2><p>字符串</p><h4 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h4><p>按要求打印字符串</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> n;<br>   cin &gt;&gt; n;<br><br>   set&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; s;<br><br>   <span class="hljs-comment">// N</span><br><br>   <span class="hljs-type">int</span> L = n + <span class="hljs-number">1</span>, U = n;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>; i++) &#123;<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + i&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">1</span>, U + i&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>, U + i&#125;);<br>   &#125;<br><br>   <span class="hljs-comment">// F</span><br><br>   L += <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span> + n + <span class="hljs-number">1</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>; i++) &#123;<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">1</span>, U + i&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + <span class="hljs-number">1</span>&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + n + <span class="hljs-number">2</span>&#125;);<br>   &#125;<br><br>   <span class="hljs-comment">// L</span><br><br>   L += <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span> + n + <span class="hljs-number">1</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>; i++) &#123;<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">1</span>, U + i&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>&#125;);<br>   &#125;<br><br>   <span class="hljs-comment">// S</span><br>   L += <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span> + n + <span class="hljs-number">1</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>; i++) &#123;<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + <span class="hljs-number">1</span>&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + n + <span class="hljs-number">2</span>&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>&#125;);<br>      <span class="hljs-keyword">if</span> (i &lt;= n + <span class="hljs-number">2</span>) &#123;<br>         s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">1</span>, U + i&#125;);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i &gt;= n + <span class="hljs-number">2</span>) &#123;<br>         s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>, U + i&#125;);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> * n + <span class="hljs-number">5</span>; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">13</span> * n + <span class="hljs-number">19</span>; j++) &#123;<br>         <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span> || i == <span class="hljs-number">4</span> * n + <span class="hljs-number">5</span> - <span class="hljs-number">1</span> ||<br>             j == <span class="hljs-number">13</span> * n + <span class="hljs-number">19</span> - <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;*&#x27;</span>;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">find</span>(&#123;j, i&#125;) != s.<span class="hljs-built_in">end</span>()) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;@&quot;</span>;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;.&quot;</span>;<br>         &#125;<br>      &#125;<br>      cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-line"><a class="markdownIt-Anchor" href="#i-line"></a> I Line</h2><p>构造</p><h4 id="题意-4"><a class="markdownIt-Anchor" href="#题意-4"></a> 题意</h4><p>给定向量集 v 和数字 d ，要求生成点集 p ，要求 p 中的每个点在向量集 v 的每个方向上（共线即可）都经过恰好 d 个 p 中的点（含自身）；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>我们首先在 p 中构造原点，再对 p 中的每个点依次沿着 v 中的每个方向构造 d-1 个点；</p><p>为了保证不发生意外共线，我们可以将延长的距离乘一个对 v 中元素两两不同的系数，经测试，取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><msup><mn>7</mn><mi>i</mi></msup><mo separator="true">,</mo><mn>2</mn><msup><mn>3</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">37^i,23^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.019104em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span> 均可；<br />经测试，某些质数也会发生意外共线，具体原因待确定；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>pair&lt;ll, ll&gt; vv[<span class="hljs-number">10</span>];<br>vector&lt;pair&lt;pair&lt;ll, ll&gt;, <span class="hljs-type">int</span>&gt;&gt; pp;<br>vector&lt;pair&lt;ll, ll&gt;&gt; p;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(pair&lt;pair&lt;ll, ll&gt;, <span class="hljs-type">int</span>&gt; a, pair&lt;pair&lt;ll, ll&gt;, <span class="hljs-type">int</span>&gt; b)<br>&#123;<br>    <span class="hljs-keyword">return</span> a.first.first == b.first.first &amp;&amp; a.first.second == b.first.second;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, u, v, d;<br>    cin &gt;&gt; n &gt;&gt; d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;vv[i].first, &amp;vv[i].second);<br>        <span class="hljs-keyword">if</span> (vv[i].first * vv[i].second)<br>        &#123;<br>            <span class="hljs-type">int</span> g = __gcd(<span class="hljs-built_in">abs</span>(vv[i].first), <span class="hljs-built_in">abs</span>(vv[i].second));<br>            vv[i].first /= g;<br>            vv[i].second /= g;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (vv[i].first + vv[i].second)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (vv[i].second)<br>                    vv[i] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vv[i].first)<br>                    vv[i] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(vv, vv + n);<br>    n = <span class="hljs-built_in">unique</span>(vv, vv + n) - vv;<br>    pp.<span class="hljs-built_in">push_back</span>(&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, <span class="hljs-number">-1</span>&#125;);<br>    ll bas = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++, bas *= <span class="hljs-number">37</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; pp.<span class="hljs-built_in">size</span>(); k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (pp[k].second == i)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">auto</span> tt = pp[k].first;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j &lt;= d; j++)<br>            &#123;<br>                pp.<span class="hljs-built_in">push_back</span>(<br>                    &#123;&#123;tt.first + vv[i].first * bas * j, tt.second + vv[i].second * bas * j&#125;, i&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, pp.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : pp)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, (i.first), (i.second));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-number-game"><a class="markdownIt-Anchor" href="#j-number-game"></a> J Number Game</h2><p>数学</p><h4 id="题意-5"><a class="markdownIt-Anchor" href="#题意-5"></a> 题意</h4><p>给定数字 A,B,C ，定义两种操作，问能否通过若干操作使得第三个位置的数字变为 x ；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>对于一组相同的值，进行若干次操作，这组值只会有两种不同的结果。其中第二个位置（B）的值只有可能是 B 和 A-B ；</p><p>那么对于第三个位置，其生成方式也有两种，即 先与B运算，再与A-B运算 和 先与A-B运算，再与B运算；</p><p>我们可以打表找规律：对于非负整数 k ，第三个位置的值为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mfrac><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mi>A</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mi>k</mi><mi>B</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mi>C</mi><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mfrac><mi>k</mi><mn>2</mn></mfrac><mi>A</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mi>k</mi><mi>B</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mi>C</mi></mrow><annotation encoding="application/x-tex">(-1)^{k+1}\frac {k+1}2A+(-1)^kkB+(-1)^kC\\(-1)^{k}\frac {k}2A+(-1)^{k+1}kB+(-1)^kC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>将k按奇偶讨论，换元为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，如果能求出 n 的非负整数解，即题求情况存在；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span>;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, z;<br>&#125; ppp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t, a, b, c, x;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (c == x)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * b - a)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((x + c + b - a) % (a - <span class="hljs-number">2</span> * b) == <span class="hljs-number">0</span> &amp;&amp; (x + c + b - a) / (a - <span class="hljs-number">2</span> * b) &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((x + c - b) % (<span class="hljs-number">2</span> * b - a) == <span class="hljs-number">0</span> &amp;&amp; (x + c - b) / (<span class="hljs-number">2</span> * b - a) &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((x - c) % (<span class="hljs-number">2</span> * b - a) == <span class="hljs-number">0</span> &amp;&amp; (x - c) / (<span class="hljs-number">2</span> * b - a) &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((x - c) % (a - <span class="hljs-number">2</span> * b) == <span class="hljs-number">0</span> &amp;&amp; (x - c) / (a - <span class="hljs-number">2</span> * b) &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a - b - c == x || b - c == x)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="m-game-on-grid"><a class="markdownIt-Anchor" href="#m-game-on-grid"></a> M Game on grid</h2><p>DP</p><h4 id="题意-6"><a class="markdownIt-Anchor" href="#题意-6"></a> 题意</h4><p>给定n*m的网格，一些格点上标有字母A或B ，棋子初始在(0,0)点上，每次移动只能移动到 (i+1,j) 或 (i,j+1) 。若某时刻旗子在A上，则先手赢，若在B上则后手赢，若走到 (n-1,m-1) 点仍未划分胜负，则平局；<br />对于给定网格，请问先手是否有必赢、必平、必输机会；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>我们发现，对于 (i+j)%2=0 的点，接下来一定是先手进行操作，反之为后手先；</p><p>我们调整胜负判定，将先手必输的情况调整为以B判先手胜的先手赢，平局调整为以平局为判定的先手赢<br />考虑DP：</p><p>有状态表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 为走到 (i,j) 点时先手的输赢情况，若为1，则走到该点时，接下来一定会先手赢，若为-1，则一定会先手输，若为0则不定；</p><p>考虑状态转移方程</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>h</mi><mi>e</mi><mi>c</mi><mi>k</mi><mo stretchy="false">(</mo><mi>m</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">!</mo><mo>=</mo><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mi>j</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mn>2</mn><mo>=</mo><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mi>j</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mn>2</mn><mo>=</mo><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp[i][j]=\begin{cases}check(mp[i][j])\ mp[i][j]!=.\\\max(dp[i+1][j],dp[i][j+1])\ (i+j)\%2==0\\\min(dp[i+1][j],dp[i][j+1])\ (i+j)\%2==1\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">.</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">max</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mord">%</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mord">%</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>即先手倾向于走向先手赢，后手倾向于走向先手输；</p><p>至于将字符映射到1,0,-1的过程，则通过check函数实现；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">502</span>;<br><br><span class="hljs-type">int</span> dp[N][N], n, m;<br><span class="hljs-type">char</span> s[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s[i]);<br><br>    <span class="hljs-keyword">auto</span> dpf = [&amp;](<span class="hljs-keyword">auto</span> ck, <span class="hljs-type">int</span> <span class="hljs-keyword">final</span> = <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)<br>            &#123;<br>                dp[i][j] = <span class="hljs-built_in">ck</span>(i, j);<br>                <span class="hljs-keyword">if</span> (dp[i][j] != <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == m - <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                vector&lt;<span class="hljs-type">int</span>&gt; nxt;<br>                <span class="hljs-keyword">if</span> (i &lt; n - <span class="hljs-number">1</span>)<br>                    nxt.<span class="hljs-built_in">push_back</span>(dp[i + <span class="hljs-number">1</span>][j]);<br>                <span class="hljs-keyword">if</span> (j &lt; m - <span class="hljs-number">1</span>)<br>                    nxt.<span class="hljs-built_in">push_back</span>(dp[i][j + <span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">if</span> ((i + j) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                &#123;<br>                    dp[i][j] = *<span class="hljs-built_in">max_element</span>(nxt.<span class="hljs-built_in">begin</span>(), nxt.<span class="hljs-built_in">end</span>());<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    dp[i][j] = *<span class="hljs-built_in">min_element</span>(nxt.<span class="hljs-built_in">begin</span>(), nxt.<span class="hljs-built_in">end</span>());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-keyword">final</span>;<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dpf</span>(<br>            [](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) -&gt; <span class="hljs-type">int</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-string">&#x27;B&#x27;</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">return</span> s[i][j] == <span class="hljs-string">&#x27;A&#x27;</span>;<br>            &#125;))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes &quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no &quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dpf</span>([](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) -&gt; <span class="hljs-type">int</span> &#123; <span class="hljs-keyword">return</span> s[i][j] == <span class="hljs-string">&#x27;.&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>; &#125;, <span class="hljs-number">0</span>))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes &quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no &quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dpf</span>(<br>            [](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) -&gt; <span class="hljs-type">int</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-string">&#x27;A&#x27;</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">return</span> s[i][j] == <span class="hljs-string">&#x27;B&#x27;</span>;<br>            &#125;))<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;yes&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span> (T--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营5（BCDFGHK）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A55%EF%BC%88BCDFGHK%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A55%EF%BC%88BCDFGHK%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33190">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#b-watches">B Watches</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#c-bit-transmission">C Bit Transmission</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-2">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#d-birds-in-the-tree">D Birds in the tree</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-3">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#f-a-stack-of-cds">F A Stack of CDs</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-4">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#g-kfc-crazy-thursday">G KFC Crazy Thursday</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-5">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#h-cutting-papers">H Cutting Papers</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-6">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#k-headphones">K Headphones</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-7">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#ed">ed</a></li></ul></p><h2 id="b-watches"><a class="markdownIt-Anchor" href="#b-watches"></a> B Watches</h2><p>二分</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>手表店有 n 块手表出售，第 i 个手表售价 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。若购买 k 个手表，那么第 i 个手表需要花费 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mi>k</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">a_i+ki</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">i</span></span></span></span> 元。现有 m 元，求最多可购买多少块手表；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>我们考虑到每个手表的花费与购买总数有关，不方便直接贪心处理，我们便选择二分出 k 后，按照实际花费进行排序并贪心；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>) -&gt; <span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>   <span class="hljs-type">int</span> n, m;<br>   cin &gt;&gt; n &gt;&gt; m;<br><br>   <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; x : a) cin &gt;&gt; x;<br><br>   <span class="hljs-keyword">auto</span> solve = [&amp;](<span class="hljs-type">int</span> k) -&gt; <span class="hljs-type">bool</span> &#123;<br>      vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-built_in">b</span>(a);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>         b[i] += <span class="hljs-number">1ll</span> * (i + <span class="hljs-number">1</span>) * k;<br>      &#125;<br>      <span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>         sum += b[i];<br>      &#125;<br>      <span class="hljs-keyword">return</span> sum &lt;= m;<br>   &#125;;<br><br>   <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n;<br>   <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>      <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">solve</span>(mid)) &#123;<br>         ans = mid;<br>         l = mid + <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         r = mid - <span class="hljs-number">1</span>;<br>      &#125;<br>   &#125;<br>   cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-bit-transmission"><a class="markdownIt-Anchor" href="#c-bit-transmission"></a> C Bit Transmission</h2><h4 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h4><p>机器人有一长度为 n 的字符串，现在向机器人询问 3n 次某位是否为 1 ，但是在所有询问中，机器人会返回最多一个错误。对于机器人的回答，若存在唯一的字符串则输出，否则返回 -1 ；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>首先排除一些明显无唯一答案的情况，比如某一位没有被询问过；</p><p>由于是否有错未知，我们需要首先定位错误的发生，对于某被询问大于两次的位，若其结果出现一次不同，则可以断定错误发生在此处；</p><p>若无法定位错误，除所有位均被询问大于两次且答案相同外，其余情况均无唯一原串；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>    &#123;<br>        <span class="hljs-function">vector <span class="hljs-title">a</span><span class="hljs-params">(n, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * <span class="hljs-number">3</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            string s;<br>            cin &gt;&gt; x &gt;&gt; s;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>            &#123;<br>                a[x].second++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                a[x].first++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">bool</span> f = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i].first + a[i].second == <span class="hljs-number">0</span>)<span class="hljs-comment">//没有问到</span><br>            &#123;<br>                f = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (f)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (a[i].first + a[i].second &gt; <span class="hljs-number">2</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (a[i].first == <span class="hljs-number">1</span> || a[i].second == <span class="hljs-number">1</span>)<span class="hljs-comment">//错误发生</span><br>                    &#123;<br>                        cnt++;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[i].first != <span class="hljs-number">0</span> &amp;&amp; a[i].second != <span class="hljs-number">0</span>)<span class="hljs-comment">//同一位上至少两个错误</span><br>                    &#123;<br>                        f = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">2</span>)<span class="hljs-comment">//多个错误</span><br>                    &#123;<br>                        f = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>)<span class="hljs-comment">//若无法定位错误</span><br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (a[i].first == <span class="hljs-number">1</span> || a[i].second == <span class="hljs-number">1</span>)<span class="hljs-comment">//无法确定结果真实性</span><br>                    &#123;<br>                        f = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (a[i].first == <span class="hljs-number">1</span> &amp;&amp; a[i].second == <span class="hljs-number">1</span>)<span class="hljs-comment">//若出现11</span><br>                &#123;<br>                    f = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (a[i].first &gt; a[i].second)<br>                &#123;<br>                    cout &lt;&lt; <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    cout &lt;&lt; <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; <span class="hljs-number">-1</span>;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-birds-in-the-tree"><a class="markdownIt-Anchor" href="#d-birds-in-the-tree"></a> D Birds in the tree</h2><p>树状DP</p><h4 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h4><p>给出一个 n 个节点的树，每个节点有颜色 0 或 1 ，求其有多少连通子图，满足度数为 1 的节点颜色相同；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>构造状态表示：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 为以节点 i 为根的子树中，有多少连通子图，度数为 1 的节点（若 i 不是唯一一个则不考虑 i ）颜色为 j；<br />推导状态转移方程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><munder><mo>∏</mo><mrow><mi>k</mi><mo>∈</mo><mi>s</mi><mi>o</mi><msub><mi>n</mi><mi>i</mi></msub></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">[</mo><mi>c</mi><mi>o</mi><mi>l</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">!</mo><mo>=</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]=\prod_{k\in son_i}(1+dp[k][j])-[col[i]!=j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4522180000000002em;vertical-align:-1.402213em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.847887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">o</span><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.402213em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></span></p><p>前面的连乘式显然为乘法计数原理，对于每一个子节点k，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[k][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 种选择，还可以不选该子节点；<br />对于后面的减数，则表示若 i 节点颜色与目标相异，则需要去除仅选择 i 一个点的情况；</p><p>答案即为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo>∑</mo><mi>i</mi></munder><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>−</mo><mo stretchy="false">(</mo><munder><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><mi>s</mi><mi>o</mi><msub><mi>n</mi><mi>i</mi></msub></mrow></munder><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mo stretchy="false">!</mo><mi>c</mi><mi>o</mi><mi>l</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_idp[i][1]+dp[i][0]-(\sum_{k\in son_i}dp[k][!col[n]])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.4522180000000002em;vertical-align:-1.402213em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.847887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">o</span><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.402213em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mclose">!</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>后面的减法是减去以 i 为根节点，并且仅选择了一个子树的情况，此处不符合题意；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; rod[<span class="hljs-number">300005</span>];<br>ll col[<span class="hljs-number">300005</span>];<br>ll dp[<span class="hljs-number">300005</span>][<span class="hljs-number">2</span>];<br>ll ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll tmp1 = <span class="hljs-number">1</span>, tmp0 = <span class="hljs-number">1</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : rod[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (y == f)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(y, x);<br>        sum += (dp[y][col[x] ^ <span class="hljs-number">1</span>]);<br>        sum %= M;<br>        tmp1 *= (<span class="hljs-number">1</span> + dp[y][<span class="hljs-number">1</span>]) % M;<br>        tmp1 %= M;<br>        tmp0 *= (<span class="hljs-number">1</span> + dp[y][<span class="hljs-number">0</span>]) % M;<br>        tmp0 %= M;<br>    &#125;<br>    dp[x][<span class="hljs-number">1</span>] = tmp1 - (col[x] != <span class="hljs-number">1</span>) + M;<br>    dp[x][<span class="hljs-number">0</span>] = tmp0 - (col[x] != <span class="hljs-number">0</span>) + M;<br>    dp[x][<span class="hljs-number">1</span>] %= M;<br>    dp[x][<span class="hljs-number">0</span>] %= M;<br>    ans += dp[x][<span class="hljs-number">1</span>] + dp[x][<span class="hljs-number">0</span>] - sum + M;<br>    ans %= M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            rod[i].<span class="hljs-built_in">clear</span>();<br>        ans = <span class="hljs-number">0</span>;<br>        string g;<br>        cin &gt;&gt; g;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            col[i + <span class="hljs-number">1</span>] = g[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> u, v;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            rod[u].<span class="hljs-built_in">push_back</span>(v);<br>            rod[v].<span class="hljs-built_in">push_back</span>(u);<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-a-stack-of-cds"><a class="markdownIt-Anchor" href="#f-a-stack-of-cds"></a> F A Stack of CDs</h2><p>计算几何</p><h4 id="题意-4"><a class="markdownIt-Anchor" href="#题意-4"></a> 题意</h4><p><a href="https://www.luogu.com.cn/problem/P2510">洛谷原题</a>，更改输入顺序和输出位数即可</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>对于这个数据量，我们可以对每一个盘寻找其被覆盖的区间，并进行区间和并算出被覆盖总长；<br />注意盘被上层内含的情况；</p><p>累加每个盘的剩余总长即是答案；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-16</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sign</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// 符号函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(x) &lt; eps)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-type">double</span> x, y;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">double</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> b = <span class="hljs-number">0</span>) &#123; x = a, y = b; &#125;<br>    Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x + a.x, y + a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x - a.x, y - a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x * a, y * a); &#125;<br>    Point <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x / a, y / a); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> !<span class="hljs-built_in">sign</span>(x - a.x) &amp;&amp; !<span class="hljs-built_in">sign</span>(y - a.y); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> (<span class="hljs-built_in">fabs</span>(x - a.x) &lt; eps) ? (y &lt; a.y) : (x &lt; a.x); &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Line</span><br>&#123;<br>    Point a, v;<br>    <span class="hljs-built_in">Line</span>(Point x = <span class="hljs-built_in">Point</span>(), Point y = <span class="hljs-built_in">Point</span>()) &#123; a = x, v = y; &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Circle</span><br>&#123;<br>    Point o;<br>    <span class="hljs-type">double</span> r;<br>    <span class="hljs-built_in">Circle</span>(Point x = <span class="hljs-built_in">Point</span>(), <span class="hljs-type">double</span> y = <span class="hljs-number">0</span>) &#123; o = x, r = y; &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">dot</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.x + a.y * b.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cross</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.y - b.x * a.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get_length</span><span class="hljs-params">(Point a)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">dot</span>(a, a)); &#125;<br><span class="hljs-function">Point <span class="hljs-title">get_line_intersection</span><span class="hljs-params">(Line m, Line n)</span></span><br><span class="hljs-function"></span>&#123;<br>    Point u = m.a - n.a;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(m.v, n.v)) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">double</span> t = <span class="hljs-built_in">cross</span>(n.v, u) / <span class="hljs-built_in">cross</span>(m.v, n.v);<br>    <span class="hljs-keyword">return</span> m.a + m.v * t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">distance_to_line</span><span class="hljs-params">(Point p, Line m)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">cross</span>(p - m.a, m.v) / <span class="hljs-built_in">get_length</span>(m.v)); &#125;<br><span class="hljs-function">pair&lt;Point, Point&gt; <span class="hljs-title">line_circle_intersection</span><span class="hljs-params">(Line l, Circle c)</span></span><br><span class="hljs-function"></span>&#123;<br>    Point h = <span class="hljs-built_in">get_line_intersection</span>(l, <span class="hljs-built_in">Line</span>(c.o, <span class="hljs-built_in">Point</span>(-l.v.y, l.v.x)));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">distance_to_line</span>(h, l) - c.r) &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-built_in">Point</span>(), <span class="hljs-built_in">Point</span>()&#125;;<br>    Point e = l.v / <span class="hljs-built_in">get_length</span>(l.v);<br>    <span class="hljs-type">double</span> k =<br>        <span class="hljs-built_in">sqrt</span>(c.r * c.r - <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">cross</span>(c.o - l.a, l.v)) * <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">cross</span>(c.o - l.a, l.v)) / <span class="hljs-built_in">dot</span>(l.v, l.v));<br>    <span class="hljs-keyword">return</span> &#123;h - e * k, h + e * k&#125;;<br>&#125;<br>Circle ccl[<span class="hljs-number">1003</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">circle_relation</span><span class="hljs-params">(Circle p, Circle q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> d = <span class="hljs-built_in">get_length</span>(p.o - q.o), l = <span class="hljs-built_in">fabs</span>(p.r - q.r);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(d - p.r - q.r) &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(d - p.r - q.r) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(d - l) &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(d - l) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function">pair&lt;Point, Point&gt; <span class="hljs-title">circle_circle_intersection</span><span class="hljs-params">(Circle a, Circle b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> d = <span class="hljs-built_in">get_length</span>(a.o - b.o);<br>    <span class="hljs-type">double</span> d1 = a.r * (a.r * a.r + d * d - b.r * b.r) / (<span class="hljs-number">2</span> * a.r * d);<br>    <span class="hljs-type">double</span> h1 = <span class="hljs-built_in">sqrt</span>(a.r * a.r - d1 * d1);<br>    Point ed = b.o - a.o;<br>    Point h = a.o + ed / <span class="hljs-built_in">get_length</span>(ed) * d1;<br>    <span class="hljs-keyword">return</span> &#123;h + <span class="hljs-built_in">Point</span>(ed.y, -ed.x) / <span class="hljs-built_in">get_length</span>(ed) * h1,<br>            h - <span class="hljs-built_in">Point</span>(ed.y, -ed.x) / <span class="hljs-built_in">get_length</span>(ed) * h1&#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get_angle</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">acos</span>(<span class="hljs-built_in">dot</span>(a, b) / <span class="hljs-built_in">get_length</span>(a) / <span class="hljs-built_in">get_length</span>(b)); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%Lf%Lf%Lf&quot;</span>, &amp;ccl[i].o.x, &amp;ccl[i].o.y, &amp;ccl[i].r);<br>    &#125;<br>    vector&lt;pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt;&gt; lim;<br>    <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        lim.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-type">double</span> ers = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">bool</span> zero = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">circle_relation</span>(ccl[i], ccl[j]);<br>            <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span> &amp;&amp; ccl[i].r &lt; ccl[j].r)<br>            &#123;<br>                zero = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">3</span>)<br>            &#123;<br>                <span class="hljs-keyword">auto</span> pii = <span class="hljs-built_in">circle_circle_intersection</span>(ccl[i], ccl[j]);<br>                Point to = ccl[j].o - ccl[i].o;<br>                pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; deg = &#123;<br>                    <span class="hljs-built_in">atan2</span>((pii.first - ccl[i].o).y, (pii.first - ccl[i].o).x),<br>                    <span class="hljs-built_in">atan2</span>((pii.second - ccl[i].o).y, (pii.second - ccl[i].o).x)&#125;;<br>                <span class="hljs-keyword">if</span> (deg.first &gt; deg.second)<br>                &#123;<br>                    <span class="hljs-built_in">swap</span>(deg.first, deg.second);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">fabs</span>(deg.first - <span class="hljs-built_in">atan2</span>(to.y, to.x)) - PI) &gt;= <span class="hljs-number">0</span> ||<br>                    <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">fabs</span>(deg.second - <span class="hljs-built_in">atan2</span>(to.y, to.x)) - PI) &gt;= <span class="hljs-number">0</span>)<br>                &#123;<br>                    lim.<span class="hljs-built_in">push_back</span>(&#123;deg.second, PI&#125;);<br>                    lim.<span class="hljs-built_in">push_back</span>(&#123;-PI, deg.first&#125;);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    lim.<span class="hljs-built_in">push_back</span>(deg);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (zero)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (lim.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            ers = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">sort</span>(lim.<span class="hljs-built_in">begin</span>(), lim.<span class="hljs-built_in">end</span>());<br>            <span class="hljs-type">double</span> st = lim[<span class="hljs-number">0</span>].first, ed = lim[<span class="hljs-number">0</span>].second;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; lim.<span class="hljs-built_in">size</span>(); i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(lim[i].first - ed) &lt;= <span class="hljs-number">0</span>)<br>                &#123;<br>                    ed = <span class="hljs-built_in">max</span>(lim[i].second, ed);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    ers += ed - st;<br>                    st = lim[i].first, ed = lim[i].second;<br>                &#125;<br>            &#125;<br>            ers += ed - st;<br>        &#125;<br>        ans += (<span class="hljs-number">2</span> * PI - ers) * ccl[i].r;<br><span class="hljs-comment">//         printf(&quot;*%Lf %Lf %d\n&quot;, ers, ans, lim.size());</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10Lf&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-kfc-crazy-thursday"><a class="markdownIt-Anchor" href="#g-kfc-crazy-thursday"></a> G KFC Crazy Thursday</h2><p>Manacher（马拉车算法）</p><h4 id="题意-5"><a class="markdownIt-Anchor" href="#题意-5"></a> 题意</h4><p>给定长度为 n 的小写字母串，分别求有多少以 k , f, c 结尾的回文子串；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>由于马拉车求的是以每个字符为中心的最长回文串，我们只需要枚举以某点为中心，所有小于等于该点最长回文串半径的回文串，判断是否符合条件并计数即可；</p><p>最初还担心T，实际上可以过~</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">char</span> s[maxn * <span class="hljs-number">2</span>], str[maxn * <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> d[maxn * <span class="hljs-number">2</span>], len;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getstr</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//重定义字符串</span><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    str[k++] = <span class="hljs-string">&#x27;@&#x27;</span>; <span class="hljs-comment">//开头加个特殊字符防止越界</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        str[k++] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>        str[k++] = s[i];<br>    &#125;<br>    str[k++] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>    len = k;<br>    str[k] = <span class="hljs-number">0</span>; <span class="hljs-comment">//字符串尾设置为0，防止越界</span><br>&#125;<br><span class="hljs-type">int</span> k, f, c;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">manacher</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>, id; <span class="hljs-comment">// mx为最右边，id为中心点</span><br>    <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; mx)<br>            d[i] = <span class="hljs-built_in">min</span>(mx - i + <span class="hljs-number">1</span>, d[<span class="hljs-number">2</span> * id - i]); <br>        <span class="hljs-keyword">else</span><br>            d[i] = <span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">while</span> (str[i + d[i]] == str[i - d[i]])<br>            d[i]++; <br>        <span class="hljs-keyword">if</span> (d[i] + i - <span class="hljs-number">1</span> &gt; mx)<br>        &#123; <br>            mx = d[i] + i - <span class="hljs-number">1</span>;<br>            id = i;                 <br>            maxx = <span class="hljs-built_in">max</span>(maxx, d[i]); <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (maxx - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; len)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;s);<br>        <span class="hljs-built_in">getstr</span>();<br>        <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> d);<br>        <span class="hljs-built_in">manacher</span>();<br>        k = f = c = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= d[i]; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (str[i - j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;k&#x27;</span>)<br>                    k++;<br>                <span class="hljs-keyword">if</span> (str[i - j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;f&#x27;</span>)<br>                    f++;<br>                <span class="hljs-keyword">if</span> (str[i - j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;c&#x27;</span>)<br>                    c++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, k, f, c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-cutting-papers"><a class="markdownIt-Anchor" href="#h-cutting-papers"></a> H Cutting Papers</h2><p>计算几何</p><h4 id="题意-6"><a class="markdownIt-Anchor" href="#题意-6"></a> 题意</h4><p>给定图形 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mo>⩽</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">|x|+|y|+|x+y|\leqslant n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>⩽</mo><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">x^2+y^2\leqslant n^2/4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">4</span></span></span></span> 求两者交面积；</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>经过matplotlib绘制，发现前者形状如下：<br /><img src="https://s2.loli.net/2022/08/25/KIARMfHg1l9YuwC.png" alt="image.png" /><br /><img src="https://s2.loli.net/2022/08/25/y3ueVwmz7vU2sop.png" alt="image.png" /><br />便可以直接表示出面积~</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">double</span> n;<br>   cin &gt;&gt; n;<br>    <span class="hljs-type">double</span> r = n / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.8f\n&quot;</span> , r * r * PI / <span class="hljs-number">2</span> + <span class="hljs-number">2</span> * r * r);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="k-headphones"><a class="markdownIt-Anchor" href="#k-headphones"></a> K Headphones</h2><h4 id="题意-7"><a class="markdownIt-Anchor" href="#题意-7"></a> 题意</h4><p>现有 n-k 对耳机，每次随机拿一个（不是一对），求最少拿多少次能使手中耳机对数大于k；</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>如果存在解，先考虑最坏情况：<br />若先拿出的 n-k 个耳机都是不成对的，那么还需要再拿 k+1 个才能满足题意；<br />即至少需要拿 n+1 个；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,k;<br>   <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;k)<br>   &#123;<br>    <span class="hljs-keyword">if</span>(n-k&gt;=k+<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ed</h2><p>这场的难度梯度有点怪</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营4（ADHKLMN）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54%EF%BC%88ADHKLMN%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A54%EF%BC%88ADHKLMN%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33189">题集链接</a>；</p><p><a href="https://www.bilibili.com/video/BV1va411T7K6?p=4">视频题解</a>；<br /><ul class="markdownIt-TOC"><li><a href="#a-task-computing">A Task Computing</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#d-jobs-easy-version">D Jobs (Easy Version)</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-2">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#h-wall-builder-ii">H Wall Builder II</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-3">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#k-nios-sword">K NIO’s Sword</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-4">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#l-black-hole">L Black Hole</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-5">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#m-monotone-chain">M Monotone Chain</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-6">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#n-particle-arts">N Particle Arts</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-7">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#ed">ed</a></li></ul></p><h2 id="a-task-computing"><a class="markdownIt-Anchor" href="#a-task-computing"></a> A Task Computing</h2><p>数学，dp</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>从 n 个任务中选 m 个并任意排序，每个任务有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo separator="true">,</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">w,p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span></span></span></span> 两个属性，求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msub><mi>w</mi><msub><mi>a</mi><mi>i</mi></msub></msub><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{m}w_{a_i}\prod_{j=0}^{i-1}p_{a_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span></span></span></span> 的最大值；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>首先考虑排序的过程：<br />对于两元素 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">a_x,a_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ，其对答案的贡献为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mn>1</mn></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>w</mi><msub><mi>a</mi><mi>i</mi></msub></msub><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub><mo>+</mo><msub><mi>w</mi><msub><mi>a</mi><mi>x</mi></msub></msub><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub><mo>+</mo><msub><mi>w</mi><msub><mi>a</mi><mi>y</mi></msub></msub><msub><mi>p</mi><msub><mi>a</mi><mi>x</mi></msub></msub><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>y</mi><mo>+</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msub><mi>w</mi><msub><mi>a</mi><mi>i</mi></msub></msub><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub></mrow><annotation encoding="application/x-tex">R_1=\sum_{i=1}^{x-1}w_{a_i}\prod_{j=0}^{i-1}p_{a_j}+w_{a_x}\prod_{j=0}^{x-1}p_{a_j}+w_{a_y}p_{a_x}\prod_{j=0}^{x-1}p_{a_j}+\sum_{i=y+1}^{m}w_{a_i}\prod_{j=0}^{i-1}p_{a_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.389826em;vertical-align:-0.43581800000000004em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.389826em;vertical-align:-0.43581800000000004em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span></span></span></span> ；<br />对于两元素 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">a_y,a_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，其对答案的贡献为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>R</mi><mn>2</mn></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>y</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>w</mi><msub><mi>a</mi><mi>i</mi></msub></msub><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub><mo>+</mo><msub><mi>w</mi><msub><mi>a</mi><mi>y</mi></msub></msub><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>y</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub><mo>+</mo><msub><mi>w</mi><msub><mi>a</mi><mi>x</mi></msub></msub><msub><mi>p</mi><msub><mi>a</mi><mi>y</mi></msub></msub><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>y</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><mi>m</mi></msubsup><msub><mi>w</mi><msub><mi>a</mi><mi>i</mi></msub></msub><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub></mrow><annotation encoding="application/x-tex">R_2=\sum_{i=1}^{y-1}w_{a_i}\prod_{j=0}^{i-1}p_{a_j}+w_{a_y}\prod_{j=0}^{y-1}p_{a_j}+w_{a_x}p_{a_y}\prod_{j=0}^{y-1}p_{a_j}+\sum_{i=x+1}^{m}w_{a_i}\prod_{j=0}^{i-1}p_{a_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.389826em;vertical-align:-0.43581800000000004em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.389826em;vertical-align:-0.43581800000000004em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">x</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35804100000000005em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span></span></span></span> ；</p><p>两式做差得（除 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>a</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">a_x,a_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 外，上式x=下式y，上式y=下式x）：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>w</mi><msub><mi>a</mi><mi>x</mi></msub></msub><mo>+</mo><msub><mi>w</mi><msub><mi>a</mi><mi>y</mi></msub></msub><msub><mi>P</mi><msub><mi>a</mi><mi>x</mi></msub></msub><mo>−</mo><msub><mi>w</mi><msub><mi>a</mi><mi>y</mi></msub></msub><mo>−</mo><msub><mi>w</mi><msub><mi>a</mi><mi>x</mi></msub></msub><msub><mi>P</mi><msub><mi>a</mi><mi>y</mi></msub></msub><mo stretchy="false">)</mo><munderover><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>p</mi><msub><mi>a</mi><mi>j</mi></msub></msub></mrow><annotation encoding="application/x-tex">(w_{a_x}+w_{a_y}P_{a_x}-w_{a_y}-w_{a_x}P_{a_y})\prod_{j=0}^{x-1}p_{a_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0001em;vertical-align:-0.2501em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.03065em;vertical-align:-0.34731999999999996em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.93065em;vertical-align:-0.34731999999999996em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.2148900000000005em;vertical-align:-1.4137769999999998em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285716em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000006em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2818857142857143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34731999999999996em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>其中连乘式与顺序无关；<br />若使 在排序时 x 在 y 前，则依据上式大于等于0构造排序函数即可；</p><p>在排序后，逆序DP处理出结果最大的连续 m 个数；<br />逆序处理是因为逆序处理更容易维护公式的结果；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>pair&lt;<span class="hljs-type">double</span>,<span class="hljs-type">double</span>&gt;pii[<span class="hljs-number">100005</span>];<br><span class="hljs-type">double</span> dp[<span class="hljs-number">100005</span>][<span class="hljs-number">21</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(pair&lt;<span class="hljs-type">double</span>,<span class="hljs-type">double</span>&gt; a,pair&lt;<span class="hljs-type">double</span>,<span class="hljs-type">double</span>&gt; b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.first+a.second*b.first&gt;=b.first+b.second*a.first;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;pii[i].first);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;pii[i].second);<br>        pii[i].second/=<span class="hljs-number">10000</span>;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(pii,pii+n,cmp);<br><span class="hljs-comment">//     for(int i=0;i&lt;n;i++)</span><br><span class="hljs-comment">//         printf(&quot;%lf %lf\n&quot;,pii[i].first,pii[i].second);</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++) &#123;<br>            dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i + <span class="hljs-number">1</span>][j]);<br>            <span class="hljs-keyword">if</span> (j) &#123;<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i][j], dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] * pii[i].second + pii[i].first);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf&quot;</span>,dp[<span class="hljs-number">1</span>][m]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-jobs-easy-version"><a class="markdownIt-Anchor" href="#d-jobs-easy-version"></a> D Jobs (Easy Version)</h2><p>数据结构</p><h4 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h4><p>有n家公司，每家公司有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>m</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">m_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个岗位，每个岗位对三个能力分别有数值要求，必须三个能力都达标才能获得这个岗位，如果某人获得某公司的任意一个岗位则称该人获得了该公司的工作；<br />有 q 次询问，由题给代码得出该人的三个能力值，求这个人可以获得多少个公司的工作；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>使用三维数组记录；<br />对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">need[i][j][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span> 存储对于第 i 家公司，前两个能力值分别为 j,k 时，第三个能力值所要求的最小值；</p><p>对于第 i 个公司接收到的新岗位 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>j</mi><mo separator="true">,</mo><mi>k</mi><mo separator="true">,</mo><mi>l</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(j,k,l)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">)</span></span></span></span> ，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>n</mi><mi>e</mi><mi>e</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>l</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">need[i][j][k]=\min(need[i][j][k],l)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">)</span></span></span></span> ；<br />在一个公司接收结束后，维护数组（详见代码）；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">unsigned</span> seed;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">qm</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b = M - <span class="hljs-number">2</span>)</span> </span>&#123;<br>   <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>) ans = a * ans % M;<br>      a = a * a % M;<br>   &#125;<br>   <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> need[<span class="hljs-number">10</span>][<span class="hljs-number">401</span>][<span class="hljs-number">401</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br><br>   <span class="hljs-type">int</span> n, q;<br>   cin &gt;&gt; n &gt;&gt; q;<br><br>   <span class="hljs-built_in">memset</span>(need, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(need));<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>      <span class="hljs-type">int</span> k;<br>      cin &gt;&gt; k;<br>      <span class="hljs-keyword">while</span> (k--) &#123;<br>         <span class="hljs-type">int</span> a, b, c;<br>         cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;<br>         need[i][a][b] = <span class="hljs-built_in">min</span>(need[i][a][b], c);<br>      &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = <span class="hljs-number">1</span>  ; a &lt;= <span class="hljs-number">400</span> ; a ++ ) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = <span class="hljs-number">1</span> ; b &lt;= <span class="hljs-number">400</span> ; b ++ ) &#123;<br>need[i][a][b] = <span class="hljs-built_in">min</span>(&#123;need[i][a][b], need[i][a][b - <span class="hljs-number">1</span>], need[i][a - <span class="hljs-number">1</span>][b]&#125;);<br>&#125;<br>&#125;<br>   &#125;<br><br>   cin &gt;&gt; seed;<br><br>   <span class="hljs-keyword">auto</span> solve = [&amp;](<span class="hljs-type">int</span> IQ, <span class="hljs-type">int</span> EQ, <span class="hljs-type">int</span> AQ) -&gt; <span class="hljs-type">int</span> &#123;<br>      <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>         ans += need[i][IQ][EQ] &lt;= AQ ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;;<br><br>   <span class="hljs-function">std::mt19937 <span class="hljs-title">rng</span><span class="hljs-params">(seed)</span></span>;<br>   std::uniform_int_distribution&lt;&gt; <span class="hljs-built_in">u</span>(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>);<br>   <span class="hljs-type">int</span> lastans = <span class="hljs-number">0</span>;<br>   <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i++) &#123;<br>      <span class="hljs-type">int</span> IQ =<br>          (<span class="hljs-built_in">u</span>(rng) ^ lastans) % <span class="hljs-number">400</span> + <span class="hljs-number">1</span>;  <span class="hljs-comment">// The IQ of the i-th friend</span><br>      <span class="hljs-type">int</span> EQ =<br>          (<span class="hljs-built_in">u</span>(rng) ^ lastans) % <span class="hljs-number">400</span> + <span class="hljs-number">1</span>;  <span class="hljs-comment">// The EQ of the i-th friend</span><br>      <span class="hljs-type">int</span> AQ =<br>          (<span class="hljs-built_in">u</span>(rng) ^ lastans) % <span class="hljs-number">400</span> + <span class="hljs-number">1</span>;  <span class="hljs-comment">// The AQ of the i-th friend</span><br>      lastans = <span class="hljs-built_in">solve</span>(IQ, EQ, AQ);  <span class="hljs-comment">// The answer to the i-th friend</span><br>      ans += lastans * <span class="hljs-built_in">qm</span>(seed, q - i);<br>      ans %= M;<br>   &#125;<br><br>   cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-wall-builder-ii"><a class="markdownIt-Anchor" href="#h-wall-builder-ii"></a> H Wall Builder II</h2><p>贪心</p><h4 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h4><p>给定 n 个 1*1 的矩形，n-1 个 1*2 的矩形，n-2 个 1*3 的矩形，…，1 个 1*n 的矩形，将这些矩形拼成一个大矩形，求大矩形的最小周长和拼接方案；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>首先考虑大矩形形状越接近正方形周长越小，我们从正方形开始寻找整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo separator="true">,</mo><mi>h</mi></mrow><annotation encoding="application/x-tex">w,h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span></span></span></span> 使得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mi>h</mi><mo>=</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">wh=S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> ；</p><p>对于找到的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo separator="true">,</mo><mi>h</mi></mrow><annotation encoding="application/x-tex">w,h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span></span></span></span> 使用贪心的策略依次填满每一层即可；<br />即对于每一层，优先放能放进的最长的，再次放能放进剩余部分的最长的，循环至填满该层；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#include &lt;bits/stdc++.h&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-built_in">int</span> t;<br><span class="hljs-built_in">int</span> n;<br><span class="hljs-keyword">struct</span> node<br>&#123;<br>    <span class="hljs-built_in">int</span> xl, yl, xr, yr;<br>    <span class="hljs-built_in">int</span> id;<br>&#125; block[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">cmp</span>(<span class="hljs-params">node a, node b</span>)</span> &#123; <span class="hljs-keyword">return</span> a.id &lt; b.id; &#125;<br><span class="hljs-function">signed <span class="hljs-title">main</span>()</span><br>&#123;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; n;<br>        multiset&lt;<span class="hljs-built_in">int</span>&gt; mts;<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> sqr = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            sqr += <span class="hljs-number">1l</span>l * i * (n - i + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">1</span>; j &lt;= (n - i + <span class="hljs-number">1</span>); j++)<br>            &#123;<br>                mts.insert(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> cmx = <span class="hljs-number">100005</span>;<br>        <span class="hljs-built_in">int</span> h = <span class="hljs-number">0</span>, w = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=sqrt(sqr)+<span class="hljs-number">1e-5</span>;i;i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (sqr % i == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> ((i + (sqr / i)) * <span class="hljs-number">2</span> &lt;= cmx)<br>                &#123;<br>                    h = i;<br>                    w = sqr / i;<br>                    cmx = i * <span class="hljs-number">2</span> + sqr * <span class="hljs-number">2</span> / i;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        printf(<span class="hljs-string">&quot;%lld\n&quot;</span>, cmx);<br>        <span class="hljs-built_in">int</span> cblk = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; h; i++)<br>        &#123;<br>            <span class="hljs-built_in">long</span> <span class="hljs-built_in">long</span> width = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (width != w)<br>            &#123;<br>                auto sp = mts.lower_bound(w - width);<br>                <span class="hljs-keyword">if</span> (sp == mts.end())<br>                    sp--;<br>                cblk++;<br>                block[cblk].xl = width;<br>                block[cblk].yl = i;<br>                block[cblk].xr = width + *sp;<br>                block[cblk].yr = i + <span class="hljs-number">1</span>;<br>                block[cblk].id = *sp;<br>                width += *sp;<br>                mts.erase(sp);<br>            &#125;<br>        &#125;<br>        sort(block + <span class="hljs-number">1</span>, block + cblk + <span class="hljs-number">1</span>, cmp);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">1</span>; i &lt;= cblk; i++)<br>        &#123;<br>            printf(<span class="hljs-string">&quot;%lld %lld %lld %lld\n&quot;</span>, block[i].xl, block[i].yl, block[i].xr, block[i].yr);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="k-nios-sword"><a class="markdownIt-Anchor" href="#k-nios-sword"></a> K NIO’s Sword</h2><p>数学</p><h4 id="题意-4"><a class="markdownIt-Anchor" href="#题意-4"></a> 题意</h4><p>初始有一把攻击力为0的剑，需要击杀n个（1~n）敌人，仅当攻击力与 i 在模 n 意义下同余时才能击杀第 i 个敌人，玩家可以升级剑，问最少需要几次升级；<br />“升级”：对于当前攻击力 x ，升级一次后的攻击力为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn><mi>x</mi><mo>+</mo><mi>b</mi><mtext> </mtext><mo stretchy="false">(</mo><mi>b</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mn>9</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">10x+b\ (b=0,1,2,\dots,9)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">9</span><span class="mclose">)</span></span></span></span> ；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>考虑第 i 关的初始值一定与 i-1 在 n 意义下同余，那么每一关的选择不存在后效性，便可以逐关寻找本关最优解；</p><p>对于第 i 关的通关值x，一定满足：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mi>k</mi><mi>n</mi><mo>+</mo><mi>i</mi><mspace linebreak="newline"></mspace><mi>x</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><msup><mn>0</mn><mi>p</mi></msup><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mn>1</mn><msup><mn>0</mn><mi>p</mi></msup><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=kn+i\\x\in[10^p(i-1),10^pi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714392em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714392em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span></span></span></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span></span></p><p>此时的p即为升级次数，若使当前的p最小，则需要找到最小的满足条件的k；<br />枚举 p ，对于每个 p 计算出满足第一给条件的最小 k ，再代回判断是否满足第二个条件即可；</p><p>对于 p,i ，k有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>⩾</mo><mfrac><mrow><mn>1</mn><msup><mn>0</mn><mi>p</mi></msup><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>i</mi></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">k\geqslant\frac{10^p(i-1)-i}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83111em;vertical-align:-0.13667em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">n</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>注意对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的特判，此时答案为 0 ，赛时判瞎了；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> ll inf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br>ll ten[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">100000</span>,<span class="hljs-number">1000000</span>,<span class="hljs-number">10000000</span>,<span class="hljs-number">100000000</span>,<span class="hljs-number">1000000000</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">6</span>;k++)<br>        &#123;<br>            ll r=ten[k]*(i<span class="hljs-number">-1</span>);<br>            ll kk=(r-i)/n+((r-i)%n!=<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span>(kk*n+i&lt;ten[k]*i)<br>            &#123;<br>                ans+=k;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l-black-hole"><a class="markdownIt-Anchor" href="#l-black-hole"></a> L Black Hole</h2><p><s>计算</s>几何、模拟</p><h4 id="题意-5"><a class="markdownIt-Anchor" href="#题意-5"></a> 题意</h4><p>求边长为a的凸正n面体收缩k次后的面数和边长；<br />收缩：将原凸体的临面连心线作为棱形成新的凸体；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>正n面体只有五种（4，6，8，12，20），并且在收缩过程中有转换关系（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn><mo>→</mo><mn>4</mn><mo separator="true">,</mo><mn>6</mn><mo>→</mo><mn>8</mn><mo separator="true">,</mo><mn>8</mn><mo>→</mo><mn>6</mn><mo separator="true">,</mo><mn>12</mn><mo>→</mo><mn>20</mn><mo separator="true">,</mo><mn>20</mn><mo>→</mo><mn>12</mn></mrow><annotation encoding="application/x-tex">4\to4,6\to8,8\to6,12\to20,20\to12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span></span></span></span>）；</p><p>找到（看题解）这五种正n面体边长与连心线长的关系即可模拟；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> ll inf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n, k;<br>        <span class="hljs-type">double</span> a;<br>        cin&gt;&gt;n&gt;&gt;a&gt;&gt;k;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">4</span>||n==<span class="hljs-number">6</span>||n==<span class="hljs-number">8</span>||n==<span class="hljs-number">12</span>||n==<span class="hljs-number">20</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;possible &quot;</span>);<br>            <span class="hljs-keyword">while</span>(k--)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(n==<span class="hljs-number">4</span>)<br>                &#123;<br>                    a=a/<span class="hljs-number">3</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">6</span>)<br>                &#123;<br>                    n=<span class="hljs-number">8</span>,a=a/<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">8</span>)<br>                &#123;<br>                    n=<span class="hljs-number">6</span>,a=a*<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>)/<span class="hljs-number">3</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">12</span>)<br>                &#123;<br>                    n=<span class="hljs-number">20</span>,a=a*(<span class="hljs-number">3</span>*<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">5</span>)+<span class="hljs-number">5</span>)/<span class="hljs-number">10</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n==<span class="hljs-number">20</span>)<br>                &#123;<br>                    n=<span class="hljs-number">12</span>,a=a*(<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">5</span>)+<span class="hljs-number">1</span>)/<span class="hljs-number">6</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %.8lf\n&quot;</span>,n,a);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;impossible\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="m-monotone-chain"><a class="markdownIt-Anchor" href="#m-monotone-chain"></a> M Monotone Chain</h2><p>计算几何</p><h4 id="题意-6"><a class="markdownIt-Anchor" href="#题意-6"></a> 题意</h4><p>给定一条折线，求一条有向直线使得折线上各点在其上的投影点是非减的（不与有向直线反向）；</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>我们考虑若干非零向量：<br />对于每条向量，有向直线的方向向量必须存在于该向量顺逆时针90°的范围内，即最终方向向量的可行范围是每条向量的可行范围的交集；<br />由此我们可以维护可行的向量两界，如果最终向量两界合法，则输出任意一界即可；<br /><img src="https://s2.loli.net/2022/08/25/e5RTdsDYgCaWhj2.png" alt="image.png" /></p><p>特判：<br />若当前可行范围是平角，并且新向量与可行范围对应的向量方向相反，此时可行范围便仅剩方向相反的两条有向直线；<br />这种情况不太方便使用可行范围两界维护，需要特殊处理，在代码中对应的是<code>bool only;pair&lt;Point, Point&gt; oq;</code>两变量所维护；</p><p>最开始补题时打算用与x<sup>+</sup>夹角维护，最后在找整数点输出时遇到了问题；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> ll inf = <span class="hljs-number">0x3f3f3f3f3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sign</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// 符号函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(x) &lt; eps)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-type">double</span> x, y;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">double</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> b = <span class="hljs-number">0</span>) &#123; x = a, y = b; &#125;<br>    Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x + a.x, y + a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x - a.x, y - a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x * a, y * a); &#125;<br>    Point <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x / a, y / a); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> !<span class="hljs-built_in">sign</span>(x - a.x) &amp;&amp; !<span class="hljs-built_in">sign</span>(y - a.y); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> (<span class="hljs-built_in">fabs</span>(x - a.x) &lt; eps) ? (y &lt; a.y) : (x &lt; a.x); &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">dot</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.x + a.y * b.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cross</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.y - b.x * a.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get_length</span><span class="hljs-params">(Point a)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">dot</span>(a, a)); &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get_angle</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">acos</span>(<span class="hljs-built_in">dot</span>(a, b) / <span class="hljs-built_in">get_length</span>(a) / <span class="hljs-built_in">get_length</span>(b)); &#125;<br>Point p[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">bool</span> only = <span class="hljs-number">0</span>, cg = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> init = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    pair&lt;Point, Point&gt; que = &#123;<span class="hljs-built_in">Point</span>(), <span class="hljs-built_in">Point</span>()&#125;;<br>    pair&lt;Point, Point&gt; oq = &#123;<span class="hljs-built_in">Point</span>(), <span class="hljs-built_in">Point</span>()&#125;;<br>    Point bas = <span class="hljs-built_in">Point</span>(PI, PI);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf&quot;</span>, &amp;p[i].x, &amp;p[i].y);<br>        <span class="hljs-keyword">if</span> (p[i] == p[i - <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">2</span> &amp;&amp; !init)<br>            bas = p[<span class="hljs-number">2</span>] - p[<span class="hljs-number">1</span>], init = i, que = &#123;<span class="hljs-built_in">Point</span>(bas.y, -bas.x), <span class="hljs-built_in">Point</span>(-bas.y, bas.x)&#125;;<br>        Point tmp = p[i] - p[i - <span class="hljs-number">1</span>];<br>        Point nowf = <span class="hljs-built_in">Point</span>(tmp.y, -tmp.x), nows = <span class="hljs-built_in">Point</span>(-tmp.y, tmp.x);<br>        <span class="hljs-keyword">if</span> (init &amp;&amp; init != i &amp;&amp; !only)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!cg &amp;&amp; !<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">get_angle</span>(tmp, bas)) - PI) )<br>            &#123;<br>                only = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (que.first == <span class="hljs-built_in">Point</span>(bas.y, -bas.x))<br>                    oq.first = que.first;<br>                <span class="hljs-keyword">if</span> (que.second == <span class="hljs-built_in">Point</span>(-bas.y, bas.x))<br>                    oq.second = que.second;<br>                cg = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">cross</span>(que.second, nows) &lt; <span class="hljs-number">0</span>)<br>                    que.second = nows;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">cross</span>(que.first, nowf) &gt; <span class="hljs-number">0</span>)<br>                    que.first = nowf;<br>                cg = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (only)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">get_length</span>(oq.first)) &amp;&amp; <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">dot</span>(tmp, oq.first)) &lt; <span class="hljs-number">0</span>)<br>                oq.first = <span class="hljs-built_in">Point</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">get_length</span>(oq.second)) &amp;&amp; <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">dot</span>(tmp, oq.second)) &lt; <span class="hljs-number">0</span>)<br>                oq.second = <span class="hljs-built_in">Point</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// printf(&quot;*%d\n&quot;,only);</span><br>    <span class="hljs-comment">// if(only)&#123;</span><br>    <span class="hljs-comment">//     printf(&quot;*%lf %lf %lf %lf\n&quot;,oq.first.x,oq.first.y,oq.second.x,oq.second.y);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// else</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     printf(&quot;*%lf %lf %lf %lf\n&quot;,que.first.x,que.first.y,que.second.x,que.second.y);</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">if</span> (!init &amp;&amp; !<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">get_length</span>(bas - <span class="hljs-built_in">Point</span>(PI, PI))) || !<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">get_length</span>(bas)))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n0 0 1 0&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((!only &amp;&amp; <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(que.second, que.first)) &lt;= <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">dot</span>(que.second, que.first) &gt; <span class="hljs-number">0</span> ||<br>             (only &amp;&amp; (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">get_length</span>(oq.first)) || <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">get_length</span>(oq.second)))))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n0 0 &quot;</span>);<br>        <span class="hljs-keyword">if</span> (only &amp;&amp; <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">get_length</span>(oq.first)))<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, (<span class="hljs-type">int</span>)oq.first.x, (<span class="hljs-type">int</span>)oq.first.y);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (only &amp;&amp; <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">get_length</span>(oq.second)))<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, (<span class="hljs-type">int</span>)oq.second.x, (<span class="hljs-type">int</span>)oq.second.y);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, (<span class="hljs-type">int</span>)que.second.x, (<span class="hljs-type">int</span>)que.second.y);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="n-particle-arts"><a class="markdownIt-Anchor" href="#n-particle-arts"></a> N Particle Arts</h2><p>数学</p><h4 id="题意-7"><a class="markdownIt-Anchor" href="#题意-7"></a> 题意</h4><p>n个粒子，每个粒子有能量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，两两随机碰撞，碰撞发生后两粒子能量变为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi mathvariant="normal">&amp;</mi><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mi mathvariant="normal">∣</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">a\&amp;b,a|b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord">&amp;</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord">∣</span><span class="mord mathdefault">b</span></span></span></span> ，经过很多次碰撞后，所有粒子能量会趋于稳定，求能量稳定后粒子能量的方差；</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>经过<s>模拟</s>空想，粒子能量二进制位上的1和0会“富集”到某些数上，并且每位上的1总数不变；<br />例如样例</p><blockquote><p>001b<br />010b<br />011b<br />100b<br />101b</p></blockquote><p>“富集”后便成为了如下形式：</p><blockquote><p>000b<br />000b<br />001b<br />111b<br />111b</p></blockquote><p>即1会“聚集”在或结果上，0也会“聚集”在与结果上；<br />依此我们可以求出新数列，并计算方差；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">__int128_t</span> x)</span> </span>&#123;<br>   vector&lt;<span class="hljs-type">char</span>&gt; buff;<br><br>   <span class="hljs-keyword">while</span> (x) &#123;<br>      buff.<span class="hljs-built_in">push_back</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>      x /= <span class="hljs-number">10</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = buff.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      cout &lt;&lt; buff[i];<br>   &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> n;<br>   cin &gt;&gt; n;<br>   <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">u</span><span class="hljs-params">(n)</span></span>;<br>   <span class="hljs-function">vector <span class="hljs-title">final</span><span class="hljs-params">(<span class="hljs-number">15</span>, <span class="hljs-number">0</span>)</span></span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x : u) cin &gt;&gt; x;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x : u) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123;<br>         <span class="hljs-keyword">if</span> ((x &gt;&gt; i) &amp; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">final</span>[i]++;<br>         &#125;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>      u[i] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">15</span>; j++) &#123;<br>         <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-keyword">final</span>[j]) u[i] |= <span class="hljs-number">1</span> &lt;&lt; j;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-type">__int128_t</span> sum = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-type">__int128_t</span> a = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : u) sum += x;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : u) a += (<span class="hljs-number">1ll</span> * n * x - sum) * (<span class="hljs-number">1ll</span> * n * x - sum);<br>   <span class="hljs-type">__int128_t</span> b = <span class="hljs-number">1ll</span> * n * n * n;<br><br>   <span class="hljs-keyword">auto</span> x = __gcd(a, b);<br><br>   a /= x, b /= x;<br>   <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span> || b == <span class="hljs-number">0</span>) &#123;<br>      cout &lt;&lt; <span class="hljs-string">&quot;0/1\n&quot;</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br><br>   <span class="hljs-built_in">print</span>(a);<br>   <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>   <span class="hljs-built_in">print</span>(b);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ed</h2><p><s>计算几何专题</s>，搞了一学期的计算几何只是让补题方便了些（</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营3（ACDFGJ）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A53%EF%BC%88ACDFGJ%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A53%EF%BC%88ACDFGJ%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33188">题集链接</a>；</p><p><a href="https://www.bilibili.com/video/BV1fB4y187FJ">视频题解</a>；<br /><ul class="markdownIt-TOC"><li><a href="#a-ancestor">A Ancestor</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#c-concatenation">C Concatenation</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#d-directed">D Directed</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#f-fief">F Fief</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%B9%9F%E8%AE%B8%E9%81%87%E5%88%B0%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98">也许遇到一些问题</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#g-geometry">G Geometry</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#j-journey">J Journey</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li></ul></p><h2 id="a-ancestor"><a class="markdownIt-Anchor" href="#a-ancestor"></a> A Ancestor</h2><p>LCA，线段树</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>给定两棵节点数相同的树、每个节点的点权、k个指定节点的编号，求k个节点中，<strong>除某一个节点外的其他节点</strong>在<strong>两棵树上的LCA对应点权</strong>满足A树LCA点权大于B树LCA点权的情况数；</p><p>我们发现需要对两棵树多次求LCA，考虑线段树维护LCA，即线段树节点的值为线段树节点在<strong>指定节点数组所覆盖区间内</strong>的节点在某树上的LCA值；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> D = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> fa[N][<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> dep[N];<br><br>vector&lt;<span class="hljs-type">int</span>&gt; E[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> f = <span class="hljs-number">-1</span>)</span> </span>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>      fa[u][i] = fa[fa[u][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>   &#125;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : E[u]) &#123;<br>      <span class="hljs-keyword">if</span> (v == f) <span class="hljs-keyword">continue</span>;<br>      dep[v] = dep[u] + <span class="hljs-number">1</span>;<br>      fa[v][<span class="hljs-number">0</span>] = u;<br>      <span class="hljs-built_in">dfs</span>(v, u);<br>   &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lca</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span>(x == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> y;<br>   <span class="hljs-keyword">if</span>(y == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> x;<br>   <span class="hljs-keyword">if</span> (dep[x] &lt; dep[y]) <span class="hljs-built_in">swap</span>(x, y);<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">19</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      <span class="hljs-keyword">if</span> (dep[fa[x][i]] &gt;= dep[y]) x = fa[x][i];<br>   &#125;<br>   <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">19</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>      <span class="hljs-keyword">if</span> (fa[x][i] != fa[y][i]) &#123;<br>         x = fa[x][i];<br>         y = fa[y][i];<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> fa[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-type">int</span> ks[N], wt[N];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SEG_tree</span> &#123;<br>   vector&lt;<span class="hljs-type">int</span>&gt; lc;<br>   vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; Range;<br>   <span class="hljs-type">int</span> D;<br><br>   <span class="hljs-built_in">SEG_tree</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> d) : <span class="hljs-built_in">D</span>(d) &#123;<br>      <span class="hljs-type">int</span> sz = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> (sz &lt; n) sz &lt;&lt;= <span class="hljs-number">1</span>;<br>      lc.<span class="hljs-built_in">resize</span>(sz * <span class="hljs-number">2</span>);<br>      Range.<span class="hljs-built_in">resize</span>(sz * <span class="hljs-number">2</span>);<br>      <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span> + D);<br>      <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, n);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Lson</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123; <span class="hljs-keyword">return</span> p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; &#125;<br>   <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Rson</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123; <span class="hljs-keyword">return</span> p * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>; &#125;<br><br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> </span>&#123;<br>      lc[p] = <span class="hljs-built_in">lca</span>(lc[<span class="hljs-built_in">Lson</span>(p)], lc[<span class="hljs-built_in">Rson</span>(p)]);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>)</span> </span>&#123; Range[p] = &#123;l, r&#125;; <br>      <span class="hljs-keyword">if</span>(l == r) &#123;<br>         lc[p] = ks[l] + D;<br>         <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>      <span class="hljs-built_in">build</span>(l, mid, <span class="hljs-built_in">Lson</span>(p));<br>      <span class="hljs-built_in">build</span>(mid + <span class="hljs-number">1</span>, r, <span class="hljs-built_in">Rson</span>(p));<br>      <span class="hljs-built_in">push_up</span>(p);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">querry</span><span class="hljs-params">(<span class="hljs-type">int</span> x ,<span class="hljs-type">int</span> p = <span class="hljs-number">0</span>)</span> </span>&#123;<br>      <span class="hljs-keyword">auto</span> [l , r] = Range[p];<br>      <span class="hljs-keyword">if</span>(l &lt;= x &amp;&amp; x &lt;= r) &#123;<br>         <span class="hljs-keyword">if</span>(l == r) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>         <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>         <span class="hljs-keyword">auto</span> res = <span class="hljs-built_in">lca</span>(<span class="hljs-built_in">querry</span>(x, <span class="hljs-built_in">Lson</span>(p)), <span class="hljs-built_in">querry</span>(x, <span class="hljs-built_in">Rson</span>(p)));<br>         <span class="hljs-keyword">return</span> res;<br>      &#125;<br>      <span class="hljs-keyword">return</span> lc[p];<br>   &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> n, k;<br>   cin &gt;&gt; n &gt;&gt; k;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++) &#123;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ks[i]);<br>   &#125;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;wt[i]);<br>   &#125;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>      <span class="hljs-type">int</span> tmp;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tmp);<br>      E[tmp].<span class="hljs-built_in">push_back</span>(i);<br>   &#125;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;wt[i + D]);<br>   &#125;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>      <span class="hljs-type">int</span> tmp;<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tmp);<br>      E[tmp+D].<span class="hljs-built_in">push_back</span>(i+D);<br>   &#125;<br>   <span class="hljs-function">SEG_tree <span class="hljs-title">a</span><span class="hljs-params">(k,<span class="hljs-number">0</span>)</span>,<span class="hljs-title">b</span><span class="hljs-params">(k,D)</span></span>;<br>   <span class="hljs-comment">// printf(&quot;*%d %d&quot;,lca(3,4),lca(3+D,4+D));</span><br>   <span class="hljs-comment">//处理线段树</span><br>   <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)<br>   &#123;<br>      <span class="hljs-comment">// printf(&quot;%d\n&quot;,a.querry(i));</span><br>      <span class="hljs-keyword">if</span>( wt[a.<span class="hljs-built_in">querry</span>(i)]&gt; wt[b.<span class="hljs-built_in">querry</span>(i)])ans++;<br>   &#125;<br>   cout&lt;&lt;ans;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="c-concatenation"><a class="markdownIt-Anchor" href="#c-concatenation"></a> C Concatenation</h2><p><s>字典树</s>，sort</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>我们首先确定了sort排序所用的cmp函数；<br />正解是使用字典树来加速这个过程，只有对于两个串存在公共前缀是才进行cmp（也许吧）；<br />实际上并没有快多少；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><p>暴力nlogn来碾</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> n;<br>   cin &gt;&gt; n;<br>   <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">str</span><span class="hljs-params">(n)</span></span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; str[i];<br><br>   <span class="hljs-built_in">sort</span>(str.<span class="hljs-built_in">begin</span>(), str.<span class="hljs-built_in">end</span>(),<br>        [](string&amp; a, string&amp; b) &#123; <span class="hljs-keyword">return</span> a + b &lt; b + a; &#125;);<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ ) cout &lt;&lt; str[i];<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-directed"><a class="markdownIt-Anchor" href="#d-directed"></a> D Directed</h2><p>概率期望</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>给定一棵以1为根，n个节点的树，随机k条边变为指向根节点的有向边，从起始点s随机运动，求到达根节点的移动数期望；</p><p>首先考虑不存在有向边的情况：<br />设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 为x节点到其父亲的移动数期望；<br />则有（1为直接进入父节点，sum式为先进入子节点，再回到本节点）</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><munder><mo>∑</mo><mrow><mi>j</mi><mtext> is i’s son</mtext></mrow></munder><mfrac><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>+</mo><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><mrow><mi>s</mi><mi>o</mi><mi>n</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">F(i)=1+\sum_{j \text{ is i&#x27;s son}}\frac{F(i)+F(j)}{son[i]+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.865221em;vertical-align:-1.438221em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord text mtight"><span class="mord mtight"> is i’s son</span></span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.438221em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>移项得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>o</mi><mi>n</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo>+</mo><munder><mo>∑</mo><mrow><mi>j</mi><mtext> is i’s son</mtext></mrow></munder><mi>F</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(i)=son[i]+1+\sum_{j \text{ is i&#x27;s son}}F(j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.488226em;vertical-align:-1.438221em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord text mtight"><span class="mord mtight"> is i’s son</span></span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.438221em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></span></p><p>若使用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">cnt[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 表示以 i 为根的子树节点数（不含 i ），则递归上式得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">F(i)=2cnt[i]+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>此时我们所求的答案即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mtext> on path</mtext><mo stretchy="false">(</mo><mi>s</mi><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>i</mi><mo>≠</mo><mn>1</mn></mrow></msub><mi>F</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{i \text{ on path}(s,1),i\not=1}F(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.22471em;vertical-align:-0.47471em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord text mtight"><span class="mord mtight"> on path</span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">s</span><span class="mpunct mtight">,</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">i</span><span class="mrel mtight"><span class="mord mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span class="rlap mtight"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel mtight"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>；</p><p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>→</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x\to y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 为有向边，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 中“先进入子节点 x ，再回到本节点”情况不存在，则在 x 的祖先节点 z 中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span> 不含 x 的贡献；<br />那么对于节点 x ，其对于距离（边数）为 d 的祖先节点贡献量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mfrac><msubsup><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn><mo>−</mo><mi>d</mi></mrow><mi>k</mi></msubsup><msubsup><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mi>k</mi></msubsup></mfrac></mrow><annotation encoding="application/x-tex">2\frac{C_{n-1-d}^k}{C_{n-1}^k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.85909em;vertical-align:-0.6583049999999999em;"></span><span class="mord">2</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.200785em;"><span style="top:-2.60142em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8408285714285715em;"><span style="top:-2.1884857142857146em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3710357142857143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.551865em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9270285714285714em;"><span style="top:-2.214em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.34552142857142853em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6583049999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ；</p><p>因此，答案即可以表示为所有<strong>对路径上有影响的点</strong>对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F()</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mclose">)</span></span></span></span> 之和的贡献，每个点会对从<strong>距离其最近的路径上点</strong>到<strong>除1外最后一个点</strong>均有贡献，并且上式中的 d 在这个区间上连续，这部分可以通过预处理前缀和快速计算；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">998244353</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; rod[<span class="hljs-number">1000006</span>];<br><span class="hljs-type">int</span> fa[<span class="hljs-number">1000006</span>], dep[<span class="hljs-number">1000006</span>]; <span class="hljs-comment">//记录父节点和深度</span><br><span class="hljs-type">bool</span> vis[<span class="hljs-number">1000006</span>];             <span class="hljs-comment">//标记路径上点</span><br>ll fac[<span class="hljs-number">1000006</span>];               <span class="hljs-comment">//阶乘</span><br>ll cq[<span class="hljs-number">1000006</span>];                <span class="hljs-comment">//组合数前缀和</span><br><span class="hljs-type">int</span> n, k, s;<br>ll ans = <span class="hljs-number">0</span>;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b = M - <span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = a * ans % M;<br>        a = a * a % M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs_b</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    dep[x] = ((x == <span class="hljs-number">1</span>) ? <span class="hljs-number">0</span> : dep[f] + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (x == s)<br>        vis[x] = <span class="hljs-number">1</span>;<br>    fa[x] = f;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : rod[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i != f)<br>        &#123;<br>            <span class="hljs-built_in">dfs_b</span>(i, x);<br>            <span class="hljs-keyword">if</span> (vis[i])<br>                vis[x] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs_c</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> ld)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : rod[x])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (vis[i])<br>            &#123;<br>                <span class="hljs-built_in">dfs_c</span>(i, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// printf(&quot;%d %lld\n&quot;,x,( 2*(cq[dep[x]-1] - cq[dep[x] - ld-1] + M))%M);</span><br>        ans += <span class="hljs-number">2</span> * (cq[dep[x] - <span class="hljs-number">1</span>] - cq[dep[x] - ld - <span class="hljs-number">1</span>] + M);<br>        <span class="hljs-keyword">if</span> (vis[x])<br>            ans += <span class="hljs-number">1</span>;<br>        ans %= M;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : rod[x])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i != fa[x])<br>            &#123;<br>                <span class="hljs-built_in">dfs_c</span>(i, (vis[x] ? dep[x] : ld));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k &gt;&gt; s;<br>    <span class="hljs-type">int</span> u, v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        rod[u].<span class="hljs-built_in">push_back</span>(v);<br>        rod[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        fac[i] = fac[i - <span class="hljs-number">1</span>] * i % M;<br>    &#125;<br>    cq[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cq[i] = cq[i - <span class="hljs-number">1</span>] + ((n - <span class="hljs-number">1</span> - i &gt;= k) ? (fac[n - <span class="hljs-number">1</span> - i] * <span class="hljs-built_in">qm</span>(fac[n - k - i - <span class="hljs-number">1</span>]) % M) *<br>                                                    <span class="hljs-built_in">qm</span>(fac[n - <span class="hljs-number">1</span>] * <span class="hljs-built_in">qm</span>(fac[n - k - <span class="hljs-number">1</span>]) % M) % M<br>                                              : <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// printf(&quot;*%lld\n&quot;,cq[i]);</span><br>    &#125;<br>    <span class="hljs-built_in">dfs_b</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">dfs_c</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// ans+=dep[s]+1;</span><br>    ans %= M;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-fief"><a class="markdownIt-Anchor" href="#f-fief"></a> F Fief</h2><p>点双</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>我们首先可以认为点双内部的点是可以随意分割的，即在一个点双内，可以使一方的点数为从零到满的任意值；</p><p>我们在此题中暂且认为割点不属于任何点双，考虑割点对点双的影响：<br />如果存在某割点可以将某点双割离两个问询点，则被割离的点双内部所有点一定同属于一方（割点处无法保证两方均与该点双内部连通）；</p><p>即图内不存在将某个点双从问询点所在点双割离的割点；</p><p>接下来考虑点双之间的关系：<br />当组成图的若干点双组成一条链时（O-O-O-O-…-O，O代表点双），并且被问询两点位于这条链的两个端点，为YES；</p><p>特殊情况包括但不限于：图不连通（n=2时不连通也为YES）、询问点为割点、出现三叉（多岔）链、全图是且仅是一个点双；</p><h4 id="也许遇到一些问题"><a class="markdownIt-Anchor" href="#也许遇到一些问题"></a> 也许遇到一些问题</h4><p><em>补题时候想到此样例问了半天，最后发现是自己题读假了</em></p><p>对于样例</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">11 </span><span class="hljs-number">16</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">8</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">9</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">11</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">10</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">11</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">10</span><br><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>即<br /><img src="https://s2.loli.net/2022/08/25/Z529YQpJy4IzAKo.png" alt="image.png" /><br />也许会认为对于1，11是YES，因为对于五个点有<code>1,2,3,4,5</code>，对于六个点有<code>1,2,3,6,7</code>；<br />实际不然，题目中要求有：<code>could he always find a list such that Antileaf and Fstqwq's fief would be always connected regardless of the result of the lottery</code>，即要求列表是对于任意分割数量的都可行，上面的分配方式实际上改变了列表的内容；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100005</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">下文认为割点不在任何点双中</span><br><span class="hljs-comment">中心思想：图内不存在将某个点双从问询点所在点双割离的割点</span><br><span class="hljs-comment">显然0：若整个图不联通，（除n==2&amp;&amp;m==0外），或问询点为割点时，一定为NO；</span><br><span class="hljs-comment">显然1：当组成图的若干点双组成一条链时（O-O-O-O-...-O），并且被问询两点位于这条链的两个端点，为YES；</span><br><span class="hljs-comment">显然2：当组成图的仅有一个点双时（O），并且被问询两点都在此点双（废话），为YES；</span><br><span class="hljs-comment">*/</span><br>stack&lt;<span class="hljs-type">int</span>&gt; s;       <span class="hljs-comment">// dfs栈</span><br>vector&lt;<span class="hljs-type">int</span>&gt; rod[N]; <span class="hljs-comment">// 存路</span><br><span class="hljs-type">int</span> dfn[N], dc = <span class="hljs-number">1</span>; <span class="hljs-comment">// dfs存储dfs入序，dc用于分配dfs序</span><br><span class="hljs-type">int</span> low[N];         <span class="hljs-comment">// low存储节点下子树通过返祖边所连接的最小dfs序</span><br>vector&lt;<span class="hljs-type">int</span>&gt; scc[N];<br><span class="hljs-type">int</span> inscc[N]; <span class="hljs-comment">// 标记每个点双的入度，用来判链头</span><br><span class="hljs-type">int</span> sc = <span class="hljs-number">1</span>;   <span class="hljs-comment">// scc存储每个双连通分量内的元素，sc分配双连通分量编号</span><br><span class="hljs-type">int</span> mk[N];    <span class="hljs-comment">// 标记点所在点双编号</span><br><span class="hljs-type">int</span> cut[N]; <span class="hljs-comment">// cut存储该点删去后，该点所在的连通块会变成几块，cut[i]&gt;1的为割点</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    s.<span class="hljs-built_in">push</span>(u);<br>    cut[u] = (u == r) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>    low[u] = dfn[u] = dc++;<br>    <span class="hljs-keyword">if</span> (u == r &amp;&amp; rod[u].<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> now = s.<span class="hljs-built_in">top</span>();<br>        s.<span class="hljs-built_in">pop</span>();<br>        scc[sc].<span class="hljs-built_in">push_back</span>(now);<br>        sc++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; rod[u].<span class="hljs-built_in">size</span>(); j++)<br>    &#123;<br>        <span class="hljs-type">int</span> to = rod[u][j];<br>        <span class="hljs-keyword">if</span> (!dfn[to])<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(to, r);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[to]);<br>            <span class="hljs-keyword">if</span> (low[to] &gt;= dfn[u])<br>            &#123;<br>                <span class="hljs-type">int</span> now;<br>                <span class="hljs-keyword">do</span><br>                &#123;<br>                    now = s.<span class="hljs-built_in">top</span>();<br>                    s.<span class="hljs-built_in">pop</span>();<br>                    scc[sc].<span class="hljs-built_in">push_back</span>(now);<br>                &#125; <span class="hljs-keyword">while</span> (now != to);<br>                scc[sc].<span class="hljs-built_in">push_back</span>(u);<br>                sc++;<br>                cut[u]++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[to]);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, q, u, v;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        rod[u].<span class="hljs-built_in">push_back</span>(v), rod[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> ysc = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; sc; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> ff = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : scc[i])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cut[x] &lt;= <span class="hljs-number">1</span>)<br>                mk[x] = i, ff = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!ff)<br>            ysc++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n&amp;&amp;f; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!dfn[i])f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (cut[i] &gt;= <span class="hljs-number">2</span>)<br>        &#123;<br>            unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">bool</span>&gt; mp;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : rod[i])<br>            &#123;<br>                <span class="hljs-keyword">if</span> (cut[u] &lt;= <span class="hljs-number">1</span> &amp;&amp; !mp[mk[u]])<br>                &#123;<br>                    inscc[mk[u]]++;<br>                    mp[mk[u]] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> chainedge = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; sc; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (inscc[i] == <span class="hljs-number">1</span>)<br>            chainedge++;<br>    &#125;<br>    <span class="hljs-comment">// for (int i = 1; i &lt;= n; i++)</span><br>    <span class="hljs-comment">//     printf(&quot;%d &quot;, mk[i]);</span><br>    <span class="hljs-comment">// printf(&quot;\n%d \n&quot;, mxcut);</span><br>    <span class="hljs-comment">// for (int i = 1; i &lt;= n; i++)</span><br>    <span class="hljs-comment">//     printf(&quot;%d &quot;, inscc[i]);</span><br>    <span class="hljs-comment">// printf(&quot;\n&quot;);</span><br>    <span class="hljs-comment">// for (int i = 1; i &lt;= n; i++)</span><br>    <span class="hljs-comment">//     printf(&quot;%d &quot;, cut[i]);</span><br>    <span class="hljs-comment">// printf(&quot;\n&quot;);</span><br>    cin &gt;&gt; q;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        <span class="hljs-keyword">if</span> ((f &amp;&amp; chainedge == ((ysc == <span class="hljs-number">1</span>) ? <span class="hljs-number">0</span> : <span class="hljs-number">2</span>) &amp;&amp; <span class="hljs-comment">//有一个连通块，不存在三叉链（或更多）</span><br>             ((inscc[mk[u]] == ((ysc == <span class="hljs-number">1</span>) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>)) &amp;&amp;<br>              (inscc[mk[v]] == ((ysc == <span class="hljs-number">1</span>) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>)) &amp;&amp; <span class="hljs-comment">//问询两点都在链头</span><br>              ((ysc == <span class="hljs-number">1</span>) ? <span class="hljs-number">1</span> : (mk[u] != mk[v]))) &amp;&amp;   <span class="hljs-comment">//问询两点不共块</span><br>             cut[u] == <span class="hljs-number">1</span> &amp;&amp;<br>             cut[v] == <span class="hljs-number">1</span>) ||    <span class="hljs-comment">//问询两点不为割点</span><br>            (n == <span class="hljs-number">2</span> &amp;&amp; m == <span class="hljs-number">0</span>)) <span class="hljs-comment">//特判</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-geometry"><a class="markdownIt-Anchor" href="#g-geometry"></a> G Geometry</h2><p>闵可夫斯基和</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>给定两个凸包和各自的速度矢量，问其能否发生碰撞和发生碰撞所需的时间；</p><p>问题可以转化为求解 t 使得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mover accent="true"><msub><mi>v</mi><mn>1</mn></msub><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>=</mo><mi>t</mi><mover accent="true"><msub><mi>v</mi><mn>2</mn></msub><mo>⃗</mo></mover><mo>+</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">t\vec{v_1}+\vec a=t\vec{v_2}+\vec b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord mathdefault">t</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.714em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord mathdefault">t</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">b</span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>∈</mo><mi>A</mi><mo separator="true">,</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>∈</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">\vec a\in A,\vec b\in B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7531em;vertical-align:-0.0391em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1718799999999998em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">b</span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>；<br />变形为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo>−</mo><mover accent="true"><mi>b</mi><mo>⃗</mo></mover><mo>=</mo><mi>t</mi><mo stretchy="false">(</mo><mover accent="true"><msub><mi>v</mi><mn>2</mn></msub><mo>⃗</mo></mover><mo>−</mo><mover accent="true"><msub><mi>v</mi><mn>1</mn></msub><mo>⃗</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\vec a-\vec b=t(\vec{v_2}-\vec{v_1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79733em;vertical-align:-0.08333em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">a</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9774399999999999em;vertical-align:0em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9774399999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault">b</span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span>；</p><p>于是问题就变成了求过原点，方向与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>v</mi><mn>2</mn></msub><mo>⃗</mo></mover><mo>−</mo><mover accent="true"><msub><mi>v</mi><mn>1</mn></msub><mo>⃗</mo></mover></mrow><annotation encoding="application/x-tex">\vec{v_2}-\vec{v_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864em;vertical-align:-0.15em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span> 相同的射线 和 A与-B两凸包的闵可夫斯基和凸包的交点；</p><p>求交点时注意判断交点是否在射线方向（避免反向）</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sign</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// 符号函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(x) &lt; eps)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-type">double</span> x, y;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">double</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> b = <span class="hljs-number">0</span>) &#123; x = a, y = b; &#125;<br>    Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x + a.x, y + a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x - a.x, y - a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x * a, y * a); &#125;<br>    Point <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x / a, y / a); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> !<span class="hljs-built_in">sign</span>(x - a.x) &amp;&amp; !<span class="hljs-built_in">sign</span>(y - a.y); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> (<span class="hljs-built_in">fabs</span>(x - a.x) &lt; eps) ? (y &lt; a.y) : (x &lt; a.x); &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Line</span><br>&#123;<br>    Point a, v;<br>    <span class="hljs-built_in">Line</span>(Point x = <span class="hljs-built_in">Point</span>(), Point y = <span class="hljs-built_in">Point</span>()) &#123; a = x, v = y; &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Segm</span><br>&#123;<br>    Point a, b;<br>    <span class="hljs-built_in">Segm</span>(Point x = <span class="hljs-built_in">Point</span>(), Point y = <span class="hljs-built_in">Point</span>()) &#123; a = x, b = y; &#125;<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dots_num = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Poly</span><br>&#123;<br>    <span class="hljs-type">int</span> num;<br>    Point dots[dots_num];<br>    <span class="hljs-built_in">Poly</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>) &#123; num = x; &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">dot</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.x + a.y * b.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cross</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.y - b.x * a.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get_length</span><span class="hljs-params">(Point a)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">dot</span>(a, a)); &#125;<br><span class="hljs-function">Point <span class="hljs-title">get_line_intersection</span><span class="hljs-params">(Line m, Line n)</span></span><br><span class="hljs-function"></span>&#123;<br>    Point u = m.a - n.a;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(m.v, n.v)) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">double</span> t = <span class="hljs-built_in">cross</span>(n.v, u) / <span class="hljs-built_in">cross</span>(m.v, n.v);<br>    <span class="hljs-keyword">return</span> m.a + m.v * t;<br>&#125;<br>Point p[<span class="hljs-number">100005</span>], stk[<span class="hljs-number">200005</span>];<br><span class="hljs-type">int</span> tk = <span class="hljs-number">0</span>;<br><span class="hljs-function">Poly <span class="hljs-title">Andrew</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    tk = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(p, p + n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &amp;&amp; p[i] == p[i - <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">while</span> (tk &gt;= <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(stk[tk - <span class="hljs-number">1</span>] - stk[tk - <span class="hljs-number">2</span>], p[i] - stk[tk - <span class="hljs-number">2</span>]) &gt;= <span class="hljs-number">0</span>))<br>        &#123;<br>            tk--;<br>        &#125;<br>        stk[tk++] = p[i];<br>    &#125;<br>    <span class="hljs-type">int</span> hlf = tk;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (p[i] == p[i + <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">while</span> (tk &gt;= hlf + <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(stk[tk - <span class="hljs-number">1</span>] - stk[tk - <span class="hljs-number">2</span>], p[i] - stk[tk - <span class="hljs-number">2</span>]) &gt;= <span class="hljs-number">0</span>))<br>        &#123;<br>            tk--;<br>        &#125;<br>        stk[tk++] = p[i];<br>    &#125;<br>    Poly ans = <span class="hljs-built_in">Poly</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = tk - <span class="hljs-number">1</span>; i; i--)<br>        ans.dots[ans.num++] = stk[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">Poly <span class="hljs-title">Minkowski_sum</span><span class="hljs-params">(Poly &amp;a, Poly &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    Poly ans = <span class="hljs-built_in">Poly</span>();<br>    ans.dots[ans.num++] = a.dots[<span class="hljs-number">0</span>] + b.dots[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; a.num &amp;&amp; j &lt; b.num &amp;&amp; ans.num &lt; a.num + b.num)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(a.dots[(i + <span class="hljs-number">1</span>) % a.num] - a.dots[i], b.dots[(j + <span class="hljs-number">1</span>) % b.num] - b.dots[j])) &gt;=<br>            <span class="hljs-number">0</span>)<br>        &#123;<br>            ans.dots[ans.num] = ans.dots[ans.num - <span class="hljs-number">1</span>] + a.dots[(i + <span class="hljs-number">1</span>) % a.num] - a.dots[i];<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ans.dots[ans.num] = ans.dots[ans.num - <span class="hljs-number">1</span>] + b.dots[(j + <span class="hljs-number">1</span>) % b.num] - b.dots[j];<br>            j++;<br>        &#125;<br>        ans.num++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt; a.num &amp;&amp; ans.num &lt; a.num + b.num)<br>    &#123;<br>        ans.dots[ans.num] = ans.dots[ans.num - <span class="hljs-number">1</span>] + a.dots[(i + <span class="hljs-number">1</span>) % a.num] - a.dots[i];<br>        i++;<br>        ans.num++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt; b.num &amp;&amp; ans.num &lt; a.num + b.num)<br>    &#123;<br>        ans.dots[ans.num] = ans.dots[ans.num - <span class="hljs-number">1</span>] + b.dots[(j + <span class="hljs-number">1</span>) % b.num] - b.dots[j];<br>        j++;<br>        ans.num++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">on_segment</span><span class="hljs-params">(Point p, Segm m)</span></span><br><span class="hljs-function"></span>&#123;<br>    Point u = m.a - p, v = m.b - p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(u, v)) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">dot</span>(u, v)) &lt;= <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">point_in_polygon</span><span class="hljs-params">(Point p, Poly &amp;m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (m.num == <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">on_segment</span>(p, <span class="hljs-built_in">Segm</span>(m.dots[<span class="hljs-number">0</span>], m.dots[<span class="hljs-number">1</span>]));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m.num; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">on_segment</span>(p, <span class="hljs-built_in">Segm</span>(m.dots[(i + <span class="hljs-number">1</span>) % m.num], m.dots[i])))<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(p - m.dots[i], m.dots[(i + <span class="hljs-number">1</span>) % m.num] - m.dots[i])) &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> op = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c))<br>        op |= (c == <span class="hljs-string">&#x27;-&#x27;</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c))<br>        x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> op ? -x : x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Poly a, b;<br>    Point v1, v2;<br>    <span class="hljs-type">int</span> n, u, v;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        u = <span class="hljs-built_in">read</span>(), v = <span class="hljs-built_in">read</span>();<br>        p[i] = <span class="hljs-built_in">Point</span>(u, v);<br>    &#125;<br>    a = <span class="hljs-built_in">Andrew</span>(n);<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        u = <span class="hljs-built_in">read</span>(), v = <span class="hljs-built_in">read</span>();<br>        p[i] = <span class="hljs-built_in">Point</span>(-u, -v);<br>    &#125;<br>    b = <span class="hljs-built_in">Andrew</span>(n);<br>    Poly ans = <span class="hljs-built_in">Minkowski_sum</span>(a, b);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.num; i++)<br>        p[i] = ans.dots[i];<br>    ans = <span class="hljs-built_in">Andrew</span>(ans.num);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%Lf%Lf%Lf%Lf&quot;</span>, &amp;v1.x, &amp;v1.y, &amp;v2.x, &amp;v2.y);<br>    Line bas = <span class="hljs-built_in">Line</span>(<span class="hljs-built_in">Point</span>(), v2 - v1);<br>    <span class="hljs-type">double</span> mindis = <span class="hljs-number">1e22</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">point_in_polygon</span>(<span class="hljs-built_in">Point</span>(), ans))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">get_length</span>(bas.v)) == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ans.num; i++)<br>        &#123;<br>            Segm tmp = <span class="hljs-built_in">Segm</span>(ans.dots[i], ans.dots[(i + <span class="hljs-number">1</span>) % ans.num]);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(tmp.a, bas.v)) != <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(tmp.b, bas.v)))<br>            &#123;<br>                Point gli = <span class="hljs-built_in">get_line_intersection</span>(bas, <span class="hljs-built_in">Line</span>(tmp.a, tmp.b - tmp.a));<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">dot</span>(gli, bas.v)) &gt;= <span class="hljs-number">0</span>)<br>                    mindis = <span class="hljs-built_in">min</span>(mindis, <span class="hljs-built_in">get_length</span>(gli));<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(tmp.a, bas.v)))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">dot</span>(tmp.a, bas.v)) &gt;= <span class="hljs-number">0</span>)<br>                    mindis = <span class="hljs-built_in">min</span>(mindis, <span class="hljs-built_in">get_length</span>(tmp.a));<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">dot</span>(tmp.b, bas.v)) &gt;= <span class="hljs-number">0</span>)<br>                    mindis = <span class="hljs-built_in">min</span>(mindis, <span class="hljs-built_in">get_length</span>(tmp.b));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (mindis &lt; <span class="hljs-number">1e20</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.16Lf&quot;</span>, mindis / <span class="hljs-built_in">get_length</span>(bas.v));<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-journey"><a class="markdownIt-Anchor" href="#j-journey"></a> J Journey</h2><p>迪杰斯特拉</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>考虑将路口视为边，有向道路视为点，这样便很方便地处理了右转的判定问题；</p><p>接下来的事情就很简单了，注意建图时使用map可能导致超时；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span>+<span class="hljs-number">10</span>;<br><br>unordered_map&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span> ,<span class="hljs-type">int</span> &gt; mp;<br><br><span class="hljs-type">int</span> ctmp=<span class="hljs-number">1</span>;<br>vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;rod[N*<span class="hljs-number">8</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">gm</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> p = <span class="hljs-number">1ll</span> * a * N + b;<br>    <span class="hljs-keyword">if</span>(mp[p])<span class="hljs-keyword">return</span> mp[p];<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">return</span> (mp[p]=ctmp++);<br>&#125;<br><br><br><span class="hljs-type">int</span> dis[N*<span class="hljs-number">8</span>];<br><span class="hljs-type">bool</span> vis[N*<span class="hljs-number">8</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijk</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pii;<br>priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;pii&gt; &gt;que;<br><span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dis);<br><span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> vis);<br>dis[s]=<span class="hljs-number">0</span>;<br>que.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,s&#125;);<span class="hljs-comment">//先将s入队，不标记被访问，下面循环中再加入相邻边；</span><br><span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-type">int</span> now=que.<span class="hljs-built_in">top</span>().second;<br>que.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//堆顶元素在加入时已经被预更新距离了，所以.first不需要再使用</span><br><span class="hljs-keyword">if</span>(vis[now])<span class="hljs-keyword">continue</span>;<br>vis[s]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;rod[now].<span class="hljs-built_in">size</span>();i++)<br>&#123;<br><span class="hljs-keyword">if</span>(dis[rod[now][i].first]&gt;rod[now][i].second+dis[now])<br>&#123;<span class="hljs-comment">//可被更新的点一定是未访问点，否则存在负权边</span><br>dis[rod[now][i].first]=rod[now][i].second+dis[now];<br>que.<span class="hljs-built_in">push</span>(&#123;dis[rod[now][i].first],rod[now][i].first&#125;);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,c[<span class="hljs-number">4</span>];<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;c[j]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(c[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(c[k]==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(k==(j+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>)rod[<span class="hljs-built_in">gm</span>(c[j],i)].<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-built_in">gm</span>(i,c[k]),<span class="hljs-number">0</span>&#125;);<br>                <span class="hljs-keyword">else</span> rod[<span class="hljs-built_in">gm</span>(c[j],i)].<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-built_in">gm</span>(i,c[k]),<span class="hljs-number">1</span>&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;s,t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;s.first,&amp;s.second,&amp;t.first,&amp;t.second);<br>    <span class="hljs-built_in">dijk</span>(<span class="hljs-built_in">gm</span>(s.first,s.second));<br>    <span class="hljs-keyword">if</span>(dis[<span class="hljs-built_in">gm</span>(t.first,t.second)]==dis[<span class="hljs-number">0</span>])<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,dis[<span class="hljs-built_in">gm</span>(t.first,t.second)]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>How did I come from?</title>
    <link href="/How%20did%20I%20come%20from/"/>
    <url>/How%20did%20I%20come%20from/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2022.07.24</p></blockquote><p>CY老师组织了2022暑假第三次周报，期间RK学长期望与实验室同学来充实友链页；我向学长表示可能会离开CSDN，计划租ECS来建站，之前的友链可能就要改掉了；同时向学长表示关于此计划还要咨询他很多问题，学长则表示：</p><p><img src="https://img-blog.csdnimg.cn/905d71a9510340d08494e293a1a81aa9.png" alt="人和人的体质不能一概而论，学长显然高估了我的能力" /></p><p>于是从21:27搞到了00:25~</p><p>并通过<a href="https://blog.csdn.net/qq_33976344/article/details/123800804">此文章</a>所述办法爬下来了之前CSDN上面的文章，为迁移和备份做好了准备~</p><blockquote><p>2022.07.25</p></blockquote><p>对照着<a href="https://hexo.fluid-dev.com/docs/guide/">Hexo Fluid 配置指南</a>忙活了一晚上，博客终于初具人形~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营2（BDGHJKL）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A52%EF%BC%88BDGHJKL%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A52%EF%BC%88BDGHJKL%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33187">题集链接</a>；</p><p><a href="https://www.bilibili.com/video/BV1Je4y197Sh">视频题解</a>；<br /><ul class="markdownIt-TOC"><li><a href="#b-light">B light</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#d-link-with-game-glitch">D Link with Game Glitch</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#g-link-with-monotonic-subsequence">G Link with Monotonic Subsequence</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#h-take-the-elevator">H Take the Elevator</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#j-link-with-arithmetic-progression">J Link with Arithmetic Progression</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#k-link-with-bracket-sequence-i">K Link with Bracket Sequence I</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#l-link-with-level-editor-i">L Link with Level Editor I</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="b-light"><a class="markdownIt-Anchor" href="#b-light"></a> B light</h2><p>计算几何</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>首先对围墙外围进行定量缩水形成校园区域；<br />再对校园区域（实际上是对形状为校园区域，高度为墙高的悬浮多边形）进行投影形成月光可能照到的区域；<br />最后对月光区域和实际区域求多边形面积交（半平面交）获得题求面积；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sign</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// 符号函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(x) &lt; eps)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-type">double</span> x, y;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">double</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> b = <span class="hljs-number">0</span>) &#123; x = a, y = b; &#125;<br>    Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x + a.x, y + a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x - a.x, y - a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x * a, y * a); &#125;<br>    Point <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x / a, y / a); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> !<span class="hljs-built_in">sign</span>(x - a.x) &amp;&amp; !<span class="hljs-built_in">sign</span>(y - a.y); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> (<span class="hljs-built_in">fabs</span>(x - a.x) &lt; eps) ? (y &lt; a.y) : (x &lt; a.x); &#125;<br>    <span class="hljs-function">Point <span class="hljs-title">left90</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(-y, x); &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Line</span><br>&#123;<br>    Point a, v;<br>    <span class="hljs-built_in">Line</span>(Point x = <span class="hljs-built_in">Point</span>(), Point y = <span class="hljs-built_in">Point</span>()) &#123; a = x, v = y; &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Segm</span><br>&#123;<br>    Point a, b;<br>    <span class="hljs-built_in">Segm</span>(Point x = <span class="hljs-built_in">Point</span>(), Point y = <span class="hljs-built_in">Point</span>()) &#123; a = x, b = y; &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Circle</span><br>&#123;<br>    Point o;<br>    <span class="hljs-type">double</span> r;<br>    <span class="hljs-built_in">Circle</span>(Point x = <span class="hljs-built_in">Point</span>(), <span class="hljs-type">double</span> y = <span class="hljs-number">0</span>) &#123; o = x, r = y; &#125;<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dots_num = <span class="hljs-number">2003</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Poly</span><br>&#123;<br>    <span class="hljs-type">int</span> num;<br>    Point dots[dots_num];<br>    <span class="hljs-built_in">Poly</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>) &#123; num = x; &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">dot</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.x + a.y * b.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cross</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.y - b.x * a.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get_length</span><span class="hljs-params">(Point a)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">dot</span>(a, a)); &#125;<br><span class="hljs-function">Point <span class="hljs-title">get_line_intersection</span><span class="hljs-params">(Line m, Line n)</span></span><br><span class="hljs-function"></span>&#123;<br>    Point u = m.a - n.a;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(m.v, n.v)) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">double</span> t = <span class="hljs-built_in">cross</span>(n.v, u) / <span class="hljs-built_in">cross</span>(m.v, n.v);<br>    <span class="hljs-keyword">return</span> m.a + m.v * t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> Line &amp;a, <span class="hljs-type">const</span> Line &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> da = <span class="hljs-built_in">atan2</span>(a.v.y, a.v.x), db = <span class="hljs-built_in">atan2</span>(b.v.y, b.v.x);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">sign</span>(da - db))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">cross</span>(a.v, b.a + b.v - a.a) &lt; <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> da &lt; db;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">point_on_line_right</span><span class="hljs-params">(Point p, Line l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(l.v, p - l.a)) &lt; <span class="hljs-number">0</span>;<br>&#125;<br>Line lne[<span class="hljs-number">4006</span>];<br><span class="hljs-function">Poly <span class="hljs-title">half_plane_intersection</span><span class="hljs-params">(<span class="hljs-type">int</span> cnt)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">sort</span>(lne, lne + cnt, cmp);<br>    <span class="hljs-type">int</span> hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br>    Line dque[<span class="hljs-number">4006</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &amp;&amp; !<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">atan2</span>(lne[i].v.y, lne[i].v.x) - <span class="hljs-built_in">atan2</span>(lne[i - <span class="hljs-number">1</span>].v.y, lne[i - <span class="hljs-number">1</span>].v.x)))<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">while</span> (hh + <span class="hljs-number">1</span> &lt;= tt &amp;&amp;<br>               <span class="hljs-built_in">point_on_line_right</span>(<span class="hljs-built_in">get_line_intersection</span>(dque[tt - <span class="hljs-number">1</span>], dque[tt]), lne[i]))<br>            tt--;<br>        <span class="hljs-keyword">while</span> (hh + <span class="hljs-number">1</span> &lt;= tt &amp;&amp;<br>               <span class="hljs-built_in">point_on_line_right</span>(<span class="hljs-built_in">get_line_intersection</span>(dque[hh], dque[hh + <span class="hljs-number">1</span>]), lne[i]))<br>            hh++;<br>        dque[++tt] = lne[i];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="hljs-built_in">point_on_line_right</span>(<span class="hljs-built_in">get_line_intersection</span>(dque[tt], dque[tt - <span class="hljs-number">1</span>]), dque[hh]))<br>        tt--;<br>    Poly ans = <span class="hljs-built_in">Poly</span>();<br>    <span class="hljs-keyword">if</span> (tt - hh + <span class="hljs-number">1</span> &gt;= <span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= tt - hh; i++)<br>            ans.dots[ans.num++] =<br>                <span class="hljs-built_in">get_line_intersection</span>(dque[hh + i], dque[hh + (i + <span class="hljs-number">1</span>) % (tt - hh + <span class="hljs-number">1</span>)]);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">Poly <span class="hljs-title">Polygon_shrinkage</span><span class="hljs-params">(Poly pl, <span class="hljs-type">double</span> d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; pl.num; i++)<br>    &#123;<br>        Line tmp = <span class="hljs-built_in">Line</span>(pl.dots[i], pl.dots[(i + <span class="hljs-number">1</span>) % pl.num] - pl.dots[i]);<br>        Point dir = tmp.v.<span class="hljs-built_in">left90</span>();<br>        dir = dir / <span class="hljs-built_in">get_length</span>(dir) * d;<br>        lne[i] = <span class="hljs-built_in">Line</span>(tmp.a + dir, tmp.v);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">half_plane_intersection</span>(pl.num);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">polygon_square</span><span class="hljs-params">(Poly m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m.num; i++)<br>    &#123;<br>        ans += <span class="hljs-built_in">cross</span>(m.dots[i], m.dots[(i + <span class="hljs-number">1</span>) % m.num]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans / <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Poly_area_intersection</span><span class="hljs-params">(Poly a, Poly b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ct = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.num; i++)<br>    &#123;<br>        lne[ct++] = <span class="hljs-built_in">Line</span>(a.dots[i], a.dots[(i + <span class="hljs-number">1</span>) % a.num] - a.dots[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; b.num; i++)<br>    &#123;<br>        lne[ct++] = <span class="hljs-built_in">Line</span>(b.dots[i], b.dots[(i + <span class="hljs-number">1</span>) % b.num] - b.dots[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">polygon_square</span>(<span class="hljs-built_in">half_plane_intersection</span>(ct));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">on_segment</span><span class="hljs-params">(Point p, Segm m)</span></span><br><span class="hljs-function"></span>&#123;<br>    Point u = m.a - p, v = m.b - p;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(u, v)) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">dot</span>(u, v)) &lt;= <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">point_in_polygon</span><span class="hljs-params">(Point p, Poly m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m.num; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">on_segment</span>(p, <span class="hljs-built_in">Segm</span>(m.dots[(i + <span class="hljs-number">1</span>) % m.num], m.dots[i])))<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(p - m.dots[i], m.dots[(i + <span class="hljs-number">1</span>) % m.num] - m.dots[i])) &gt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-type">double</span> h, w;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lf%lf&quot;</span>, &amp;n, &amp;h, &amp;w);<br>        Poly yrd = <span class="hljs-built_in">Poly</span>(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf&quot;</span>, &amp;yrd.dots[i].x, &amp;yrd.dots[i].y);<br>        &#125;<br>        yrd = <span class="hljs-built_in">Polygon_shrinkage</span>(yrd, w);<br>        Point blb;<br>        <span class="hljs-type">double</span> hb;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf%lf&quot;</span>, &amp;blb.x, &amp;blb.y, &amp;hb);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">point_in_polygon</span>(blb, yrd))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, <span class="hljs-built_in">polygon_square</span>(yrd));<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(hb - h) &lt;= <span class="hljs-number">0</span> || !yrd.num)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        Poly nyrd = <span class="hljs-built_in">Poly</span>(yrd.num);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; yrd.num; i++)<br>        &#123;<br>            Point d = yrd.dots[i] - blb;<br>            nyrd.dots[i] = yrd.dots[i] + d * h / (hb - h);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf\n&quot;</span>, <span class="hljs-built_in">Poly_area_intersection</span>(yrd, nyrd));<br>    &#125;<br>    <span class="hljs-comment">// printf(&quot;*%d\n&quot;,yrd.num);</span><br>    <span class="hljs-comment">// for(int i=0;i&lt;yrd.num;i++)printf(&quot;%lf %lf\n&quot;,yrd.dots[i].x,yrd.dots[i].y);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-link-with-game-glitch"><a class="markdownIt-Anchor" href="#d-link-with-game-glitch"></a> D Link with Game Glitch</h2><p>图论，二分</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>题目给出一有向图，边上有边权，定义一个环的的权重为环上边权积，现让所有边权乘上一个系数 w ，使得所有环的权重不大于1，求最大w；</p><p>首先想到对于判断负环可以通过BellmanFord算法，同理，在这道题中我们可以来确定是否存在正环；</p><p>实践发现，边权过大，超过了long double的承载能力，我们对边权和w取log，由乘法变成加法，即可保持正相关性；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">double</span>&gt;&gt; E[N];<br><br><span class="hljs-type">double</span> value[N];<br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bf</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">double</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    value[s] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> f = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; E[j].<span class="hljs-built_in">size</span>(); k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (value[j] + E[j][k].second + w &gt; value[E[j][k].first])<br>                &#123;<br>                    f = <span class="hljs-number">1</span>;<br>                    value[E[j][k].first] = value[j] + E[j][k].second + w;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!f)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">double</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        value[i] = <span class="hljs-number">1e-2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(value[i] - <span class="hljs-number">1e-2</span>) &lt; <span class="hljs-number">1e-4</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">bf</span>(i, m))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> a, b, c, d;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<br>        E[b].<span class="hljs-built_in">push_back</span>(&#123;d,<span class="hljs-built_in">log</span>( c * <span class="hljs-number">1.0</span> / a)&#125;);<br>    &#125;<br><br>    <span class="hljs-type">double</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">while</span> (r - l &gt; <span class="hljs-number">1e-17</span>)<br>    &#123;<br>        <span class="hljs-comment">// printf(&quot;*%.10Lf %.10Lf\n&quot;,l,r);</span><br>        <span class="hljs-keyword">auto</span> mt = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(<span class="hljs-built_in">log</span>(mt)))<br>        &#123;<br>            l = mt;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            r = mt;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// if(l &gt; 1e7) l = 1;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.15Lf\n&quot;</span>, l);<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上发现大家用dfs更多，而且dfs由于运算更少，可以直接long double碾过去，下附队友的代码；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1010</span>;<br><br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">double</span>&gt;&gt; E[N];<br><br><span class="hljs-type">long</span> <span class="hljs-type">double</span> value[N];<br><span class="hljs-type">bool</span> vis[N];<br><span class="hljs-type">int</span> cnt[N];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">double</span> m)</span> </span>&#123;<br>   vis[u] = <span class="hljs-literal">true</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [v, w] : E[u]) &#123;<br>      <span class="hljs-keyword">if</span> (value[v] &lt; w * m * value[u]) &#123;<br>         <span class="hljs-keyword">if</span> (vis[v]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br>         value[v] = w * m * value[u];<br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(v, m) == <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>   &#125;<br>   vis[u] = <span class="hljs-literal">false</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">double</span> m)</span> </span>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) value[i] = <span class="hljs-number">1</span>, vis[i] = <span class="hljs-literal">false</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>      <span class="hljs-keyword">if</span> (value[i] == <span class="hljs-number">1</span>) &#123;<br>         cnt[i] = <span class="hljs-number">0</span>;<br>         <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(i, m) == <span class="hljs-literal">false</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> n, m;<br>   cin &gt;&gt; n &gt;&gt; m;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>      <span class="hljs-type">int</span> a, b, c, d;<br>      cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;<br>      E[b].<span class="hljs-built_in">push_back</span>(&#123;d, c * <span class="hljs-number">1.0</span> / a&#125;);<br>   &#125;<br><br>   <span class="hljs-type">double</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">1e9</span>;<br><br>   <span class="hljs-keyword">while</span> (r - l &gt; <span class="hljs-number">1e-15</span>) &#123;<br>      <span class="hljs-keyword">auto</span> m = (l + r) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(n, m)) &#123;<br>         l = m;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         r = m;<br>      &#125;<br>   &#125;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.15lf\n&quot;</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-link-with-monotonic-subsequence"><a class="markdownIt-Anchor" href="#g-link-with-monotonic-subsequence"></a> G Link with Monotonic Subsequence</h2><p>数学（？）</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>给定n，输出一个n的排列，使得这个排列的最长上升子序列与最长下降子序列的长度最大值最小；</p><p>暴力输出找规律：发现将n个数分成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mrow><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{(n)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.30499999999999994em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-2.8950000000000005em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30499999999999994em;"><span></span></span></span></span></span></span></span></span> 个块，变成形如：789456123的形式，符合题目要求；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,n,p,ct,bas;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n;<br>        p=<span class="hljs-built_in">sqrt</span>(n)+<span class="hljs-number">1</span><span class="hljs-number">-1e-4</span>;<br>        bas=<span class="hljs-number">0</span>,ct=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(ct&lt;n)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(ct%p==<span class="hljs-number">0</span>)bas=<span class="hljs-built_in">min</span>(bas+p,n);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,bas-ct%p);<br>            ct++;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-take-the-elevator"><a class="markdownIt-Anchor" href="#h-take-the-elevator"></a> H Take the Elevator</h2><p>贪心</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>k层大楼，n个人在等电梯，电梯最多同时装m人，电梯只有在一层时可以由下行切换至上行，反向切换不受限制，电梯上一层或下一层均消耗一单位时间，乘客上下电梯不消耗时间，从一层开始，求最少用多少时间运送完成回到一层；</p><p>将上行和下行分开考虑，认为一趟先处理上行，再处理下行；分开考虑后，上行下行没有本质区别，我们也将上行部分调转为下行形式（即较低层下，较高层上）；</p><p>对于下行（上行亦然），我们使用贪心策略，优先处理欲到达最高层的乘客，以减少电梯访问高层的次数；我们记录每轮运输上下行所到达的最高层，并在上下行中取最大值来计算此轮运输时间，累计所有运输轮即为答案；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pir make_pair</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, m, k, u, v;<br>vector&lt;pii&gt; up, down;<br>vector&lt;<span class="hljs-type">int</span>&gt; up_set, down_set;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(pii a, pii b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (a.first == b.first)<br>        <span class="hljs-keyword">return</span> a.second &lt; b.second;<br>    <span class="hljs-keyword">return</span> a.first &gt; b.first;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        <span class="hljs-keyword">if</span> (u &lt; v)<br>            up.<span class="hljs-built_in">push_back</span>(&#123;u, <span class="hljs-number">-1</span>&#125;), up.<span class="hljs-built_in">push_back</span>(&#123;v, <span class="hljs-number">1</span>&#125;);<br>        <span class="hljs-keyword">else</span><br>            down.<span class="hljs-built_in">push_back</span>(&#123;u, <span class="hljs-number">1</span>&#125;), down.<span class="hljs-built_in">push_back</span>(&#123;v, <span class="hljs-number">-1</span>&#125;);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(up.<span class="hljs-built_in">begin</span>(), up.<span class="hljs-built_in">end</span>(), cmp);<br>    <span class="hljs-built_in">sort</span>(down.<span class="hljs-built_in">begin</span>(), down.<span class="hljs-built_in">end</span>(), cmp);<br><br>    <span class="hljs-type">int</span> nowcnt = <span class="hljs-number">0</span>, up_turn = <span class="hljs-number">0</span>, down_turn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : up)<br>    &#123;<br>        nowcnt += p.second;<br>        <span class="hljs-keyword">if</span> (nowcnt &gt; up_turn * m)<br>            up_set.<span class="hljs-built_in">push_back</span>(p.first), up_turn++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : down)<br>    &#123;<br>        nowcnt += p.second;<br>        <span class="hljs-keyword">if</span> (nowcnt &gt; down_turn * m)<br>            down_set.<span class="hljs-built_in">push_back</span>(p.first), down_turn++;<br>    &#125;<br><br>    <span class="hljs-type">int</span> allturns = <span class="hljs-built_in">max</span>(up_turn, down_turn);<br>    <span class="hljs-keyword">while</span> (up_turn &lt; allturns)<br>        up_set.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>), up_turn++;<br>    <span class="hljs-keyword">while</span> (down_turn &lt; allturns)<br>        down_set.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>), down_turn++;<br><br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; allturns; i++)<br>        ans += <span class="hljs-number">2ll</span> * (<span class="hljs-built_in">max</span>(up_set[i], down_set[i]) - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-link-with-arithmetic-progression"><a class="markdownIt-Anchor" href="#j-link-with-arithmetic-progression"></a> J Link with Arithmetic Progression</h2><p>数学</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>给定一些点，拟合直线使得方差最小；</p><p>最小二乘法拟合直线，注意精度；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> ld;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">998244353</span>;<br>ld a[<span class="hljs-number">100005</span>];<br><span class="hljs-keyword">namespace</span> GTI<br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">gc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">int</span> S = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>;<br>        <span class="hljs-type">static</span> <span class="hljs-type">char</span> buf[S], *s = buf, *t = buf;<br>        <span class="hljs-keyword">if</span> (s == t)<br>            t = buf + <span class="hljs-built_in">fread</span>(s = buf, <span class="hljs-number">1</span>, S, stdin);<br>        <span class="hljs-keyword">if</span> (s == t)<br>            <span class="hljs-keyword">return</span> EOF;<br>        <span class="hljs-keyword">return</span> *s++;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gti</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>, c = <span class="hljs-built_in">gc</span>();<br>        <span class="hljs-keyword">for</span> (; !<span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">gc</span>())<br>            b ^= (c == <span class="hljs-string">&#x27;-&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (; <span class="hljs-built_in">isdigit</span>(c); c = <span class="hljs-built_in">gc</span>())<br>            a = a * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">return</span> b ? a : -a;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">using</span> GTI::gti;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-comment">// cin &gt;&gt; t;</span><br>    t=<span class="hljs-built_in">gti</span>();<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n;<br>        ll tmp;<br>        <span class="hljs-comment">// cin &gt;&gt; n;</span><br>        n=<span class="hljs-built_in">gti</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-comment">// scanf(&quot;%Lf&quot;, &amp;a[i]);</span><br>            a[i]=<span class="hljs-built_in">gti</span>();<br>        &#125;<br>        ld A, B, C, D;<br>        A = B = C = D = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            A += (ld)i * i;<br>            B += (ld)i;<br>            C += (ld)i * a[i];<br>            D += a[i];<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-type">double</span> k = (<span class="hljs-type">long</span> <span class="hljs-type">double</span>)(C * n - B * D) / (A * n - B * B);<br>        <span class="hljs-type">long</span> <span class="hljs-type">double</span> b = (<span class="hljs-type">long</span> <span class="hljs-type">double</span>)(D - k * B) / n;<br>        <span class="hljs-type">long</span> <span class="hljs-type">double</span> cst = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">double</span> tmp = (a[i] - (ld)i * k - b);<br>            cst += tmp * tmp;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.16Lf\n&quot;</span>, cst);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="k-link-with-bracket-sequence-i"><a class="markdownIt-Anchor" href="#k-link-with-bracket-sequence-i"></a> K Link with Bracket Sequence I</h2><p>DP</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>给定长度为n的括号串a，求长度为m的合法括号串中，a为其子序列的个数；</p><p><s>真的没看出来是DP</s></p><p>构造状态表示：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span> 为长度为i的括号串中，a的j长前缀串是当前串的子序列，且左括号比右括号多k个 的方案数；<br />定义初态：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dp[0][0][0]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；<br />构造状态转移方程：<br />试着打了半天，找不到比代码更优雅的表现形式，大体上就是分别考虑加左括号和右括号来到达目前的k值，如果a串的对应位与当前考虑的不符，则变为更新<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j-1][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> ld;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>ll dp[<span class="hljs-number">202</span>][<span class="hljs-number">202</span>][<span class="hljs-number">102</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n, m;<br>        cin &gt;&gt; n &gt;&gt; m;<br>        string a;<br>        cin &gt;&gt; a;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-built_in">min</span>(i + <span class="hljs-number">1</span>, m - i + <span class="hljs-number">1</span>); k++)<br>                &#123;<br>                    dp[i][j][k] = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">min</span>(n+<span class="hljs-number">1</span>, i); j++)<br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-built_in">min</span>(i + <span class="hljs-number">1</span>, m - i + <span class="hljs-number">1</span>); k++)<br>                &#123;<br>                    <span class="hljs-comment">// 加右括号</span><br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (a[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;)&#x27;</span>)<br>                            dp[i][j][k] = (dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][k + <span class="hljs-number">1</span>] + dp[i][j][k]) % M;<br>                        <span class="hljs-keyword">else</span><br>                            dp[i][j - <span class="hljs-number">1</span>][k] = (dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][k + <span class="hljs-number">1</span>] + dp[i][j - <span class="hljs-number">1</span>][k]) % M;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 加左括号</span><br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (a[j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;(&#x27;</span>)<br>                            dp[i][j][k] = (dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][k - <span class="hljs-number">1</span>] + dp[i][j][k]) % M;<br>                        <span class="hljs-keyword">else</span><br>                            dp[i][j - <span class="hljs-number">1</span>][k] = (dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][k - <span class="hljs-number">1</span>] + dp[i][j - <span class="hljs-number">1</span>][k]) % M;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// for (int i = 1; i &lt;= m; i++)</span><br>        <span class="hljs-comment">// &#123;</span><br>        <span class="hljs-comment">//     for (int j = 0; j &lt;= n; j++)</span><br>        <span class="hljs-comment">//     &#123;</span><br>        <span class="hljs-comment">//         for (int k = 0; k &lt;= m; k++)</span><br>        <span class="hljs-comment">//             printf(&quot;%lld* &quot;, dp[i][j][k]);</span><br>        <span class="hljs-comment">//         printf(&quot;\n&quot;);</span><br>        <span class="hljs-comment">//     &#125;</span><br>        <span class="hljs-comment">//     printf(&quot;\n&quot;);</span><br>        <span class="hljs-comment">// &#125;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, dp[m][n][<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l-link-with-level-editor-i"><a class="markdownIt-Anchor" href="#l-link-with-level-editor-i"></a> L Link with Level Editor I</h2><p>DP</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>给定n张有向图，m个点，从某一张图的1号点出发，每次可以选择在此张图中沿边运动，或者变化到下一张图的同编号点；求这些图中，从1号店到m号点的一条路径里，最少经过图的数量；</p><p><s>真的没看出来是DP</s></p><p>构造状态表示：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][u]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span></span></span></span> 表示在前 i 张图中，能通到第 i 张图的 u 点的最后一个1号点所在图编号；<br />构造初态：初值为0；<br />构造状态表示：对于边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>→</mo><mi>u</mi></mrow><annotation encoding="application/x-tex">v\to u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> ， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>v</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][u]=max(dp[i-1][u],dp[i-1][v])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> ；<br />对于边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>→</mo><mi>u</mi></mrow><annotation encoding="application/x-tex">1\to u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> ， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>u</mi><mo stretchy="false">]</mo><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">dp[i][u]=i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> ；<br />每个图接收完成后更新答案；</p><p>介于内存限制，可以使用滚动数组只保留两层dp数组；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">2</span>][<span class="hljs-number">2010</span>], ans = <span class="hljs-number">100000000</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, r, u, v, now = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++)<br>            dp[now][j] = dp[now ^ <span class="hljs-number">1</span>][j];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;r);<br>        <span class="hljs-keyword">while</span> (r--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            <span class="hljs-keyword">if</span> (u == <span class="hljs-number">1</span>)<br>                dp[now][v] = i;<br>            <span class="hljs-keyword">else</span><br>                dp[now][v] = <span class="hljs-built_in">max</span>(dp[now ^ <span class="hljs-number">1</span>][u], dp[now][v]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dp[now][m])<br>            ans = <span class="hljs-built_in">min</span>(ans, i - dp[now][m] + <span class="hljs-number">1</span>);<br>        now ^= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">100000000</span>)<br>        cout &lt;&lt; <span class="hljs-number">-1</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>看了题解之后，发现B题是会做的，所谓多边形面积交并不存在，只不过是半平面交罢了，在A掉这道题之前还需要试验一下半平面交板子在空集情况下的表现，争取在下一场比赛之前处理掉；</p><p>B已AC已更新；</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022牛客暑期多校训练营1（ACDGIJ）</title>
    <link href="/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51%EF%BC%88ACDGIJ%EF%BC%89/"/>
    <url>/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A51%EF%BC%88ACDGIJ%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33186">题集链接</a>；</p><p><a href="https://ac.nowcoder.com/discuss/992452">文字题解</a>、<a href="https://www.bilibili.com/video/BV1Ve4y1d74j">视频题解</a>；<br /><ul class="markdownIt-TOC"><li><a href="#a-villages-landlines">A Villages: Landlines</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#c-grab-the-seat">C Grab the Seat!</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#d-mocha-and-railgun">D Mocha and Railgun</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#g-lexicographical-maximum">G Lexicographical Maximum</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#i-chiitoitsu">I Chiitoitsu</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#j-serval-and-essay">J Serval and Essay</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="a-villages-landlines"><a class="markdownIt-Anchor" href="#a-villages-landlines"></a> A Villages: Landlines</h2><p>区间和并</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>一维线上有若干个建筑物，每个建筑物有自己的覆盖范围，问所有建筑物间空白区域长度（题目描述有些复杂了）；</p><p>每个建筑物对应了一段区间，求出合并后区间间的长度即可；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>pair&lt;ll, ll&gt; ps[<span class="hljs-number">200005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    ll p, q;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;p, &amp;q);<br>        ps[i].first = p - q, ps[i].second = p + q;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(ps + <span class="hljs-number">1</span>, ps + n + <span class="hljs-number">1</span>);<br>    ll l, r, ans = <span class="hljs-number">0</span>;<br>    l = ps[<span class="hljs-number">1</span>].first, r = ps[<span class="hljs-number">1</span>].second;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ps[i].first &lt;= r)<br>            r = <span class="hljs-built_in">max</span>(ps[i].second, r);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ans += ps[i].first - r;<br>            l = ps[i].first, r = ps[i].second;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-grab-the-seat"><a class="markdownIt-Anchor" href="#c-grab-the-seat"></a> C Grab the Seat!</h2><p>计算几何（？）</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p><em>文字描述比较繁琐~</em><br />以样例2的第一次变化为例：<br /><img src="https://s2.loli.net/2022/08/25/IYhTqRNJgDvSZAQ.png" alt="image.png" /></p><p>我们可以观察到，灰色区域的所有点（含边界）都不是好点，而影响灰色边界范围的，仅是每一行最靠前的一个有人位；</p><p>我们将灰色区域的“可变边界”（由有人位贡献的边界）划分成红色和青色两部分，然后可以通过从下至上和从上至下两次遍历维护每行的好点数；</p><p>对于每次遍历，我们只需要记录已遍历部分中斜率最大/最小的边界线，由其与此行的交点坐标限定此行的好点数。在维护边界线时，注意边界情况（斜率为0）；</p><p>两次遍历后，累加每行的好点数即可得到答案，每次查询的时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> ld;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; p[<span class="hljs-number">200005</span>];<br>set&lt;<span class="hljs-type">int</span>&gt; lne[<span class="hljs-number">200005</span>];<br>ll bar[<span class="hljs-number">200005</span>];<br><span class="hljs-function">ll <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> mnl = n + <span class="hljs-number">1</span>, mxl = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        bar[i] = n;<br>        <span class="hljs-keyword">if</span> (!lne[i].<span class="hljs-built_in">empty</span>())<br>            mnl = <span class="hljs-built_in">min</span>(mnl, i), mxl = <span class="hljs-built_in">max</span>(mxl, i);<br>    &#125;<br>    pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; now = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!lne[i].<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; tmp = &#123;(<span class="hljs-type">double</span>)*lne[i].<span class="hljs-built_in">begin</span>(), (<span class="hljs-type">double</span>)i&#125;;<br>            <span class="hljs-keyword">if</span> ((tmp.second - <span class="hljs-number">1</span>) / tmp.first &gt; (now.second - <span class="hljs-number">1</span>) / now.first)<br>                now = tmp;<br>        &#125;<br>        ll lim = n;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(now.second) &gt; eps) <span class="hljs-comment">//边界点有效</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(now.second - <span class="hljs-number">1</span>) &gt; eps) <span class="hljs-comment">//边界点不临边</span><br>                lim = (i - <span class="hljs-number">1.0</span>) * now.first / (now.second - <span class="hljs-number">1</span>) - eps;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) <span class="hljs-comment">//边界点临边且该行为边</span><br>            &#123;<br>                lim = now.first - <span class="hljs-number">1</span> + eps;<br>            &#125;<br>            bar[i] = <span class="hljs-built_in">min</span>(bar[i], lim);<br>        &#125;<br>        <span class="hljs-comment">// printf(&quot;\\%d\n&quot;, bar[i]);</span><br>    &#125;<br>    now = &#123;<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m; i &gt;= <span class="hljs-number">1</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!lne[i].<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; tmp = &#123;(<span class="hljs-type">double</span>)*lne[i].<span class="hljs-built_in">begin</span>(), (<span class="hljs-type">double</span>)i&#125;;<br>            <span class="hljs-keyword">if</span> ((tmp.second - m) / tmp.first &lt; (now.second - m) / now.first)<br>                now = tmp;<br>        &#125;<br>        ll lim = n;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(now.second - m - <span class="hljs-number">1</span>) &gt; eps) <span class="hljs-comment">//边界点有效</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(now.second - m) &gt; eps) <span class="hljs-comment">//边界点不临边</span><br>                lim = (i - m) * now.first / (now.second - m) - eps;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == m) <span class="hljs-comment">//边界点临边且该行为边</span><br>            &#123;<br>                lim = now.first - <span class="hljs-number">1</span> + eps;<br>            &#125;<br>            bar[i] = <span class="hljs-built_in">min</span>(bar[i], lim);<br>        &#125;<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-comment">// printf(&quot;*%d\n&quot;, bar[i]);</span><br>        ans += bar[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, k, q;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;p[i].first, &amp;p[i].second);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        lne[p[i].second].<span class="hljs-built_in">insert</span>(p[i].first);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; tmp;<br>        <span class="hljs-type">int</span> cg;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;cg, &amp;tmp.first, &amp;tmp.second);<br>        lne[p[cg].second].<span class="hljs-built_in">erase</span>(p[cg].first);<br>        p[cg] = tmp;<br>        lne[tmp.second].<span class="hljs-built_in">insert</span>(tmp.first);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">cnt</span>(n, m));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-mocha-and-railgun"><a class="markdownIt-Anchor" href="#d-mocha-and-railgun"></a> D Mocha and Railgun</h2><p>计算几何</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>有一个以原点为圆心，半径给定的圆，圆内给定一个点Q和长度d，以Q为中点，2d为长度在圆内构造线段（数据保证线段一定不会出圆），问能够投影在线段某一侧（无所谓）的圆周最大长度；</p><p>不难想象（没有进行证明），在线段方向为径向时，题求长度最长；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> ld;<br><span class="hljs-type">const</span> ld eps = <span class="hljs-number">1e-12</span>;<br><span class="hljs-type">const</span> ld PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sign</span><span class="hljs-params">(ld x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(x) &lt; eps)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        ld r, x, y, d, dis1, dis2;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%Lf%Lf%Lf%Lf&quot;</span>, &amp;r, &amp;x, &amp;y, &amp;d);<br>        <span class="hljs-type">double</span> disq = <span class="hljs-built_in">sqrt</span>(x * x + y * y);<br>        dis1 = disq - d;<br>        dis2 = disq + d;<br>        ld ac1, ac2;<br>        ac1 = <span class="hljs-built_in">acos</span>(dis1 / r);<br>        ac2 = <span class="hljs-built_in">acos</span>(dis2 / r);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12Lf\n&quot;</span>, (ac1 - ac2) * r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-lexicographical-maximum"><a class="markdownIt-Anchor" href="#g-lexicographical-maximum"></a> G Lexicographical Maximum</h2><p>贪心</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>给定一个数字，求小于等于它的数字中，字典序最大的数字；</p><p>贪心策略：如果该数满足除最后一位外都为9，则输出该数。否则输出相比此数少一位的9；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string s;<br>    cin &gt;&gt; s;<br>    <span class="hljs-type">bool</span> f = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i != s.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (s[i] != <span class="hljs-string">&#x27;9&#x27;</span>)<br>        &#123;<br>            f = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (f)<br>        cout &lt;&lt; s &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i != s.<span class="hljs-built_in">length</span>() - <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            cout &lt;&lt; <span class="hljs-number">9</span>;<br>        &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-chiitoitsu"><a class="markdownIt-Anchor" href="#i-chiitoitsu"></a> I Chiitoitsu</h2><p>概率期望</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>一副牌有34种牌，每种四张，在排队中给出13张初始手牌，保证初始手牌中相同的牌不超过两张；</p><p>每轮做如下操作：</p><ol><li>在牌堆中随机抽出一张牌，加入手牌；</li><li>如果手牌中满足有不同种类的7对相同牌（11，33，22，77，99……）则结束游戏；</li><li>否则弃掉一张牌，保持13张手牌；</li></ol><p>给出初始手牌，问最优（最快结束）策略下结束游戏的轮数期望；</p><p>对于给定两个参数：牌堆剩余牌数l &amp; 待配对牌数n，对于所有l,n相同的情况，此时到游戏结束的轮数期望也相同；</p><p>我们定义给定l,n的轮数期望为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>l</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(l,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ，则有递归式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>l</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mn>3</mn><mi>n</mi></mrow><mi>l</mi></mfrac><mi>f</mi><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>else</mtext></mstyle></mtd></mtr></mtable></mrow><mo>+</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>l</mi><mo>−</mo><mn>3</mn><mi>n</mi></mrow><mi>l</mi></mfrac><mi>f</mi><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi>l</mi><mo>&gt;</mo><mn>3</mn><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>else</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(l,n)=1+\begin{cases}\frac{3n}{l}f(l-1,n-2)&amp;\text{if }n&gt;1\\0&amp;\text{else}\end{cases}+\begin{cases}\frac{l-3n}{l}f(l-1,n)&amp;\text{if }l&gt;3n\\0&amp;\text{else}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">else</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">−</span><span class="mord mtight">3</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mord mathdefault">n</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">else</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>直观来说，前面的cases描述的是抽到待配对牌中的一张，后面的cases描述的是没有抽到；</p><p>记忆化存储 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>l</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(l,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的值即可；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> ld;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b = M - <span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a % M;<br>        a = a * a % M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br>ll tab[<span class="hljs-number">150</span>][<span class="hljs-number">14</span>];<br><span class="hljs-function">ll <span class="hljs-title">f</span><span class="hljs-params">(ll lft, ll ndd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tab[lft][ndd])<br>        <span class="hljs-keyword">return</span> tab[lft][ndd];<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (ndd &gt; <span class="hljs-number">1</span>)<br>        ans += <span class="hljs-number">3</span> * ndd * <span class="hljs-built_in">qm</span>(lft) % M * <span class="hljs-built_in">f</span>(lft - <span class="hljs-number">1</span>, ndd - <span class="hljs-number">2</span>) % M;<br>    <span class="hljs-keyword">if</span> (lft &gt; <span class="hljs-number">3</span> * ndd)<br>        ans += (lft - <span class="hljs-number">3</span>*ndd) * <span class="hljs-built_in">qm</span>(lft) % M * <span class="hljs-built_in">f</span>(lft - <span class="hljs-number">1</span>, ndd) % M;<br>    ans %= M;<br>    <span class="hljs-keyword">return</span> tab[lft][ndd] = ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,tt=<span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        string g;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        map&lt;string, <span class="hljs-type">int</span>&gt; mp;<br>        cin &gt;&gt; g;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; g[i]; i += <span class="hljs-number">2</span>)<br>        &#123;<br>            mp[g.<span class="hljs-built_in">substr</span>(i, <span class="hljs-number">2</span>)]++;<br>            <span class="hljs-keyword">if</span> (mp[g.<span class="hljs-built_in">substr</span>(i, <span class="hljs-number">2</span>)] == <span class="hljs-number">2</span>)<br>                cnt++;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %lld\n&quot;</span>, tt++, <span class="hljs-built_in">f</span>(<span class="hljs-number">123</span>, <span class="hljs-number">13</span> - <span class="hljs-number">2</span> * cnt));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-serval-and-essay"><a class="markdownIt-Anchor" href="#j-serval-and-essay"></a> J Serval and Essay</h2><p><s>拓扑排序</s> 并查集</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>给出一个无重边自环的有向图，选定某一点作为起点，以拓扑排序的逻辑进行扩展，求出扩展后点数最大值；</p><p>拓扑排序优化失败，之后并查集暴力过；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">double</span> ld;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-6</span>;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; rod[<span class="hljs-number">200005</span>];<br><span class="hljs-type">int</span> cnt[<span class="hljs-number">200005</span>];<span class="hljs-comment">//cnt实际无意义</span><br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; bel[<span class="hljs-number">200005</span>];<br><span class="hljs-type">int</span> ord[<span class="hljs-number">200005</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> v = <span class="hljs-number">0</span>, c = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(ch))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            c = <span class="hljs-number">-1</span>;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(ch))<br>    &#123;<br>        v = v * <span class="hljs-number">10</span> + ch - <span class="hljs-number">48</span>;<br>        ch = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> v * c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (bel[x].first == x)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> bel[x].first = <span class="hljs-built_in">find</span>(bel[x].first);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(x) != x || rod[x].<span class="hljs-built_in">empty</span>()) <span class="hljs-comment">//如果该点不独立或这个点没有父节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> now = <span class="hljs-built_in">find</span>(rod[x][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> v : rod[x]) <span class="hljs-comment">//判断是否所有父节点都在一个集合里</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (now != <span class="hljs-built_in">find</span>(v))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (now == x) <span class="hljs-comment">//判断父节点是否与自己在一个集合</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t, n, k, q, tt = <span class="hljs-number">1</span>;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            rod[i].<span class="hljs-built_in">clear</span>(), bel[i] = &#123;i, <span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-comment">// scanf(&quot;%d&quot;, &amp;cnt[i]);</span><br>            cnt[i] = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt[i]; j++)<br>            &#123;<br>                q = <span class="hljs-built_in">read</span>();<br>                rod[i].<span class="hljs-built_in">push_back</span>(q);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            ord[i] = i;<br>        &#125;<br>        <span class="hljs-comment">// random_shuffle(ord + 1, ord + n + 1);随机化后会超时</span><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-comment">// printf(&quot;*&quot;);</span><br>            <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            &#123;<br>                <span class="hljs-type">int</span> nw = ord[i];<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(nw)) <span class="hljs-comment">//判断这个点能否进行合并</span><br>                &#123;<br>                    flag = <span class="hljs-number">1</span>;<br>                    <span class="hljs-type">int</span> f = <span class="hljs-built_in">find</span>(rod[nw][<span class="hljs-number">0</span>]);<br>                    bel[nw].first = f;<br>                    bel[f].second += bel[nw].second;<br>                    ans=<span class="hljs-built_in">max</span>(bel[f].second,ans);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag) <span class="hljs-comment">//如果所有点都不能进行合并，结束</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// for (int i = 1; i &lt;= n; i++)</span><br>        <span class="hljs-comment">//     ans = max(ans, bel[i].second);</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %d\n&quot;</span>, tt++, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//参考https://ac.nowcoder.com/acm/contest/view-submission?submissionId=52793209</span><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><ol><li>该学数学了，不然H补不了；</li><li>这场题解不太好写，也许和我太长时间没写题解有关系；</li><li>14159；</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ECS Ubuntu20.04配置和删除swap虚拟内存</title>
    <link href="/2022.07-12/ECS%20Ubuntu20.04%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%A0%E9%99%A4swap%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <url>/2022.07-12/ECS%20Ubuntu20.04%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%A0%E9%99%A4swap%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Wz411i7Qh">参考1</a>、<a href="https://blog.csdn.net/qq_33505611/article/details/110501166">参考2</a><br />本文章仅作个人参考之用，恕才疏学浅，作者对文章内容不负责；</p><h2 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h2><p>为解决内存不足的问题，将一部分硬盘空间当作内存之用；</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><ol><li>确定设置，输入<code>:~# free -m</code>，返回值中swap行若为 0 0 0 则说明没有设置虚拟内存；</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">              <span class="hljs-attribute">total</span>        used        free      shared  buff/cache   available<br><span class="hljs-attribute">Mem</span>:           <span class="hljs-number">1983</span>         <span class="hljs-number">658</span>         <span class="hljs-number">469</span>          <span class="hljs-number">27</span>         <span class="hljs-number">854</span>        <span class="hljs-number">1124</span><br><span class="hljs-attribute">Swap</span>:             <span class="hljs-number">0</span>           <span class="hljs-number">0</span>           <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ol start="2"><li>通过<code>:~# cd /</code>进入根目录，<code>:/# mkdir swap</code>新建一个名为swap的文件夹，<code>:/# cd swap</code>进入该文件夹；</li><li>此文件夹内输入<code>:/swap# dd if=/dev/zero of=swapfile bs=1024 count=1048576</code>以创建交换分区文件，其中bs是分块的大小（单位为B），count为分块的个数（交换分区建议大小详见参考2）；有返回内容如下</li></ol><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1048576</span>+<span class="hljs-number">0</span> records in<br><span class="hljs-number">1048576</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">out</span><br><span class="hljs-symbol">1073741824 </span>bytes (<span class="hljs-number">1.1</span> GB, <span class="hljs-number">1.0</span> GiB) copied, <span class="hljs-number">7.56452</span> s, <span class="hljs-number">142</span> MB/s<br></code></pre></td></tr></table></figure><ol start="4"><li>输入<code>:/swap# sudo mkswap swapfile</code>将生成的文件转换为swap文件；有返回内容如下</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkswap</span>: swapfile: insecure permissions <span class="hljs-number">0644</span>, <span class="hljs-number">0600</span> suggested.<br><span class="hljs-attribute">Setting</span> up swapspace version <span class="hljs-number">1</span>, size = <span class="hljs-number">1024</span> MiB (<span class="hljs-number">1073737728</span> bytes)<br><span class="hljs-attribute">no</span> label, UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx<br></code></pre></td></tr></table></figure><ol start="5"><li>输入<code>:/swap# sudo swapon swapfile</code>激活swap文件；有返回内容如下</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">swapon: /swap/swapfile:</span> <span class="hljs-string">insecure</span> <span class="hljs-string">permissions</span> <span class="hljs-number">0644</span><span class="hljs-string">,</span> <span class="hljs-number">0600 </span><span class="hljs-string">suggested.</span><br></code></pre></td></tr></table></figure><ol start="6"><li>此时输入<code>:/swap# free -m</code>则可以观察到虚拟内存已开启；</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">              <span class="hljs-attribute">total</span>        used        free      shared  buff/cache   available<br><span class="hljs-attribute">Mem</span>:           <span class="hljs-number">1983</span>         <span class="hljs-number">658</span>          <span class="hljs-number">73</span>          <span class="hljs-number">27</span>        <span class="hljs-number">1250</span>        <span class="hljs-number">1118</span><br><span class="hljs-attribute">Swap</span>:          <span class="hljs-number">1023</span>           <span class="hljs-number">0</span>        <span class="hljs-number">1023</span><br></code></pre></td></tr></table></figure><ol start="7"><li>为了设置系统启动时自动开启swap，我们需要编辑fstab文件，用编辑器打开该文件<code>:/swap# sudo vim /etc/fstab</code></li><li>在最后一行加入<code>/swap swap defaults 0 0</code>后保存并退出；</li></ol><h2 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h2><ol><li>在swap目录下，执行<code>:/swap# sudo swapoff -v swapfile</code>，有返回内容如下</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">swapoff swapfile</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在fstab文件中删除相关行；</li><li>删除swap文件夹<code>/# rm -rf swap</code>；</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ECS Ubuntu20.04配置vsftpd</title>
    <link href="/2022.07-12/ECS%20Ubuntu20.04%E9%85%8D%E7%BD%AEvsftpd/"/>
    <url>/2022.07-12/ECS%20Ubuntu20.04%E9%85%8D%E7%BD%AEvsftpd/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Wz411i7Qh">参考1</a>、<a href="https://blog.csdn.net/MyLovelyJay/article/details/88046476">参考2</a><br />本文章仅作个人参考之用，恕才疏学浅，作者对文章内容不负责；</p><p><em>本文图片均链自CSDN</em></p><h2 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h2><p>为更方便地对ECS进行文件管理和文件传输，现通过 Ubuntu 中的 vsftpd 和 Windows 端的 FileZilla 进行 FTP 连接；</p><h2 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h2><h4 id="服务器端"><a class="markdownIt-Anchor" href="#服务器端"></a> 服务器端</h4><ol><li>通过<code>:~# sudo apt update</code>和<code>:~# sudo apt upgrade</code>更新软件列表；</li><li>检查安装，输入<code>:~# sudo service vsftpd start</code>来确定目前是否安装。若需要安装，则有返回</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">start</span> vsftpd.service: Unit vsftpd.service <span class="hljs-keyword">not</span> <span class="hljs-built_in">found</span>.<br></code></pre></td></tr></table></figure><ol start="3"><li>通过<code>:~# sudo apt install vsftpd</code>安装vsftpd；</li><li>先执行<code>:~# cp /etc/vsftpd.conf /etc/vsftpd.conf.bk</code>来备份vsftpd配置文件；</li><li>通过编辑器打开vsftpd.conf，<code>:~# sudo vim /etc/vsftpd.conf</code>；</li><li>在编辑器中找到如下行，删去#以解注释；</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#write_enable=YES</span><br></code></pre></td></tr></table></figure><ol start="7"><li>接下来在文末添加三行新的内容后，退出编辑器<br /><code>pasv_enable=yes</code><br /><code>pasv_min_port=10000</code><br /><code>pasv_max_port=10099</code></li><li>防火墙开放tcp端口 10000/10099 和端口21</li><li>为了更安全地使用FTP服务，我们新建一个用户专门用于使用FTP（此处使用用户名tmp指代新用户），输入<code>sudo adduser tmp</code>以新建用户tmp。在设置密码，填入用户信息后完成新建；</li><li>输入<code>:~# sudo service vsftpd start</code>以启动；</li></ol><h4 id="pc端"><a class="markdownIt-Anchor" href="#pc端"></a> PC端</h4><ol start="11"><li><p>通过<a href="https://www.filezilla.cn/">官网</a>来下载 FileZilla 并安装；</p></li><li><p>运行后在此处打开站点管理器<br /><img src="https://img-blog.csdnimg.cn/23a7f0b3f86f4abab3ea85c67147d12a.png" alt="在这里插入图片描述" /></p></li><li><p>打开站点管理器后<br /><img src="https://img-blog.csdnimg.cn/f7cdcc37c47940d6b10328aa8c28b617.png" alt="在这里插入图片描述" /></p></li><li><p>填表后，点击连接，即可浏览和操作ECS的文件夹<br /><img src="https://img-blog.csdnimg.cn/f9080f5ac5c24ac8974901ac045fcd35.png" alt="在这里插入图片描述" /></p></li><li><p>若报错<code>服务器发回了不可路由的地址，使用服务器地址代替</code>，有解决方法：更改Filezilla设置，编辑 - 设置 - 连接-FTP-被动模式，将“使用服务器的外部IP地址来代替”改为“回到主动模式”即可；</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Serval and Rooted Tree（CF1153D）-DP</title>
    <link href="/2022.01-06/Serval%20and%20Rooted%20Tree%EF%BC%88CF1153D%EF%BC%89-DP/"/>
    <url>/2022.01-06/Serval%20and%20Rooted%20Tree%EF%BC%88CF1153D%EF%BC%89-DP/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1153/D">题目链接</a>；<br /><a href="https://blog.csdn.net/laysan/article/details/123805810">参考</a>；</p><h2 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h2><p>对于一个有 k 个叶子的max min操作树，在 k 个叶子中填入1~k，求树根的最大值；</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>由于题目中不要求输出填充结果，我们可以使用“第几大”来标记大小：对于max节点，其节点值为子节点的最小值，对于min节点，其节点值为子节点的和；在这个过程中，我们压缩掉了很多无用的信息，简化了问题；</p><p>定义状态表示：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 为在以 i 为根节点的子树中，i 的值为子树中的第几大；</p><p>定义初值：对于叶子节点 i ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f[i]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ；</p><p>定义状态转移方程：<br />对于max节点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mtext>min</mtext><mrow><mi>j</mi><mtext> is son</mtext></mrow></msub><mi>f</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i]=\text{min}_{j\text{ is son}}f[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord text"><span class="mord">min</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.317502em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord text mtight"><span class="mord mtight"> is son</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> ；<br />对于min节点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>j</mi><mtext> is son</mtext></mrow></msub><mi>f</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i]=\sum_{j\text{ is son}}f[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.185818em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16779199999999994em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord text mtight"><span class="mord mtight"> is son</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> ；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> op[<span class="hljs-number">300005</span>], f[<span class="hljs-number">300005</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; sn[<span class="hljs-number">300005</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (sn[x].<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        f[x] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> fmx = <span class="hljs-number">1000006</span>, fmn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> m : sn[x])<br>    &#123;<br>        <span class="hljs-built_in">dfs</span>(m);<br>        fmx = <span class="hljs-built_in">min</span>(fmx, f[m]);<br>        fmn += f[m];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (op[x])<br>        f[x] = fmx;<br>    <span class="hljs-keyword">else</span><br>        f[x] = fmn;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, tmp;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;op[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tmp), sn[tmp].<span class="hljs-built_in">push_back</span>(i);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (sn[i].<span class="hljs-built_in">empty</span>())<br>            k++;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    cout &lt;&lt; k - f[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
      <category>图与树</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Two Merged Sequences（CF 1144 G）（将序列拆分成升序序列和降序序列两部分）-DP</title>
    <link href="/2022.01-06/Two%20Merged%20Sequences%EF%BC%88CF%201144%20G%EF%BC%89%EF%BC%88%E5%B0%86%E5%BA%8F%E5%88%97%E6%8B%86%E5%88%86%E6%88%90%E5%8D%87%E5%BA%8F%E5%BA%8F%E5%88%97%E5%92%8C%E9%99%8D%E5%BA%8F%E5%BA%8F%E5%88%97%E4%B8%A4%E9%83%A8%E5%88%86%EF%BC%89-DP/"/>
    <url>/2022.01-06/Two%20Merged%20Sequences%EF%BC%88CF%201144%20G%EF%BC%89%EF%BC%88%E5%B0%86%E5%BA%8F%E5%88%97%E6%8B%86%E5%88%86%E6%88%90%E5%8D%87%E5%BA%8F%E5%BA%8F%E5%88%97%E5%92%8C%E9%99%8D%E5%BA%8F%E5%BA%8F%E5%88%97%E4%B8%A4%E9%83%A8%E5%88%86%EF%BC%89-DP/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1144/G">题目链接</a>；<br /><a href="https://blog.csdn.net/zhouyuheng2003/article/details/89219164">参考</a>；</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>构建状态表示：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 代表在前 i 位中，若第 i 位为升序序列结尾，此时降序序列结尾的最大值；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">op[i][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 代表若第 i 位为升序序列结尾，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>取当前值时，第 i-1 位在升序序列 / 降序序列（1升0降）；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span> 代表在前 i 位中，若第 i 位为降序序列结尾，此时升序序列结尾的最小值；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">op[i][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span> 代表若第 i 位为降序序列结尾，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>取当前值时，第 i-1 位在升序序列 / 降序序列（1升0降）；</p><p>定义初值：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mo>−</mo><mi>i</mi><mi>n</mi><mi>f</mi><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">dp[i][1]=-inf,dp[i][1]=inf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 即每一位默认是不能参与序列的，直至转移方程时满足条件才可更新；<br />特殊地， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>i</mi><mi>n</mi><mi>f</mi><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mo>−</mo><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">dp[1][1]=inf,dp[1][0]=-inf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">−</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 即第一位既可以在升序序列，也可以在降序序列；</p><p>状态转移方程：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn><mo separator="true">;</mo><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][1] = dp[i - 1][1],op[i][1] = 1;(a[i - 1] &lt; a[i] \&amp;\&amp; dp[i][1] &lt; dp[i - 1][1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 此位接在前位后做升序序列<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">;</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][1] = a[i - 1],op[i][1] = 0;(dp[i - 1][0] &lt; a[i] \&amp;\&amp; dp[i][1] &lt; a[i - 1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 前位做降序序列结尾，此位做升序序列结尾<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">;</mo><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][0] = dp[i - 1][0],op[i][0] = 0;(a[i - 1] &gt; a[i] \&amp;\&amp; dp[i][0] &gt; dp[i - 1][0])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 此位接在前位后做降序序列<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn><mo separator="true">;</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][0] = a[i - 1],op[i][0] = 1;(dp[i - 1][1] &gt; a[i] \&amp;\&amp; dp[i][0] &gt; a[i - 1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 前位做升序序列结尾，此位做降序序列结尾<br />在上面的两个限制条件中，前一个条件决定了此种情况的可行性，后一个条件决定了做出更新的必要性；</p><p>对于dp后的结果，只要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 不是初始值，即代表此种情况存在可行解，通过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">op[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 标记的方向回溯即可；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">200005</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">200005</span>][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> op[<span class="hljs-number">200005</span>][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> opt[<span class="hljs-number">200005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = inf, dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = -inf;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        dp[i][<span class="hljs-number">1</span>] = -inf, dp[i][<span class="hljs-number">0</span>] = inf;<br>        <span class="hljs-keyword">if</span> (a[i - <span class="hljs-number">1</span>] &lt; a[i] &amp;&amp; dp[i][<span class="hljs-number">1</span>] &lt; dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>        &#123;<br>            dp[i][<span class="hljs-number">1</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>            op[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] &lt; a[i] &amp;&amp; dp[i][<span class="hljs-number">1</span>] &lt; a[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            dp[i][<span class="hljs-number">1</span>] = a[i - <span class="hljs-number">1</span>];<br>            op[i][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[i - <span class="hljs-number">1</span>] &gt; a[i] &amp;&amp; dp[i][<span class="hljs-number">0</span>] &gt; dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>        &#123;<br>            dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>            op[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &gt; a[i] &amp;&amp; dp[i][<span class="hljs-number">0</span>] &gt; a[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            dp[i][<span class="hljs-number">0</span>] = a[i - <span class="hljs-number">1</span>];<br>            op[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dp[n][<span class="hljs-number">1</span>] != -inf)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n, optmp = <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>        &#123;<br>            opt[i] = optmp;<br>            optmp = op[i][optmp];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, opt[i] != <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dp[n][<span class="hljs-number">0</span>] != inf)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n, optmp = <span class="hljs-number">0</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>        &#123;<br>            opt[i] = optmp;<br>            optmp = op[i][optmp];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, opt[i] != <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>石子游戏III-博弈论</title>
    <link href="/2022.01-06/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8FIII-%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    <url>/2022.01-06/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8FIII-%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p><a href="http://oj.daimayuan.top/problem/845">代码源OJ #845. 石子游戏 III</a>；</p><p><a href="https://zhuanlan.zhihu.com/p/508781356">参考题解</a>；<br /><img src="https://s2.loli.net/2022/08/02/gRxfca4VezlK96m.png" alt="在这里插入图片描述" /></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>我们首先考虑结束前的临界情况：〇 n个堆中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>0</mn></msub><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cnt_0(cnt_0&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 个空堆，其余为非空堆，显然此时 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>0</mn></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_0&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时回合先手必输，即先手无法进行任何操作；</p><p>更进一步，每一回合操作时，回合后手可以通过选择与回合先手互异的 n/2 堆来使每一堆在本回合至少石子数减一；</p><p>那么对于① n个堆中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>1</mn></msub><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cnt_1(cnt_1&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 个一子堆，其余堆子数大于1的情况，我们可以推出如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>1</mn></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_1&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时回合先手必输，即无论回合先手如何操作，回合后手可以将局势控制到情况〇；</p><p>由此来说，对于② n个堆中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>2</mn></msub><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cnt_2(cnt_2&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 个二子堆，其余堆子数大于2的情况，我们可以推出如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>2</mn></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_2&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时回合先手必输，即若先手将最小子数刷新到1，后手就可以将局势控制到情况①，若最小子数刷新到0，后手就可以控制到情况〇；</p><p>以此类推，对于最小子数堆共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">cnt_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个时，如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>m</mi></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_m&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时回合先手必输（最小的一个数，出现的次数大于 n/2）；否则先手可以通过一次操作将最小子数堆个数更新至 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>m</mi></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_m&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> ，回合先后手调换，回合先手（全局后手）必输；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> mn=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>,n,tmp=<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n),cmn=<span class="hljs-number">0</span>,i=<span class="hljs-number">1</span>;(i&lt;=n)?<span class="hljs-number">1</span>:(<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,cmn&gt;n/<span class="hljs-number">2</span>?<span class="hljs-string">&quot;Bob&quot;</span>:<span class="hljs-string">&quot;Alice&quot;</span>),<span class="hljs-number">0</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp),(mn=(tmp&lt;mn)?cmn=<span class="hljs-number">0</span>,tmp:mn),(cmn+=(tmp==mn)?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>),i++);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数论与几何</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>长沙学院飞腾迈创杯2022年新生赛（全题解）</title>
    <link href="/2022.01-06/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2%E9%A3%9E%E8%85%BE%E8%BF%88%E5%88%9B%E6%9D%AF2022%E5%B9%B4%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/"/>
    <url>/2022.01-06/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2%E9%A3%9E%E8%85%BE%E8%BF%88%E5%88%9B%E6%9D%AF2022%E5%B9%B4%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/34092?&amp;headNav=www#description">题集链接</a>；</p><p><a href="https://ac.nowcoder.com/discuss/948546">官方题解</a>；<br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-%E5%B0%8F%E8%B4%AA%E4%B8%80%E6%89%8B">A 小贪一手</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-ab-problem-very-easy">B A+B Problem (very easy)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-alice-and-bob">C Alice and Bob</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E8%BF%9B%E5%8C%96">D 进化</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-%E9%98%B2%E7%96%AB%E7%89%A9%E8%B5%84">E 防疫物资</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-%E6%9C%89%E6%8C%82">F 有挂</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#g">G</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#h-%E7%88%B1%E7%BE%8E%E4%B9%8B%E5%BF%83%E4%BA%BA%E7%9A%86%E6%9C%89%E4%B9%8B">H 爱美之心人皆有之</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#i-%E7%AD%BE%E7%AD%BE%E7%AD%BE%E5%88%B0">I 签签签到</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>标准的新生赛，所以补得比较快~<br />下次出题的时候结构可以参考一下这场，难度分布还比较适用；</p><h2 id="a-小贪一手"><a class="markdownIt-Anchor" href="#a-小贪一手"></a> A 小贪一手</h2><p>贪心</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>出于取模的性质，我们可以直接构造~<br />由于保证了解一定存在，也不需要担心无解的问题；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-type">int</span> x,y,n;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;n);<br>        <span class="hljs-type">int</span> bas=n/x*x+y;<br>        <span class="hljs-keyword">if</span>(bas&gt;n)bas-=x;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,bas);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="b-ab-problem-very-easy"><a class="markdownIt-Anchor" href="#b-ab-problem-very-easy"></a> B A+B Problem (very easy)</h2><p>模拟，字符串处理</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>注意：题目中输入的<code>-</code>为英文的连字符，并非数学的减号；</p><p>先处理出所有合法数字的字符串对整型的映射，再在每次<code>+</code>或字符串结束时分割字符串，映射到数字并计算；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>map&lt;string, <span class="hljs-type">int</span>&gt; mp;<br>string bas[<span class="hljs-number">100</span>] = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    mp[<span class="hljs-string">&quot;zero&quot;</span>] = <span class="hljs-number">0</span>;bas[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;zero&quot;</span>;<br>    mp[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-number">1</span>;bas[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;one&quot;</span>;<br>    mp[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-number">2</span>;bas[<span class="hljs-number">2</span>]=<span class="hljs-string">&quot;two&quot;</span>;<br>    mp[<span class="hljs-string">&quot;three&quot;</span>] = <span class="hljs-number">3</span>;bas[<span class="hljs-number">3</span>]=<span class="hljs-string">&quot;three&quot;</span>;<br>    mp[<span class="hljs-string">&quot;four&quot;</span>] = <span class="hljs-number">4</span>;bas[<span class="hljs-number">4</span>]=<span class="hljs-string">&quot;four&quot;</span>;<br>    mp[<span class="hljs-string">&quot;five&quot;</span>] = <span class="hljs-number">5</span>;bas[<span class="hljs-number">5</span>]=<span class="hljs-string">&quot;five&quot;</span>;<br>    mp[<span class="hljs-string">&quot;six&quot;</span>] = <span class="hljs-number">6</span>;bas[<span class="hljs-number">6</span>]=<span class="hljs-string">&quot;six&quot;</span>;<br>    mp[<span class="hljs-string">&quot;seven&quot;</span>] = <span class="hljs-number">7</span>;bas[<span class="hljs-number">7</span>]=<span class="hljs-string">&quot;seven&quot;</span>;<br>    mp[<span class="hljs-string">&quot;eight&quot;</span>] = <span class="hljs-number">8</span>;bas[<span class="hljs-number">8</span>]=<span class="hljs-string">&quot;eight&quot;</span>;<br>    mp[<span class="hljs-string">&quot;nine&quot;</span>] = <span class="hljs-number">9</span>;bas[<span class="hljs-number">9</span>]=<span class="hljs-string">&quot;nine&quot;</span>;<br>    mp[<span class="hljs-string">&quot;ten&quot;</span>] = <span class="hljs-number">10</span>;<br>    mp[<span class="hljs-string">&quot;eleven&quot;</span>] = <span class="hljs-number">11</span>;<br>    mp[<span class="hljs-string">&quot;twelve&quot;</span>] = <span class="hljs-number">12</span>;<br>    mp[<span class="hljs-string">&quot;thirteen&quot;</span>] = <span class="hljs-number">13</span>;<br>    mp[<span class="hljs-string">&quot;fourteen&quot;</span>] = <span class="hljs-number">14</span>;<br>    mp[<span class="hljs-string">&quot;fifteen&quot;</span>] = <span class="hljs-number">15</span>;<br>    mp[<span class="hljs-string">&quot;sixteen&quot;</span>] = <span class="hljs-number">16</span>;<br>    mp[<span class="hljs-string">&quot;seventeen&quot;</span>] = <span class="hljs-number">17</span>;<br>    mp[<span class="hljs-string">&quot;eighteen&quot;</span>] = <span class="hljs-number">18</span>;<br>    mp[<span class="hljs-string">&quot;nineteen&quot;</span>] = <span class="hljs-number">19</span>;<br>    mp[<span class="hljs-string">&quot;twenty&quot;</span>] = <span class="hljs-number">20</span>;bas[<span class="hljs-number">20</span>]=<span class="hljs-string">&quot;twenty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;thirty&quot;</span>] = <span class="hljs-number">30</span>;bas[<span class="hljs-number">30</span>]=<span class="hljs-string">&quot;thirty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;forty&quot;</span>] = <span class="hljs-number">40</span>;bas[<span class="hljs-number">40</span>]=<span class="hljs-string">&quot;forty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;fifty&quot;</span>] = <span class="hljs-number">50</span>;bas[<span class="hljs-number">50</span>]=<span class="hljs-string">&quot;fifty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;sixty&quot;</span>] = <span class="hljs-number">60</span>;bas[<span class="hljs-number">60</span>]=<span class="hljs-string">&quot;sixty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;seventy&quot;</span>] = <span class="hljs-number">70</span>;bas[<span class="hljs-number">70</span>]=<span class="hljs-string">&quot;seventy&quot;</span>;<br>    mp[<span class="hljs-string">&quot;eighty&quot;</span>] = <span class="hljs-number">80</span>;bas[<span class="hljs-number">80</span>]=<span class="hljs-string">&quot;eighty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;ninety&quot;</span>] = <span class="hljs-number">90</span>;bas[<span class="hljs-number">90</span>]=<span class="hljs-string">&quot;ninety&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">21</span>; i &lt;= <span class="hljs-number">99</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (bas[i].<span class="hljs-built_in">length</span>() &lt;= <span class="hljs-number">1</span>)<br>        &#123;<br>            bas[i] = bas[i / <span class="hljs-number">10</span> * <span class="hljs-number">10</span>] + <span class="hljs-string">&#x27;-&#x27;</span> + bas[i % <span class="hljs-number">10</span>];<br>            mp[bas[i]] = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> t;<br>    string gt;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; gt;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (gt[i] == <span class="hljs-string">&#x27;+&#x27;</span> || !gt[i])<br>            &#123;<br>                ans += mp[gt.<span class="hljs-built_in">substr</span>(p, i - p)];<br>                p = i + <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//printf(&quot;%d &quot;, ans);</span><br>                <span class="hljs-keyword">if</span>(!gt[i]) <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="c-alice-and-bob"><a class="markdownIt-Anchor" href="#c-alice-and-bob"></a> C Alice and Bob</h2><p>博弈论</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p><mark>内容已补全</mark></p><p>由于每次最大拿取量的限制，对于偶数m粒棋子，每一轮（各操作一次）的后手（与全局的先后手无关）可以控制<strong>两人操作完</strong>只剩 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>−</mo><mn>1</mn><mo>−</mo><mo stretchy="false">⌈</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">m-1-\lceil m/2\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span></span></span></span> 粒（对于奇数m粒棋子后手无法控制）；</p><p>由于最后一轮完成后剩余0枚，我们可以解得上一个关键点为2，由2推出再上一个关键点为6……以此类推就会发现关键点的分布规律；</p><p>对于初始棋子数，如果恰好为关键点，则可以保证后手（全局的）必胜，否则先手者可以使棋子点数到达关键点，此时后手则必败了（可以认为全局先手第一次操作后到达关键点，此后全局后手变为回合先手，全局先手可以控制总棋子数到达关键点）；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>vector&lt;<span class="hljs-type">int</span>&gt;ok;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">1000</span>;i=i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>)<br>    &#123;<br>        ok.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;ok[ok.size()-1];</span><br>    <span class="hljs-type">int</span> t,n;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n;<br>        <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ok.<span class="hljs-built_in">size</span>()&amp;&amp;!f;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(n&lt;ok[i])<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(n==ok[i])f=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="d-进化"><a class="markdownIt-Anchor" href="#d-进化"></a> D 进化</h2><p>模拟，搜索，贪心</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>所有运算项均为正数；<br />对于所有乘法项，显然乘法项越后计算结果越大；</p><p>我们可以将运算项视为不可通行块，找到当前区域边界上的所有运算项，将加法项直接计算，如果没有加法项，则选择倍率最低的乘法项运算；<br />运算项运算后便认为是可通行块，循环以上步骤，直到当前边界上没有新的运算块；</p><p>由于数据很小，我们可以放心大胆地多次bfs；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>]; <span class="hljs-comment">// type,num//-1-&gt;no,0-&gt;ok,1-&gt;add,2-&gt;mut</span><br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; tmp[<span class="hljs-number">70</span>];<br><span class="hljs-type">bool</span> rch[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> di[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, dj[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> ctmp = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; que;<br>    <span class="hljs-keyword">if</span> (!mp[x][y].first)<br>        que.<span class="hljs-built_in">push</span>(&#123;x, y&#125;), rch[x][y] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[x][y].first &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        tmp[ctmp++] = &#123;x, y&#125;;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> nowi = que.<span class="hljs-built_in">front</span>().first, nowj = que.<span class="hljs-built_in">front</span>().second;<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<br>        &#123;<br>            <span class="hljs-type">int</span> nni = nowi + di[k], nnj = nowj + dj[k];<br>            <span class="hljs-keyword">if</span> (nni &gt;= <span class="hljs-number">1</span> &amp;&amp; nni &lt;= n &amp;&amp; nnj &gt;= <span class="hljs-number">1</span> &amp;&amp; nnj &lt;= m)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (!mp[nni][nnj].first &amp;&amp; !rch[nni][nnj])<br>                    que.<span class="hljs-built_in">push</span>(&#123;nni, nnj&#125;), rch[nni][nnj] = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[nni][nnj].first &gt; <span class="hljs-number">0</span> &amp;&amp; !rch[nni][nnj])<br>                    tmp[ctmp++] = &#123;nni, nnj&#125;, rch[nni][nnj] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k, ni, nj, tx, ty, t, v;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    string g;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; g;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>        &#123;<br>            mp[i][j + <span class="hljs-number">1</span>].first = (g[j] == <span class="hljs-string">&#x27;#&#x27;</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (g[j] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>                ni = i, nj = j + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    cin &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;tx, &amp;ty, &amp;t, &amp;v);<br>        mp[tx][ty] = &#123;t, v&#125;;<br>    &#125;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        ctmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(tmp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> tmp);<br>        <span class="hljs-built_in">memset</span>(rch, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> rch);<br>        <span class="hljs-built_in">bfs</span>(ni, nj);<br>        <span class="hljs-keyword">if</span> (!ctmp)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-type">int</span> addd = <span class="hljs-number">0</span>;<br>        pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mnm = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ctmp; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp[tmp[i].first][tmp[i].second].first == <span class="hljs-number">1</span>)<br>                ans += mp[tmp[i].first][tmp[i].second].second,<br>                    mp[tmp[i].first][tmp[i].second].first = <span class="hljs-number">0</span>, addd = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[tmp[i].first][tmp[i].second].first == <span class="hljs-number">2</span> &amp;&amp;<br>                     (mnm == <span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) ||<br>                      mp[tmp[i].first][tmp[i].second].first &lt; mp[mnm.first][mnm.second].first))<br>            &#123;<br>                mnm = &#123;tmp[i].first, tmp[i].second&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!addd)<br>        &#123;<br>            ans *= mp[mnm.first][mnm.second].second;<br>            mp[mnm.first][mnm.second].first = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="e-防疫物资"><a class="markdownIt-Anchor" href="#e-防疫物资"></a> E 防疫物资</h2><p>树的直径</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>题目描述便确定了题中所给是一棵树；</p><p>我们可以发现在每一个送货回路内，任意两节点都可以认为被走了一次（走过的道路可以组成路径），如果将这两个节点用道路连接，那么这两点原路径上的道路都可以被少走一次；</p><p>依此，我们找出这棵树上距离最远的两点即可，就是树的直径；<br />答案可以表示为原路径长-直径长+1；</p><p>树的直径可以由 双dfs法 或者 dp法 求得，时间复杂度相同，这里使用的是前者；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>vector&lt;<span class="hljs-type">int</span>&gt;rod[<span class="hljs-number">100005</span>];<br>ll d[<span class="hljs-number">100005</span>];<br><span class="hljs-type">int</span> pos;<br><span class="hljs-type">int</span> ds=<span class="hljs-number">-1</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> f,<span class="hljs-type">int</span> lth)</span></span><br><span class="hljs-function"></span>&#123;<br>    ds++;<br>    d[u]=d[f]+lth;<br>    <span class="hljs-keyword">if</span>(d[u]&gt;d[pos])pos=u;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rod[u].<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (rod[u][i] == f)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(rod[u][i], u,<span class="hljs-number">1</span>);<br>        ds++;<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">tree_r</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)d[i]=<span class="hljs-number">0</span>;<br>    pos=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> lth=ds;<br>    <span class="hljs-comment">// cout&lt;&lt;lth;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)d[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(pos,pos,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> lth-d[pos]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,u,v;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);<br>        rod[u].<span class="hljs-built_in">push_back</span>(v);<br>        rod[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-built_in">tree_r</span>(n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="f-有挂"><a class="markdownIt-Anchor" href="#f-有挂"></a> F 有挂</h2><p>线段树 / 树状数组</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>区间和线段树模板题；</p><p>也许也可以用差分+树状数组解决；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;<span class="hljs-comment">//l,r为节点的左右界</span><br>    ll sum, lt;<span class="hljs-comment">//sum为节点值，lt为懒标记</span><br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span> | <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span><span class="hljs-comment">//对懒标记进行下传</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].lt)<br>    &#123;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].sum += segt[p].lt * (segt[p &lt;&lt; <span class="hljs-number">1</span>].r - segt[p &lt;&lt; <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>);<br>        segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum += segt[p].lt * (segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].r - segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>);<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].lt += segt[p].lt;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lt += segt[p].lt;<br>        segt[p].lt = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">icg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr, ll d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>    &#123;<br>        segt[p].sum += d * (segt[p].r - segt[p].l + <span class="hljs-number">1</span>);<br>        segt[p].lt += d;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr, d);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr, d);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>        <span class="hljs-keyword">return</span> segt[p].sum;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    ll val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr, segt[p].lt = <span class="hljs-number">0</span>, segt[p].sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        segt[p].sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,x,op,l,r,k;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;x;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;op,&amp;l,&amp;r);<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>            <span class="hljs-built_in">icg</span>(<span class="hljs-number">1</span>,l,r,k/x+(!(k%x==<span class="hljs-number">0</span>)));<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>,l,r));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="g"><a class="markdownIt-Anchor" href="#g"></a> G</h2><p>数位dp，感谢汪佬（wxy）；</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>构造状态表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 为以 i 结尾长度 m 的区间，如果按照 j 的二进制表示（从低到高第k位（第0位开始表示）为1代表第i-k日打球，0代表该日不打球），欢乐度合法的最大值（若 j 的表示非法，则该值即为 0 ）；</p><p>则有转移方程（状态合法时）</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>j</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">的</mi><mi mathvariant="normal">末</mi><mi>m</mi><mi mathvariant="normal">位</mi><mo stretchy="false">]</mo><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>j</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mi mathvariant="normal">的</mi><mi mathvariant="normal">末</mi><mi>m</mi><mi mathvariant="normal">位</mi><mo stretchy="false">]</mo><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][(j&lt;&lt;1)的末m位]=f[i-1][j]\\f[i][(j&lt;&lt;1)+1的末m位]=f[i-1][j]+a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">末</span><span class="mord mathdefault">m</span><span class="mord cjk_fallback">位</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">末</span><span class="mord mathdefault">m</span><span class="mord cjk_fallback">位</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></span></p><p>其中取末m位的过程通过位运算完成；</p><p>由于m最大为8，二进制枚举每个状态不会造成很大的复杂度压力；</p><p><code>__builtin_popcount(t)</code>是封装好的 bitcount 函数；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> f[N][<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">9</span>], n, m, a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt; (<span class="hljs-number">1</span> &lt;&lt; m); ++s)<br>        &#123;<br>            <span class="hljs-type">int</span> t = (s &lt;&lt; <span class="hljs-number">1</span>) &amp; ((<span class="hljs-number">1</span> &lt;&lt; m) - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (__builtin_popcount(t) &lt;= m / <span class="hljs-number">2</span>)<br>                f[i][t] = <span class="hljs-built_in">max</span>(f[i][t], f[i - <span class="hljs-number">1</span>][s]);<br>            <span class="hljs-keyword">if</span> (__builtin_popcount(t) + <span class="hljs-number">1</span> &lt;= m / <span class="hljs-number">2</span>)<br>                f[i][t | <span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(f[i][t | <span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][s] + a[i]);<br>        &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt; (<span class="hljs-number">1</span> &lt;&lt; m); ++s)<br>        ans = <span class="hljs-built_in">max</span>(ans, f[n][s]);<br>    cout &lt;&lt; ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-爱美之心人皆有之"><a class="markdownIt-Anchor" href="#h-爱美之心人皆有之"></a> H 爱美之心人皆有之</h2><p>st表，二分<br />参考并简化了<a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=52087251">这份代码</a>；</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>st表是一种 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 时空复杂度预处理，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 时间复杂度求区间最大 / 小值的数据结构；</p><p>对于以 i 为左端点的所有区间而言，随着右端点的右移，区间极差会单调递增，我们可以依此二分；</p><p>找到区间极差等于 k 的最左右端点和最右右端点，便可以求出区间个数；<br />需要注意无解的情况；</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> mi[N][<span class="hljs-number">21</span>], ma[N][<span class="hljs-number">21</span>], lg[N], a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ck_mi</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = lg[r - l + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(mi[l][k], mi[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ck_ma</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = lg[r - l + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(ma[l][k], ma[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        ma[i][<span class="hljs-number">0</span>] = mi[i][<span class="hljs-number">0</span>] = a[i], lg[i] = <span class="hljs-built_in">log2</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j + (<span class="hljs-number">1</span> &lt;&lt; i) - <span class="hljs-number">1</span> &lt;= n; j++)<br>        &#123;<br>            mi[j][i] = <span class="hljs-built_in">min</span>(mi[j][i - <span class="hljs-number">1</span>], mi[j + (<span class="hljs-number">1</span> &lt;&lt; (i - <span class="hljs-number">1</span>))][i - <span class="hljs-number">1</span>]);<br>            ma[j][i] = <span class="hljs-built_in">max</span>(ma[j][i - <span class="hljs-number">1</span>], ma[j + (<span class="hljs-number">1</span> &lt;&lt; (i - <span class="hljs-number">1</span>))][i - <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> l1 = i, r1 = n;<br>        <span class="hljs-keyword">while</span> (l1 &lt; r1)<br>        &#123;<br>            <span class="hljs-type">int</span> mid = (l1 + r1) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ck_ma</span>(i, mid) - <span class="hljs-built_in">ck_mi</span>(i, mid) &gt;= k)<br>                r1 = mid;<br>            <span class="hljs-keyword">else</span><br>                l1 = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> l2 = i, r2 = n;<br>        <span class="hljs-keyword">while</span> (l2 &lt; r2)<br>        &#123;<br>            <span class="hljs-type">int</span> mid = (l2 + r2 + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ck_ma</span>(i, mid) - <span class="hljs-built_in">ck_mi</span>(i, mid) &lt;= k)<br>                l2 = mid;<br>            <span class="hljs-keyword">else</span><br>                r2 = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ck_ma</span>(i, l1) - <span class="hljs-built_in">ck_mi</span>(i, l1) == k)<br>            ans += l2 - l1 + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// printf(&quot;%d %d %d\n&quot;,i,l1,l2);</span><br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-签签签到"><a class="markdownIt-Anchor" href="#i-签签签到"></a> I 签签签到</h2><p>愚人节快乐</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p><img src="https://s2.loli.net/2022/08/02/bEmrQgv6C2DfAyH.png" alt="在这里插入图片描述" /><br /><img src="https://s2.loli.net/2022/08/02/bEmrQgv6C2DfAyH.png" alt="在这里插入图片描述" /></p><p>脑子空空，注意转义，也可以用raw字符串（ C++11功能）；</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;%d%\\n\&quot;&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">R&quot;(%d%\n&quot;)&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二大数字和-数据结构</title>
    <link href="/2022.01-06/%E7%AC%AC%E4%BA%8C%E5%A4%A7%E6%95%B0%E5%AD%97%E5%92%8C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022.01-06/%E7%AC%AC%E4%BA%8C%E5%A4%A7%E6%95%B0%E5%AD%97%E5%92%8C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p><a href="http://oj.daimayuan.top/problem/846">代码源OJ #846. 第二大数字和</a>；<br /><img src="https://s2.loli.net/2022/08/02/8AmDcNMQvFyPobH.png" alt="在这里插入图片描述" /><br />本文为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>解法；</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>我们考虑关于每一个数，<strong>以该数为第二大数字和的区间数</strong>与<strong>在排列中该数左右两侧的第一个和第二个大于该数的数的位置</strong>有关；</p><p>如果记该数位置为 p ，左侧第一个大于该数的位置为 pl1 ，左侧第二个大于该数的位置为 pl2（右侧同理 pr1，pr2 ），（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>r</mi><mn>2</mn><mo>&gt;</mo><mi>p</mi><mi>r</mi><mn>1</mn><mo>&gt;</mo><mi>p</mi><mo>&gt;</mo><mi>p</mi><mi>l</mi><mn>1</mn><mo>&gt;</mo><mi>p</mi><mi>l</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">pr2&gt;pr1&gt;p&gt;pl1&gt;pl2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">2</span></span></span></span>）则以该点为第二大数字的区间有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>p</mi><msub><mi>l</mi><mn>2</mn></msub><mo>−</mo><mi>p</mi><msub><mi>l</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>p</mi><msub><mi>r</mi><mn>1</mn></msub><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>p</mi><mi>r</mi><mn>2</mn><mo>−</mo><mi>p</mi><mi>r</mi><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mi>p</mi><mi>l</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(pl_2-pl_1)(pr_1-p)+(pr2-pr1)(p-pl1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>；</p><p>在操作过程中，我们选择使用类似链表的数据结构，首先假定所有数的左右两侧数都大于它自身，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><msub><mi>l</mi><mn>1</mn></msub><mo>=</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>p</mi><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><mi>p</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">pl_1=p-1,pr_1=p+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，从小到大处理每一个数，处理后将其左右的相邻数中的 pl1 和 pr1 更新，并抛弃这个数（类似链表中删除元素）。在这个过程中我们就可以保证每个数的 pl1 与 pr1 在使用时一定是正确的；</p><p>在这个过程中，px2 可以通过嵌套表示出，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>p</mi><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">]</mo><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">[px_1]x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在被使用时并不是数px1 的x方向第一个大于其的数，而是数p 的x方向第一个大于其的数（因为数据还没有处理到数px1，只处理了小于数p 的部分）。因此我们只需要妥善维护每个点 p 的 pl1 与 pr1 即可；</p><p>在下面的代码实现中，存储的并不是 px1，而是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>p</mi><mo>−</mo><mi>p</mi><msub><mi>x</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|p-px_1|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span> ，实际上没有区别；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ln</span>&#123;<br>    <span class="hljs-type">int</span> l,r;<br>    ll tl,tr;<br>    <span class="hljs-type">int</span> num;<br>&#125;node[<span class="hljs-number">100005</span>];<br><span class="hljs-type">int</span> pos[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,tmp;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp);<br>        pos[tmp]=i;<br>        node[i].l=i<span class="hljs-number">-1</span>;<br>        node[i].r=i+<span class="hljs-number">1</span>;<br>        node[i].tl=node[i].tr=<span class="hljs-number">1</span>;<br>        node[i].num=tmp;<br>    &#125;<br>    <span class="hljs-comment">// node[1].tl=node[n].tr=0;</span><br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> mk=pos[i];<br>        <span class="hljs-comment">// printf(&quot;*%d %d\n&quot;,i,(node[mk].tl*node[node[mk].r].tr+node[mk].tr*node[node[mk].l].tl));</span><br>        ans+=i*(node[mk].tl*node[node[mk].r].tr+node[mk].tr*node[node[mk].l].tl);<br>        node[node[mk].l].tr+=node[mk].tr;<span class="hljs-comment">//维护左右邻</span><br>        node[node[mk].r].tl+=node[mk].tl;<br>        node[node[mk].l].r=node[mk].r;<span class="hljs-comment">//删除元素</span><br>        node[node[mk].r].l=node[mk].l;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>矩形划分-几何</title>
    <link href="/2022.01-06/%E7%9F%A9%E5%BD%A2%E5%88%92%E5%88%86-%E5%87%A0%E4%BD%95/"/>
    <url>/2022.01-06/%E7%9F%A9%E5%BD%A2%E5%88%92%E5%88%86-%E5%87%A0%E4%BD%95/</url>
    
    <content type="html"><![CDATA[<p><a href="http://oj.daimayuan.top/problem/853">代码源OJ #853. 矩形划分</a>；<br /><a href="https://www.bilibili.com/video/BV18r4y1n7r7">参考题解</a>；</p><blockquote><p>普适的代价是抽象<br />Abstractness is the price of generality</p></blockquote><p>显然，题目描述中过于抽象，出现理解困难的话可以参考题解视频；<br />我的理解（修正）如下：</p><ol><li>每次会给出两个点 p,q , 你需要在点 p,q 之间连一条线来划分矩形 , 保证 p,q 分别在矩形的一组对边上 , 即要么分别在左右边界上 , 要么分别在上下边界上。</li><li>连的线并不要求是直线 , 可以是曲线 , 但不能与自己有交点 , 不能与矩形边界有除 p,q 以外的交点。</li><li>一条线与其他每条线最多只有一个交点。</li><li>每个交点只能为二线相交，不可以是更多线相交。</li><li>保证给出的所有点两两不同。</li></ol><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>我们考虑构造过程：</p><ol><li>对于一个没有线的矩形，显然块数为1；</li><li>每在矩形中添加一条与其他线没有交点的线，块数会增加1；</li><li>每在矩形中添加一条与其他线有n个合法交点的线，块数会增加n+1；</li></ol><p>所以我们可以发现，块数可以用：1+线数+交点数来表示；</p><p>对于交点数，我们可以发现所有纵向线都与每条横向线都一定有一个交点；<br />接下来我们讨论同方向线间的交点：<br />我们将线按一侧的坐标排序后，考虑另一侧的坐标，每出现一个逆序对，即说明出现了一次交错，即有一个交点；</p><p>具体操作可以使用归并排序统计逆序对；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; h[<span class="hljs-number">100005</span>], w[<span class="hljs-number">100005</span>], tmp[<span class="hljs-number">100005</span>]; <span class="hljs-comment">// line&amp;clom</span><br><span class="hljs-function">ll <span class="hljs-title">ds</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; *a, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, l, r);</span><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (r - l + <span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>)<br>        ans = <span class="hljs-built_in">ds</span>(a, l, mid) + <span class="hljs-built_in">ds</span>(a, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>, c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i].second &lt;= a[j].second)<br>        &#123;<br>            tmp[c++] = a[i];<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tmp[c++] = a[j];<br>            ans += mid - i + <span class="hljs-number">1</span>;<br>            j++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid)<br>    &#123;<br>        tmp[c++] = a[i];<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= r)<br>    &#123;<br>        tmp[c++] = a[j];<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l; k &lt;= r; k++)<br>    &#123;<br>        a[k] = tmp[k - l];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, p, q;<br>    ll x, y;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;h[i].first, &amp;h[i].second);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= y; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w[i].first, &amp;w[i].second);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(h + <span class="hljs-number">1</span>, h + <span class="hljs-number">1</span> + (<span class="hljs-type">int</span>)x);<br>    <span class="hljs-built_in">sort</span>(w + <span class="hljs-number">1</span>, w + <span class="hljs-number">1</span> + (<span class="hljs-type">int</span>)y);<br>    ll ans = <span class="hljs-built_in">ds</span>(h, <span class="hljs-number">1</span>, x) + <span class="hljs-built_in">ds</span>(w, <span class="hljs-number">1</span>, y);<br>    cout &lt;&lt; ans + x * y + x + y + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数论与几何</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>正点stm32f407探索者开发板使用HAL库通过I2C协议配置并读取MPU6050（基础向）</title>
    <link href="/2022.01-06/%E6%AD%A3%E7%82%B9stm32f407%E6%8E%A2%E7%B4%A2%E8%80%85%E5%BC%80%E5%8F%91%E6%9D%BF%E4%BD%BF%E7%94%A8HAL%E5%BA%93%E9%80%9A%E8%BF%87I2C%E5%8D%8F%E8%AE%AE%E9%85%8D%E7%BD%AE%E5%B9%B6%E8%AF%BB%E5%8F%96MPU6050%EF%BC%88%E5%9F%BA%E7%A1%80%E5%90%91%EF%BC%89/"/>
    <url>/2022.01-06/%E6%AD%A3%E7%82%B9stm32f407%E6%8E%A2%E7%B4%A2%E8%80%85%E5%BC%80%E5%8F%91%E6%9D%BF%E4%BD%BF%E7%94%A8HAL%E5%BA%93%E9%80%9A%E8%BF%87I2C%E5%8D%8F%E8%AE%AE%E9%85%8D%E7%BD%AE%E5%B9%B6%E8%AF%BB%E5%8F%96MPU6050%EF%BC%88%E5%9F%BA%E7%A1%80%E5%90%91%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><em>此文图片均链自CSDN</em></p><p>参考资料：<a href="https://blog.csdn.net/na2wo4/article/details/104453401">[1]</a>，<a href="https://blog.csdn.net/zj490044512/article/details/83745684">[2]</a>，<a href="http://www.openedv.com/docs/boards/stm32/zdyz_stm32f407_explorer.html">正点原子资料下载中心-&gt;stm32f407探索者开发板</a>：资料A盘:<code>Explorer STM32F4_V2.2_SCH.pdf</code>,<code>探索者IO引脚分配表.xlsx</code>,<code>5，MPU6050资料.rar</code>；</p><p>文章内容仅供参考；<br /><ul class="markdownIt-TOC"><li><a href="#mpu6050%E7%AE%80%E8%BF%B0">MPU6050简述</a></li><li><a href="#mpu6050%E7%9A%84%E5%B0%81%E8%A3%85">MPU6050的封装</a></li><li><a href="#i2c%E7%9A%84%E5%87%BD%E6%95%B0%E6%93%8D%E4%BD%9C">I2C的函数操作</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E5%AF%84%E5%AD%98%E5%99%A8%E6%93%8D%E4%BD%9C%E5%86%85%E5%AE%B9">配置过程寄存器操作内容</a><ul><li><a href="#%E9%87%8D%E7%BD%AEmpu6050">重置MPU6050</a></li><li><a href="#%E5%94%A4%E9%86%92mpu6050%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%97%B6%E9%92%9F%E6%BA%90">唤醒MPU6050并配置时钟源</a></li><li><a href="#%E5%85%B3%E9%97%AD%E6%89%80%E6%9C%89%E4%B8%AD%E6%96%AD">关闭所有中断</a></li><li><a href="#%E5%A4%B1%E8%83%BDfifo%E5%B9%B6%E5%85%B3%E9%97%AD%E4%BC%A0%E6%84%9F%E5%99%A8i2c%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F">失能FIFO并关闭传感器i2c主机模式</a></li><li><a href="#%E6%97%A0%E6%95%B0%E6%8D%AE%E9%9C%80%E8%A6%81%E5%86%99%E5%85%A5fifo">无数据需要写入FIFO</a></li><li><a href="#%E5%85%B3%E9%97%AD%E4%BC%A0%E6%84%9F%E5%99%A8%E5%BE%85%E6%9C%BA%E6%A8%A1%E5%BC%8F">关闭传感器待机模式</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E9%99%80%E8%9E%BA%E4%BB%AA%E5%92%8C%E5%8A%A0%E9%80%9F%E5%BA%A6%E8%AE%A1">配置陀螺仪和加速度计</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E6%95%B0%E5%AD%97%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8">配置数字低通滤波器</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E8%BE%93%E5%87%BA%E7%8E%87">配置输出率</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E4%B8%80%E8%A7%88">配置部分代码一览</a></li></ul></li><li><a href="#%E8%AF%BB%E5%8F%96%E9%83%A8%E5%88%86%E5%AF%84%E5%AD%98%E5%99%A8%E6%93%8D%E4%BD%9C%E5%86%85%E5%AE%B9">读取部分寄存器操作内容</a></li><li><a href="#%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81">一些数据验证</a></li></ul><br />通过STM32f07ZG芯片通过i2c协议向MPU6050的寄存器写数据来配置传感器，并通过该协议读取传感器读数；</p><h2 id="mpu6050简述"><a class="markdownIt-Anchor" href="#mpu6050简述"></a> MPU6050简述</h2><p>在这篇文章中，主要用到了MPU6050集成的3轴MEMS陀螺仪和3轴MEMS加速度计；<br />其中陀螺仪的测量值是正比于角速度，不难理解，也可以方便地直接转换为国际单位制（如何转换下文详述）；<br />对于加速度传感器的测量值，我们可以引入如下模型<br /><img src="https://img-blog.csdnimg.cn/9a5169990bc849aea1e54836db2fa877.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/29e8d214c0c142a6b6586d678f4e7947.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />若我使传感器在地表以1g的加速度竖直向上加速，那么传感器的示数应为<code>Z=-2g</code> ；<br />其测量值即为墙壁对小球造成的加速度，具体表现为小球所受重力加速度与小球与地面加速度的矢量和。同样，测量值与SI（国际单位制）也需要正比换算；</p><h2 id="mpu6050的封装"><a class="markdownIt-Anchor" href="#mpu6050的封装"></a> MPU6050的封装</h2><p><img src="https://img-blog.csdnimg.cn/49193016b59546caa9fb1f8450c83b05.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />我们可以观察到AD0针脚接地，根据AD0电平与传感器Slave地址的关系<br /><img src="https://img-blog.csdnimg.cn/d362ab78335a40a3b8aa0efa731c3938.png" alt="在这里插入图片描述" /><br />我们可以得知传感器的从机地址为0x68；<br />我们结合<img src="https://img-blog.csdnimg.cn/968d7dddaedf46718af9cb49ab9a4a03.png" alt="在这里插入图片描述" /><br />可知I2C的两条线连接到了芯片的PB8和PB9引脚，我们可以将这两条引脚设置为I2C1；<br /><img src="https://img-blog.csdnimg.cn/4e672dfe47644027b0564746cf8171e6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><h2 id="i2c的函数操作"><a class="markdownIt-Anchor" href="#i2c的函数操作"></a> I2C的函数操作</h2><p><img src="https://img-blog.csdnimg.cn/4d5d8547091f47069bc086345c692d96.png" alt="在这里插入图片描述" /><br />在这里我们用到的是这两个函数，内容是以阻塞模式将一定量的数据写入特定的内存地址/以阻塞模式从特定的内存地址读取一定量的数据；<br />函数参数如下（以读从机函数为例）：<br /><img src="https://img-blog.csdnimg.cn/491234f02db94a618e73836aaea2f663.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />第一个值是指向包含指定 I2C 的配置信息的 I2C_HandleTypeDef 结构的指针，这部分是配置完.ioc文件后CubeMAX自动生成的，具体取决于使用的I2C编号，此处即为<code>&amp;hi2c1</code><br /><img src="https://img-blog.csdnimg.cn/5578dddaadab4f62abf43612a485bf7b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />第二个值为七位目标设备地址，注意使用时还需要左移一位，也就是上面提到的0x68；<br />第三个值为内存地址，即从机上的寄存器地址，地址的值需要查询寄存器分配表；<br />第四个值为内存地址长度，每8位二进制数为1，在这篇文章中均为1；<br />第五个值为接收数据的地址，指向要发送的数据；<br />第六个值为要接收的数据量，每8位二进制数为1；<br />第七个值为超时时间，如果超时未收到应答信号，则会在返回值中体现出来，单位毫秒（1000ms=1s）；<br />返回值定义如下（自动生成）：<br /><img src="https://img-blog.csdnimg.cn/c4c67ab636514699b47eeba0f06de536.png" alt="在这里插入图片描述" /><br />写从机函数的第五、六个值变成了指向要发送数据的指针和要发送的数据量，和读从机函数细节相同；</p><h2 id="配置过程寄存器操作内容"><a class="markdownIt-Anchor" href="#配置过程寄存器操作内容"></a> 配置过程寄存器操作内容</h2><p>代码会在最后附上<br /><img src="https://img-blog.csdnimg.cn/fb41ba9b80b845fd95222a873a508ad2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><p>上图的一些名称不是标准命名，仅供参考</p><h3 id="重置mpu6050"><a class="markdownIt-Anchor" href="#重置mpu6050"></a> 重置MPU6050</h3><p><img src="https://img-blog.csdnimg.cn/a9b97727557b4954ba3ca6287296036d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />将<code>MPU_PWR_MGMT1_REG(0x6B)</code>寄存器Bit7写为1，并延时适当时间等待复位；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x80</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT1_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Reset MPU6050</span><br><span class="hljs-built_in">HAL_Delay</span>(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h3 id="唤醒mpu6050并配置时钟源"><a class="markdownIt-Anchor" href="#唤醒mpu6050并配置时钟源"></a> 唤醒MPU6050并配置时钟源</h3><p>将<code>MPU_PWR_MGMT1_REG(0x6B)</code>寄存器Bit6位写为0，Bit210设置为001，即将时钟源定位X轴角速度计；；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x01</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT1_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Awaken MPU6050 &amp;Set clock as PLL X</span><br></code></pre></td></tr></table></figure><h3 id="关闭所有中断"><a class="markdownIt-Anchor" href="#关闭所有中断"></a> 关闭所有中断</h3><p><img src="https://img-blog.csdnimg.cn/a2e4af019da84f98ba1a21846dbf4ae9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />在这个简单实验中不需要配置这部分；<br />将<code>MPU_INT_EN_REG(0x38)</code>寄存器Bit0347均置为1；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_INT_EN_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Close all interrupts</span><br></code></pre></td></tr></table></figure><h3 id="失能fifo并关闭传感器i2c主机模式"><a class="markdownIt-Anchor" href="#失能fifo并关闭传感器i2c主机模式"></a> 失能FIFO并关闭传感器i2c主机模式</h3><p><img src="https://img-blog.csdnimg.cn/38552d693b1845dc97df4f113239db65.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />将<code>MPU_USER_CTRL_REG(0x6A)</code>寄存器Bit654写0；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_USER_CTRL_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Turn off IIC host mode and FIFO</span><br></code></pre></td></tr></table></figure><h3 id="无数据需要写入fifo"><a class="markdownIt-Anchor" href="#无数据需要写入fifo"></a> 无数据需要写入FIFO</h3><p><img src="https://img-blog.csdnimg.cn/f66f2c21d7994bca82f8aeb5973d1a20.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/24152826facb46eaabb6683200d7ef4a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><p>使<code>MPU_FIFO_EN_REG(0x23)</code>寄存器均为0即可；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_FIFO_EN_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// No sensors were added to the FIFO</span><br></code></pre></td></tr></table></figure><h3 id="关闭传感器待机模式"><a class="markdownIt-Anchor" href="#关闭传感器待机模式"></a> 关闭传感器待机模式</h3><p><img src="https://img-blog.csdnimg.cn/a5b32790c8fd4b27a2988a5f6212dcc7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><p>将<code>MPU_PWR_MGMT2_REG(0x6C)</code>寄存器Bit543210位均置0；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT2_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Awaken sensor</span><br></code></pre></td></tr></table></figure><h3 id="配置陀螺仪和加速度计"><a class="markdownIt-Anchor" href="#配置陀螺仪和加速度计"></a> 配置陀螺仪和加速度计</h3><p><img src="https://img-blog.csdnimg.cn/cdef3714be42468fbe920f58ab869b68.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/b071dd66f7954743b08bb95527f9054d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />本次简单实验不需要自检，选择量程即可；<br />将<code>MPU_ACCEL_CFG(0x1C)</code>寄存器和<code>MPU_GYRO_CFG(0X1B)</code>寄存器的Bit43均设置为1（选择最大量程）；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x18</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_ACCEL_CFG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Accelerometer configuration</span><br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_GYRO_CFG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Gyroscope configuration</span><br></code></pre></td></tr></table></figure><h3 id="配置数字低通滤波器"><a class="markdownIt-Anchor" href="#配置数字低通滤波器"></a> 配置数字低通滤波器</h3><p><img src="https://img-blog.csdnimg.cn/737cd2f3d0314900af278e7e6b31c520.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="" /><br />这里选择相对均衡的配置，即将<code>MPU_CONFIGURATION(0x1A)</code>的Bit210配置为011；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x03</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_CONFIGURATION,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Select sampling rate</span><br></code></pre></td></tr></table></figure><h3 id="配置输出率"><a class="markdownIt-Anchor" href="#配置输出率"></a> 配置输出率</h3><p><img src="https://img-blog.csdnimg.cn/445825a6bdc54ed5aa7c677499d5ca8c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><p>根据上式，<code>MPLRT</code>写0即可，将<code>MPU_RATE_DIVIDER(0x19)</code>寄存器所有位写0；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_RATE_DIVIDER,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Select output rate</span><br></code></pre></td></tr></table></figure><h3 id="配置部分代码一览"><a class="markdownIt-Anchor" href="#配置部分代码一览"></a> 配置部分代码一览</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_PWR_MGMT1_REG0X6B</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_PWR_MGMT2_REG0X6C</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_INT_EN_REG0X38</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_USER_CTRL_REG0X6A</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_FIFO_EN_REG0X23</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_DEVICE_ID_REG0X75</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_ACCEL_XOUTH_REG    0X3B</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_GYRO_XOUTH_REG  0X43</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_ACCEL_CFG       0X1C</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_GYRO_CFG        0X1B</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_RATE_DIVIDER    0X19</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_CONFIGURATION   0X1A</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HAL_StatusTypeDef stat;<br><span class="hljs-type">uint8_t</span> valu=<span class="hljs-number">0x80</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT1_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Reset MPU6050</span><br><span class="hljs-built_in">HAL_Delay</span>(<span class="hljs-number">100</span>);<br>valu=<span class="hljs-number">0x01</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT1_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Awaken MPU6050 &amp;Set clock as PLL X</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_INT_EN_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Close all interrupts</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_USER_CTRL_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Turn off IIC host mode and FIFO</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_FIFO_EN_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// No sensors were added to the FIFO</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT2_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Awaken sensor</span><br>valu=<span class="hljs-number">0x18</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_ACCEL_CFG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Accelerometer configuration</span><br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_GYRO_CFG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Gyroscope configuration</span><br>valu=<span class="hljs-number">0x03</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_CONFIGURATION,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Select sampling rate</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_RATE_DIVIDER,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Select output rate</span><br></code></pre></td></tr></table></figure><h2 id="读取部分寄存器操作内容"><a class="markdownIt-Anchor" href="#读取部分寄存器操作内容"></a> 读取部分寄存器操作内容</h2><p><img src="https://img-blog.csdnimg.cn/021050673d524450a6288afe4a467037.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/2a285b28ad6f4ae3ab2bedf66f630544.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />按地址读取测量值即可；<br />接收之后需要把数据处理成16位有符号整数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_ACCEL_XOUTH_REG0X3B</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_GYRO_XOUTH_REG  0X43</span><br><span class="hljs-type">int16_t</span> data16A[<span class="hljs-number">3</span>],data16G[<span class="hljs-number">3</span>];<br><span class="hljs-type">uint8_t</span> dataACCEL[<span class="hljs-number">6</span>],dataGYRO[<span class="hljs-number">6</span>];<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">stat=<span class="hljs-built_in">HAL_I2C_Mem_Read</span>(&amp;hi2c1, <span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_ACCEL_XOUTH_REG, <span class="hljs-number">1</span>, dataACCEL,<span class="hljs-number">6</span>, <span class="hljs-number">100</span>);<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Read</span>(&amp;hi2c1, <span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_GYRO_XOUTH_REG, <span class="hljs-number">1</span>, dataGYRO,<span class="hljs-number">6</span>, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int8_t</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>data16G[i]=(((<span class="hljs-type">uint16_t</span>)dataGYRO[<span class="hljs-number">2</span>*i])&lt;&lt;<span class="hljs-number">8</span>)|dataGYRO[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>],<br>data16A[i]=(((<span class="hljs-type">uint16_t</span>)dataACCEL[<span class="hljs-number">2</span>*i])&lt;&lt;<span class="hljs-number">8</span>)|dataACCEL[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><p>此时<code>data16·[i]</code>中存储的并不是SI下的数据：<br />对于陀螺仪，如果内存数字为X，则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mi>w</mi><mo>⋅</mo><msub><mtext>LSB</mtext><mrow><mi>A</mi><mi>C</mi><mi>C</mi><mi>E</mi><mi>L</mi></mrow></msub></mrow><annotation encoding="application/x-tex">X=w\cdot \text{LSB}_{ACCEL}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">LSB</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，w的单位即为°/s；<br />对于加速度计，如果内存的数字为X，则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mi>a</mi><mo>⋅</mo><msub><mtext>LSB</mtext><mrow><mi>G</mi><mi>Y</mi><mi>R</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">X=a\cdot \text{LSB}_{GYRO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">LSB</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，a的单位为g（约9.8m/s<sup>2</sup>），需要注意，加速度值并不是物体相对于地面的加速度值，而是该值与重力加速度的矢量和；<br />对于LSB的值可以依照所选量程对照上表可得；</p><h2 id="一些数据验证"><a class="markdownIt-Anchor" href="#一些数据验证"></a> 一些数据验证</h2><p>我在不同角度下静置开发板，并通过U5的调试模式下以10Hz左右读取了100组加速度计测量值（data16A[i]）的平均值，定义函数</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><msqrt><mrow><msubsup><mi>a</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>a</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>a</mi><mn>3</mn><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding="application/x-tex">f([a_1,a_2,a_3])=\sqrt{a_1^2+a_2^2+a_3^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5413249999999998em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2986750000000002em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.258675em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10zM1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5413249999999998em;"><span></span></span></span></span></span></span></span></span></span></p><p>绘制下表：</p><table><thead><tr><th>组数</th><th>a1</th><th>a2</th><th>a3</th><th>f([a1,a2,a3])</th></tr></thead><tbody><tr><td>1</td><td>-1.81</td><td>51.35</td><td>2039.58</td><td>2040.23</td></tr><tr><td>2</td><td>385.66</td><td>47.98</td><td>2004.43</td><td>2041.76</td></tr><tr><td>3</td><td>1385.47</td><td>168.05</td><td>1488.20</td><td>2040.22</td></tr><tr><td>4</td><td>-2068.78</td><td>39.14</td><td>10.00</td><td>2069.19</td></tr><tr><td>5</td><td>2.99</td><td>2084.68</td><td>-59.76</td><td>2085.54</td></tr></tbody></table><p>可以观察到，在误差允许范围内，均接近所选量程下最低分辨率的1g（2048LSB/g）；</p>]]></content>
    
    
    <categories>
      
      <category>嵌入式开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>蜗蜗的数列（CF1634 F.Fibonacci Additions）-差分</title>
    <link href="/2022.01-06/%E8%9C%97%E8%9C%97%E7%9A%84%E6%95%B0%E5%88%97%EF%BC%88CF1634%20F.Fibonacci%20Additions%EF%BC%89-%E5%B7%AE%E5%88%86/"/>
    <url>/2022.01-06/%E8%9C%97%E8%9C%97%E7%9A%84%E6%95%B0%E5%88%97%EF%BC%88CF1634%20F.Fibonacci%20Additions%EF%BC%89-%E5%B7%AE%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p><a href="http://oj.daimayuan.top/problem/562">代码源OJ #562. 蜗蜗的数列</a>、<a href="https://codeforces.com/contest/1634/problem/F">CF1634 F. Fibonacci Additions</a>；<br /><a href="https://www.bilibili.com/video/BV1Jq4y1v7sB">参考</a>；</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>题目要求验证数列 A,B 是否相同，我们构造数列 C， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub><mo>=</mo><msub><mi>A</mi><mi>i</mi></msub><mo>−</mo><msub><mi>B</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i=A_i-B_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，检验数列 C 是否全为 0 即可；</p><p>对于一般的差分来说，连续区间加上定值，只需要在区间首末加上和减去这个值即可，但是此题加上的是斐波那契数列，我们需要特殊构造；</p><p>构造差分数组 D， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub><mo>=</mo><msub><mi>C</mi><mi>i</mi></msub><mo>−</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>C</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">D_i=C_i-C_{i-1}-C_{i-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> 。我们可以发现如果对 C 的 [l,r] 区间进行操作，只需要对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>l</mi></msub><mo>+</mo><msub><mi>F</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>D</mi><mrow><mi>r</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>D</mi><mrow><mi>r</mi><mo>+</mo><mn>2</mn></mrow></msub><mo>+</mo><msub><mi>F</mi><mrow><mi>r</mi><mo>−</mo><mi>l</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">D_l+F_1,D_{r+1}+F_{r-l+2},D_{r+2}+F_{r-l+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> ，其余项在这种构造方式下均被约去了；</p><p>更推广来说，对于类斐波那契数列，也可以通过类似的构造来降低时间复杂度</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-comment">// const ll M = 1e9 + 7;</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-type">int</span> n, q;<br>ll m;<br><span class="hljs-type">int</span> tmp;<br>ll c[<span class="hljs-number">1000006</span>];<br>ll d[<span class="hljs-number">1000006</span>];<br><span class="hljs-type">int</span> f[<span class="hljs-number">1000006</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">1</span> &amp;&amp; x &lt;= n)<br>    &#123;<br>        tmp -= (d[x] != <span class="hljs-number">0</span>);<br>        d[x] = (d[x] + y + m) % m;<br>        tmp += (d[x] != <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">NULL</span>);<br>    cin &gt;&gt; n &gt;&gt; q &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; c[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; tmp;<br>        c[i] -= tmp;<br>    &#125;<br>    <span class="hljs-type">int</span> unz = <span class="hljs-number">0</span>;<br>    d[<span class="hljs-number">1</span>] = c[<span class="hljs-number">1</span>];<br>    d[<span class="hljs-number">2</span>] = (c[<span class="hljs-number">2</span>] - c[<span class="hljs-number">1</span>] + m) % m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++)<br>    &#123;<br>        d[i] = (c[i] - c[i - <span class="hljs-number">1</span>] - c[i - <span class="hljs-number">2</span>] + <span class="hljs-number">6</span> * m) % m;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (d[i])<br>            unz++;<br>    &#125;<br>    f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span> % m;<br>    f[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span> % m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">3</span>; i &lt;= n + <span class="hljs-number">2</span>; i++)<br>    &#123;<br>        f[i] = (f[i - <span class="hljs-number">1</span>] + f[i - <span class="hljs-number">2</span>]) % m;<br>    &#125;<br>    <span class="hljs-type">char</span> g;<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-keyword">while</span> (q--)<br>    &#123;<br>        cin &gt;&gt; g &gt;&gt; l &gt;&gt; r;<br>        <span class="hljs-keyword">if</span> (g == <span class="hljs-string">&#x27;A&#x27;</span>)<br>        &#123;<br>            unz += <span class="hljs-built_in">upd</span>(l, <span class="hljs-number">1</span>);<br>            unz += <span class="hljs-built_in">upd</span>(r + <span class="hljs-number">1</span>, -f[r - l + <span class="hljs-number">2</span>]);<br>            unz += <span class="hljs-built_in">upd</span>(r + <span class="hljs-number">2</span>, -f[r - l + <span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            unz += <span class="hljs-built_in">upd</span>(l, <span class="hljs-number">-1</span>);<br>            unz += <span class="hljs-built_in">upd</span>(r + <span class="hljs-number">1</span>, f[r - l + <span class="hljs-number">2</span>]);<br>            unz += <span class="hljs-built_in">upd</span>(r + <span class="hljs-number">2</span>, f[r - l + <span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!unz)<br>            cout &lt;&lt; <span class="hljs-string">&quot;Yes\n&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;No\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>卡常是坏文明</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Strange Fractions（奇怪的分数）-数论</title>
    <link href="/2022.01-06/Strange%20Fractions%EF%BC%88%E5%A5%87%E6%80%AA%E7%9A%84%E5%88%86%E6%95%B0%EF%BC%89-%E6%95%B0%E8%AE%BA/"/>
    <url>/2022.01-06/Strange%20Fractions%EF%BC%88%E5%A5%87%E6%80%AA%E7%9A%84%E5%88%86%E6%95%B0%EF%BC%89-%E6%95%B0%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/103446/problem/D">Strange Fractions[2021 ICPC 上海站 D]</a>&amp;<a href="https://www.luogu.com.cn/problem/U207965">U207965 Strange Fractions 增强版</a><br /><a href="https://codeforces.com/gym/103446/attachments/download/14828/LiyuuCute.pdf">参考（全题解）</a><br />题目链接中，增强版 T 增加到了 1e6，并要求 a,b 互质，ban掉了第一种做法（赛版不要求 a,b 互质）；</p><h1 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h1><p>给定一个正分数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>p</mi><mi>q</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.228608em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，我们需要找到两个正整数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a,b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span></span></span></span> 满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>p</mi><mi>q</mi></mfrac><mo>=</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo>+</mo><mfrac><mi>b</mi><mi>a</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac pq=\frac ab+\frac ba</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.228608em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，如果不存在，则输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">0,0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span></span></span></span> ；<br />（ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>T</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo separator="true">,</mo><mn>1</mn><mo>≤</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">1≤T≤10^5,1≤p,q≤10^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> ，要求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">1≤a,b≤10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span> ）</p><h1 id="试差"><a class="markdownIt-Anchor" href="#试差"></a> 试差</h1><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>在 p,q 化为最简后，等价于寻找 a,b 满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup></mrow><mrow><mi>a</mi><mi>b</mi></mrow></mfrac><mo>=</mo><mfrac><mi>p</mi><mi>q</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{a^2+b^2}{ab}=\frac pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.228608em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，我们只需要预处理出所有小于 1e7 的平方数，依次匹配~<br />时间复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>T</mi><msqrt><mi>p</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(T\sqrt p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.08694em;vertical-align:-0.33693999999999996em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.70306em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathdefault" style="padding-left:0.833em;">p</span></span><span style="top:-2.66306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.33693999999999996em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> twi[<span class="hljs-number">10004</span>];<br><span class="hljs-type">int</span> tti[<span class="hljs-number">10000007</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,p,q;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i*i&lt;=<span class="hljs-number">10000000</span>;i++)<br>    &#123;<br>        twi[i]=i*i;<br>        tti[i*i]=i;<br>    &#125;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;p,&amp;q);<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">2</span> * q) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> g=__gcd(p,q);<br>        p/=g,q/=g;<br>        <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;twi[i]&lt;=p&amp;&amp;!f;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> lst=tti[p-twi[i]];<br>            <span class="hljs-keyword">if</span>(lst&amp;&amp;i*lst==q)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,<span class="hljs-built_in">min</span>(i,lst),<span class="hljs-built_in">max</span>(i,lst));<br>                f=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二进制枚举"><a class="markdownIt-Anchor" href="#二进制枚举"></a> 二进制枚举</h1><h2 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h2><p>我们可以证明 a,b 互质时 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo separator="true">,</mo><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(a^2+b^2,ab)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 成立， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>p</mi><mi>q</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.228608em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>化简后，我们便可以处理出 p 的所有互质因子对 a,b ，并验证与 q 的关系;<br />至于为什么要求是互质因子对，可以简化枚举过程和省略枚举后的约分，由于质因子最多8个（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>⋅</mo><mn>3</mn><mo>⋅</mo><mn>5</mn><mo>⋅</mo><mn>7</mn><mo>⋯</mo><mn>19</mn></mrow><annotation encoding="application/x-tex">2\cdot3\cdot5\cdot 7\cdots19</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">9</span></span></span></span>），所以时间复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>T</mi><msup><mn>2</mn><mn>8</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(T2^8)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ；</p><h2 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll N = <span class="hljs-number">1e7</span>;<br><span class="hljs-type">int</span> pri[N + <span class="hljs-number">7</span>], c = <span class="hljs-number">0</span>, mrk[N + <span class="hljs-number">7</span>];<br><span class="hljs-type">bool</span> n[N + <span class="hljs-number">7</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">prime</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n[<span class="hljs-number">0</span>] = n[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!n[i])<br>            pri[c++] = i, mrk[i] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c &amp;&amp; i * pri[j] &lt;= N; j++)<br>        &#123;<br>            n[i * pri[j]] = <span class="hljs-number">1</span>;<br>            mrk[pri[j] * i] = pri[j];<br>            <span class="hljs-keyword">if</span> (i % pri[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                mrk[pri[j] * i] *= mrk[i];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> v[<span class="hljs-number">10</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>, a, b, p, q;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;p, &amp;q);<br>    <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">2</span> * q)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> g = __gcd(p, q);<br>    p /= g, q /= g;<br>    tot = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (q != <span class="hljs-number">1</span>)<br>    &#123;<br>        v[tot++] = mrk[q];<br>        q /= mrk[q];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-number">1</span> &lt;&lt; tot); i++)<br>    &#123;<br>        a = <span class="hljs-number">1</span>, b = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; tot; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((i &gt;&gt; j) &amp; <span class="hljs-number">1</span>)<br>                a *= v[j];<br>            <span class="hljs-keyword">else</span><br>                b *= v[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a * a + b * b == p)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, <span class="hljs-built_in">min</span>(a, b), <span class="hljs-built_in">max</span>(a, b));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0\n&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">prime</span>();<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="求根公式"><a class="markdownIt-Anchor" href="#求根公式"></a> 求根公式</h1><h2 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h2><p>不妨设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>a</mi><mi>b</mi></mfrac><mo>=</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\frac ab=x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> ，那么有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>p</mi><mi>q</mi></mfrac><mo>=</mo><mi>x</mi><mo>+</mo><mfrac><mn>1</mn><mi>x</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac pq=x+\frac1x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.228608em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7475em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，问题转化为求 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mi>p</mi><mi>x</mi><mo>+</mo><mi>q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">qx^2-px+q=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 的有理根；<br />由于求根公式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>=</mo><mfrac><mrow><mi>p</mi><mo>+</mo><msqrt><mrow><msup><mi>p</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><msup><mi>q</mi><mn>2</mn></msup></mrow></msqrt></mrow><mrow><mn>2</mn><mi>q</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">x=\frac{p+\sqrt{p^2-4q^2}}{2q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.810708em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3296000000000001em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5856065em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mbin mtight">+</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0628478571428572em;"><span class="svg-align" style="top:-3.428571428571429em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="mord mtight" style="padding-left:1.19em;"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">4</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.034847857142857em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.5428571428571431em;"><svg width='400em' height='1.5428571428571431em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3937235714285714em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，在判断根式有理后，即可获得分子分母；<br />时间复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>T</mi><mi>log</mi><mo>⁡</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(T\log p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span> ；</p><h2 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t,p,q;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;p,&amp;q);<br>        <span class="hljs-keyword">if</span> (p &lt; <span class="hljs-number">2</span> * q) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        ll g=__gcd(p,q);<br>        p/=g,q/=g;<br>        ll s=(ll)<span class="hljs-built_in">sqrt</span>(p*p<span class="hljs-number">-4</span>*q*q);<br>        <span class="hljs-keyword">if</span>(s&gt;=<span class="hljs-number">0</span>&amp;&amp;s*s==p*p<span class="hljs-number">-4</span>*q*q)<br>        &#123;<br>            ll fz=p+s,fm=<span class="hljs-number">2</span>*q;<br>            ll gtmp=__gcd(fz,fm);<br>            fz/=gtmp,fm/=gtmp;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>,<span class="hljs-built_in">min</span>(fz,fm),<span class="hljs-built_in">max</span>(fz,fm));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h1><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数论与几何</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>种树-优先队列</title>
    <link href="/2022.01-06/%E7%A7%8D%E6%A0%91-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <url>/2022.01-06/%E7%A7%8D%E6%A0%91-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1792">洛谷 P1792 种树</a></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>我们考虑单个树坑，若此树坑被选择，则两侧树坑都不可选；<br />会存在某种情况，选择两侧的树坑带来的总收益大于此树坑，我们就可以在选择此树坑时向优先队列中加入“后悔项”，权重是其左右两侧的树坑之和减去该树坑（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>v</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">v[i-1]+v[i+1]-v[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>）；</p><p>普适来说，我们构造一种“评价块”，其满足以下性质：</p><ol><li>其长度为奇数；</li><li>其左右端点树坑均认为被种植，并以此隔一种一；</li><li>其权值为区间内所有被种植-未种植，即（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mi mathvariant="normal">被</mi><mi mathvariant="normal">种</mi><mi mathvariant="normal">植</mi></mrow></msub><msub><mi>v</mi><mi>i</mi></msub><mo>−</mo><msub><mo>∑</mo><mrow><mi>j</mi><mi mathvariant="normal">未</mi><mi mathvariant="normal">种</mi><mi mathvariant="normal">植</mi></mrow></msub><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\sum_{i被种植}v_i-\sum_{j未种植}v_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0497100000000001em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord cjk_fallback mtight">被</span><span class="mord cjk_fallback mtight">种</span><span class="mord cjk_fallback mtight">植</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.185818em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord cjk_fallback mtight">未</span><span class="mord cjk_fallback mtight">种</span><span class="mord cjk_fallback mtight">植</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>）；</li><li>其区间内所有子评价块均不独立参与优先队列；</li><li>任意评价块被贪心接受后，都使得总种植数+1；</li><li>所有独立的评价块的并集为整个环，交集为空；</li></ol><p>我们对于这样的评价块，采取这样的策略：</p><ol><li>初始化每个树坑为单独的评价块，权值为树坑的美观值，加入优先队列进行贪心；</li><li>若队顶评价块不独立，则抛出，直至队顶树坑独立；</li><li>将独立的队顶评价块吸收，并建立对应的新评价块（后悔快），新块的范围为本块及左右两相邻块，权值为相邻块权值之和减去本块，并做好不独立和相邻标记；</li></ol><p>如此循环 m 次即可；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll N = <span class="hljs-number">1e7</span>;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">prt</span><br>&#123;<br>    <span class="hljs-type">int</span> v, tl, tr;<br>&#125; p[<span class="hljs-number">200005</span>];<br><span class="hljs-type">bool</span> vis[<span class="hljs-number">200005</span>]; <span class="hljs-comment">//独立标记</span><br>priority_queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; pue;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, ans = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">if</span> (n &lt; m * <span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;p[i].v);<br>        p[i].tr = i + <span class="hljs-number">1</span>;<br>        p[i].tl = i - <span class="hljs-number">1</span>;<br>        pue.<span class="hljs-built_in">push</span>(&#123;p[i].v, i&#125;);<br>    &#125;<br>    p[<span class="hljs-number">1</span>].tl = n, p[n].tr = <span class="hljs-number">1</span>; <span class="hljs-comment">//特殊处理首末块</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (vis[pue.<span class="hljs-built_in">top</span>().second])<br>            pue.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">//清空非独立块</span><br>        pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; now = pue.<span class="hljs-built_in">top</span>();<br>        pue.<span class="hljs-built_in">pop</span>();<br>        ans += now.first;<br>        <span class="hljs-comment">// printf(&quot;%d %d %d\n&quot;,now.second,p[now.second].tl,p[now.second].tr);</span><br>        vis[p[now.second].tl] = vis[p[now.second].tr] = <span class="hljs-number">1</span>; <span class="hljs-comment">//左右不再独立</span><br>        p[now.second].v =<br>            p[p[now.second].tl].v + p[p[now.second].tr].v - p[now.second].v; <span class="hljs-comment">//构建新块权值</span><br>        p[now.second].tl = p[p[now.second].tl].tl;                       <span class="hljs-comment">//更新左右临块</span><br>        p[now.second].tr = p[p[now.second].tr].tr;                       <span class="hljs-comment">//</span><br>        p[p[now.second].tl].tr = now.second;                             <span class="hljs-comment">//</span><br>        p[p[now.second].tr].tl = now.second;                             <span class="hljs-comment">//</span><br>        pue.<span class="hljs-built_in">push</span>(&#123;p[now.second].v, now.second&#125;);<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>牛客小白月赛45（全题解）</title>
    <link href="/2022.01-06/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B45%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/"/>
    <url>/2022.01-06/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B45%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/11222#question">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-%E6%82%AC%E5%B4%96">A 悬崖</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-%E6%95%B0%E6%95%B0">B 数数</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-%E5%B1%B1%E6%A5%82">C 山楂</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E5%88%87%E7%B3%95">D 切糕</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-%E7%AD%91%E5%B7%A2">E 筑巢</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-%E4%BA%A4%E6%8D%A2">F 交换</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p><em>我最开始去洛谷找了半天牛客小白月赛</em></p><h2 id="a-悬崖"><a class="markdownIt-Anchor" href="#a-悬崖"></a> A 悬崖</h2><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>只需要特殊考虑第一次跳不到对面的情况，此时总距离为 x ；<br />其余情况共可跳 n 次，每次距离 x ；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n,x;<br>    cin&gt;&gt;x&gt;&gt;n;<br>    <span class="hljs-keyword">if</span>(n&gt;x)cout&lt;&lt;x;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout&lt;&lt;n*x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="b-数数"><a class="markdownIt-Anchor" href="#b-数数"></a> B 数数</h2><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>即求</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mn>2</mn><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n2i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>经等差数列求和，上式等于 n<sup>2</sup>；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n;<br>    cin&gt;&gt;n;<br>    cout&lt;&lt;n*n;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="c-山楂"><a class="markdownIt-Anchor" href="#c-山楂"></a> C 山楂</h2><p>模拟</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>对于较低一级，显然优先通过 3 个一合成能合成更多的高一级物品，但是这种情况会对剩余的低级物品造成浪费（没有计算分数）；<br />我们可以将剩余的物品加入到前面一些数量为 3 的组中，使其变成数量为 4 的组，要注意可能存在组数小于剩余物品数的情况；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll cnt,x=<span class="hljs-number">0</span>;<br>    ll mrk=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">8</span>;i++)<br>    &#123;<br>        cin&gt;&gt;cnt;<br>        x+=cnt;<br>        ll nxt=x/<span class="hljs-number">3</span>;    <span class="hljs-comment">//nxt为合成高级物品数</span><br>        mrk+=(nxt*<span class="hljs-number">3</span>+<span class="hljs-built_in">min</span>(nxt,x-nxt*<span class="hljs-number">3</span>))*i;<span class="hljs-comment">//min即处理上述情况</span><br>        x=nxt;<br>    &#125;<br>    cout&lt;&lt;mrk;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="d-切糕"><a class="markdownIt-Anchor" href="#d-切糕"></a> D 切糕</h2><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>显然，两个合法串的拼接是合法串，合法串与非法串的拼接是非法串；<br />那么如果总串是非法串，则无论如何切割，都不能保证所有串都是合法串；<br />对于合法串：<br />我们可以找到若干个节点，使得如果在全部节点断开时，每一个子串都是最小的合法串（即不能再拆分成若干合法串的拼接），那么对于所有情况，每个节点都有“切”和“不切”两种情况，假设节点个数为 cnt ，那么结果即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>c</mi><mi>n</mi><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{cnt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7935559999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span></span></span></span> ；<br />我们找出节点的数量即可，显然以任意节点为右端点的前缀串都是合法串，依照此规律即可找出；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>        a=a*a%M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string g;<br>    cin&gt;&gt;g;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>,c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;f&amp;&amp;g[i];i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;(&#x27;</span>)c++;<br>        <span class="hljs-keyword">else</span> c--;<br>        <span class="hljs-keyword">if</span>(c&lt;<span class="hljs-number">0</span>)f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-number">0</span>)cnt++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f&amp;&amp;!c)<span class="hljs-comment">//f=1代表任何前缀均满足左括号数大于等于右括号数</span><br>     <span class="hljs-comment">//c=0代表总串左右括号数相等</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,<span class="hljs-built_in">qm</span>(<span class="hljs-number">2</span>,cnt<span class="hljs-number">-1</span>));<br>        <span class="hljs-comment">//这种情况下最后一个字符的右侧也是一个节点，但是对答案没有贡献</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        cout&lt;&lt;<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="e-筑巢"><a class="markdownIt-Anchor" href="#e-筑巢"></a> E 筑巢</h2><p>树状DP</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>构造状态表示：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[1][i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 代表巢穴包含 i 节点时，在以 i 为根的子树中幸福度最大值；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[0][i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 代表巢穴不含 i 节点时，在以 i 为根的子树中幸福度最大值；<br />定义初态：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>p</mi><mi>o</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[1][i]=po[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> ，即该点的幸福度；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mo>−</mo><mtext>inf</mtext></mrow><annotation encoding="application/x-tex">dp[0][i]=-\text{inf}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord text"><span class="mord">inf</span></span></span></span></span> ，即某足够小值；<br />确定状态转移方程：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>+</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>j</mi><mo>∈</mo><msub><mtext>son</mtext><mi>i</mi></msub></mrow></msub><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>i</mi><msub><mi>s</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[1][i]+=\sum_{j\in\text{son}_i}\max(0,dp[1][j]+dis_{i,j})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">+</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.185818em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">son</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo><mi>max</mi><mo>⁡</mo></mo><mrow><mi>j</mi><mo>∈</mo><msub><mtext>son</mtext><mi>i</mi></msub></mrow></msub><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[0][i]=\max_{j\in\text{son}_i}(dp[0][i],\max(dp[1][j],dp[0][j]))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop"><span class="mop">max</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">son</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>；<br />最终的结果即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\max(dp[0][1],dp[1][1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> ；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n;<br>ll po[<span class="hljs-number">100005</span>];<br>vector&lt;pair&lt;<span class="hljs-type">int</span>,ll&gt;&gt;rod[<span class="hljs-number">100005</span>];<br>ll dp[<span class="hljs-number">2</span>][<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    dp[<span class="hljs-number">1</span>][x]=po[x];<br>    dp[<span class="hljs-number">0</span>][x]=(ll)<span class="hljs-number">-1e14</span><span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;rod[x].<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(rod[x][i].first!=f)<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(rod[x][i].first,x);<br>            dp[<span class="hljs-number">1</span>][x]+=<span class="hljs-built_in">max</span>(<span class="hljs-number">0ll</span>,rod[x][i].second+dp[<span class="hljs-number">1</span>][rod[x][i].first]);<br>            dp[<span class="hljs-number">0</span>][x]=<span class="hljs-built_in">max</span>(dp[<span class="hljs-number">0</span>][x],<span class="hljs-built_in">max</span>(dp[<span class="hljs-number">1</span>][rod[x][i].first],dp[<span class="hljs-number">0</span>][rod[x][i].first]));<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> u,v;<br>    ll w;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;po[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>,&amp;u,&amp;v,&amp;w);<br>        rod[u].<span class="hljs-built_in">push_back</span>(&#123;v,w&#125;);<br>        rod[v].<span class="hljs-built_in">push_back</span>(&#123;u,w&#125;);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>    cout&lt;&lt;<span class="hljs-built_in">max</span>(dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="f-交换"><a class="markdownIt-Anchor" href="#f-交换"></a> F 交换</h2><p>模拟，字典树</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>我们首先可以发现，给定序列按照某指令集子串顺行转换为升序序列 即意味着 升序序列按指令集某子串逆行可转换为给定串；<br />其次我们也可以发现，如果给定串的排序后序列是1~10序列的前缀，则意味着该1~10序列按照排序的过程逆向执行得到的串的前缀也是给定串；<br />然后看到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>2</mn><mtext>e</mtext><mn>3</mn></mrow><annotation encoding="application/x-tex">n\leqslant2\text e3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord text"><span class="mord">e</span></span><span class="mord">3</span></span></span></span> ，我们便可以意识到某固定串经过所有指令集子串处理的结果是可以枚举获得的；<br />既然我们的目标是将给定串升序排序，依照以上三点结论，我们可以直接将串<code>1 2 3 4 5 6 7 8 9 10</code>逆向执行指令集的每一个子串，并把得到的结果和需要的操作数记录在字典树中，方便以后匹配；<br />对于每一个执行结果的每一个前缀，我们已经发现后面的内容是同质的（即前缀相同时，后缀内容不影响前缀的生成），我们便可以对于每一个前缀只存储最少的操作数；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><p>经测试，以下代码中 short 均改为 int 亦可AC ；<br />为了方便操作，我将 1~10 串变为了 0~9 的 string，本质是相同的；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>pair&lt;<span class="hljs-type">short</span>,<span class="hljs-type">short</span>&gt;pr[<span class="hljs-number">2003</span>];<br><span class="hljs-keyword">struct</span> <br>&#123;<br>    <span class="hljs-type">int</span> son[<span class="hljs-number">10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">short</span> mx=<span class="hljs-number">5000</span>;<br>&#125;dict[<span class="hljs-number">12000007</span>];<br><span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mt</span><span class="hljs-params">(string g,<span class="hljs-type">short</span> x)</span><span class="hljs-comment">//加入字典树</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//cout&lt;&lt;x&lt;&lt;&#x27; &#x27;&lt;&lt;g&lt;&lt;endl;</span><br>    <span class="hljs-type">int</span> now=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!dict[now].son[g[i]-<span class="hljs-string">&#x27;0&#x27;</span>])<br>        &#123;<br>            dict[now].son[g[i]-<span class="hljs-string">&#x27;0&#x27;</span>]=++idx;<br>            now=idx;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            now=dict[now].son[g[i]-<span class="hljs-string">&#x27;0&#x27;</span>];<br>        &#125;<br>        dict[now].mx=<span class="hljs-built_in">min</span>(dict[now].mx,x);<span class="hljs-comment">//更新前缀的最小操作数</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">short</span> <span class="hljs-title">ck</span><span class="hljs-params">(string g,<span class="hljs-type">int</span> k)</span><span class="hljs-comment">//查找匹配的前缀</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> now=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!dict[now].son[g[i]-<span class="hljs-string">&#x27;0&#x27;</span>])<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">5000</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            now=dict[now].son[g[i]-<span class="hljs-string">&#x27;0&#x27;</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dict[now].mx;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;pr[i].first,&amp;pr[i].second);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        string tmp1=<span class="hljs-string">&quot;0123456789&quot;</span>;<br>        <span class="hljs-comment">//string tmp2=&quot;9876543210&quot;;</span><br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<span class="hljs-built_in">mt</span>(tmp1,<span class="hljs-number">0</span>);<span class="hljs-comment">//,mt(tmp2,0);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&gt;=<span class="hljs-number">1</span>;j--)<br>        &#123;<br>            <span class="hljs-built_in">swap</span>(tmp1[pr[j].first<span class="hljs-number">-1</span>],tmp1[pr[j].second<span class="hljs-number">-1</span>]);<br>            <span class="hljs-comment">//swap(tmp2[pr[j].first-1],tmp2[pr[j].second-1]);</span><br>            <span class="hljs-built_in">mt</span>(tmp1,i-j+<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//mt(tmp2,i-j+1);</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> k,tp;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        string g1=<span class="hljs-string">&quot;0000000000&quot;</span>;<br>        <span class="hljs-comment">//string g2=&quot;0000000000&quot;;</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tp);<br>            tp--;<br>            g1[i]=tp+<span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-comment">//g2[i]=9-tp+&#x27;0&#x27;;</span><br>        &#125;<br>        tp=<span class="hljs-built_in">ck</span>(g1,k);<br>        <span class="hljs-comment">//cout&lt;&lt;g1&lt;&lt;&#x27; &#x27;&lt;&lt;g2&lt;&lt;endl;</span><br>        <span class="hljs-comment">//tp=min(ck(g1,k),ck(g2,k));</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(tp==<span class="hljs-number">5000</span>)?<span class="hljs-number">-1</span>:tp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上代码中，被注释掉的有关 <code>tmp2</code> 和 <code>g2</code> 的部分是关于逆序排序的，如果字典树内存加倍的话，也可以正常处理逆序排序结果；<br />被题目描述坑了QAQ；</p><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>矿场搭建-点双</title>
    <link href="/2021.07-12/%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA-%E7%82%B9%E5%8F%8C/"/>
    <url>/2021.07-12/%E7%9F%BF%E5%9C%BA%E6%90%AD%E5%BB%BA-%E7%82%B9%E5%8F%8C/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3225">洛谷 P3225 [HNOI2012]矿场搭建</a></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>满足<code>无论哪个挖煤点坍塌之后，其他挖煤点的工人都有一条道路通向救援出口</code>即说明出口与点双存在一定的对应关系；</p><p>可以认为，同一个连通块内的不用点双由一个个割点“切”开的，也就是说，一个点双内会有若干个（含0）割点，我们可以对此进行分类讨论；</p><p>假设当前点双总结点数为 c ，割点数为 d ；</p><ol><li>若 c=0 ，则需要一个出口，即在唯一的节点上；</li><li>若 d=0，则需要两个出口进行互保，不同的方案数有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>c</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">c(c-1)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 种；</li><li>若 d=1，则需要一个出口，在非割点，即若割点坍塌，可从出口逃离，若出口坍塌，可从割点到其他点双逃离，不同方案有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">c-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 种；</li><li>若 d&gt;=2，则不需要出口，无论哪个点坍塌，都可以从现存的割点逃离；</li></ol><p>在具体实现上，我们可以在处理割点的同时处理出来点双，对于每个点双进行统计，最终维护出答案；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e8</span>;<br><span class="hljs-type">int</span> vis[N];<br><span class="hljs-type">int</span> ctp[N];<br>stack&lt;<span class="hljs-type">int</span>&gt; s;       <span class="hljs-comment">//dfs栈</span><br>vector&lt;<span class="hljs-type">int</span>&gt; rod[N]; <span class="hljs-comment">//存路</span><br><span class="hljs-type">int</span> dfn[N], dc = <span class="hljs-number">1</span>; <span class="hljs-comment">//dfs存储dfs入序，dc用于分配dfs序</span><br><span class="hljs-type">int</span> low[N];         <span class="hljs-comment">//low存储节点下子树通过返祖边所连接的最小dfs序</span><br><span class="hljs-type">int</span> cut[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; scc[N];<br><span class="hljs-type">int</span> sc = <span class="hljs-number">1</span>; <span class="hljs-comment">//scc存储每个双连通分量内的元素，sc分配双连通分量编号</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    s.<span class="hljs-built_in">push</span>(u);<br>    cut[u]=(u==r)?<span class="hljs-number">0</span>:<span class="hljs-number">1</span>;<br>    low[u] = dfn[u] = dc++;<br>    <span class="hljs-keyword">if</span> (u == r &amp;&amp; rod[u].<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> now = s.<span class="hljs-built_in">top</span>();<br>        s.<span class="hljs-built_in">pop</span>();<br>        scc[sc].<span class="hljs-built_in">push_back</span>(now);<br>        sc++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; rod[u].<span class="hljs-built_in">size</span>(); j++)<br>    &#123;<br>        <span class="hljs-type">int</span> to = rod[u][j];<br>        <span class="hljs-keyword">if</span> (!dfn[to])<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(to, r);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[to]);<br>            <span class="hljs-keyword">if</span> (low[to] &gt;= dfn[u])<br>            &#123;<br>                <span class="hljs-type">int</span> now;<br>                <span class="hljs-keyword">do</span><br>                &#123;<br>                    now = s.<span class="hljs-built_in">top</span>();<br>                    s.<span class="hljs-built_in">pop</span>();<br>                    scc[sc].<span class="hljs-built_in">push_back</span>(now);<br>                &#125; <span class="hljs-keyword">while</span> (now != to);<br>                scc[sc].<span class="hljs-built_in">push_back</span>(u);<br>                sc++;<br>                cut[u]++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[to]);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, a, b,cc=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; m&amp;&amp;m)<br>    &#123;<br>        <span class="hljs-type">int</span> mx=<span class="hljs-number">0</span>;<br>        dc=<span class="hljs-number">1</span>,sc=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>            vis[a]=<span class="hljs-number">1</span>,vis[b]=<span class="hljs-number">1</span>;<br>            mx=<span class="hljs-built_in">max</span>(mx,a);<br>            mx=<span class="hljs-built_in">max</span>(mx,b);<br>            rod[a].<span class="hljs-built_in">push_back</span>(b);<br>            rod[b].<span class="hljs-built_in">push_back</span>(a);<br>        &#125;<br>        <span class="hljs-type">int</span> mn=<span class="hljs-number">0</span>;<span class="hljs-comment">//出口数</span><br>        ll cmn=<span class="hljs-number">1</span>;<span class="hljs-comment">//方案数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= mx; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (vis[i]&amp;&amp;!dfn[i])<br>            &#123;<br>                <span class="hljs-built_in">dfs</span>(i, i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;sc;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<span class="hljs-comment">//统计割点</span><br>            <span class="hljs-keyword">if</span>(scc[i].<span class="hljs-built_in">size</span>()==<span class="hljs-number">1</span>)<br>            &#123;<br>                mn++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;scc[i].<span class="hljs-built_in">size</span>();j++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(cut[scc[i][j]]&gt;=<span class="hljs-number">2</span>)cnt++;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)<br>                &#123;<br>                    mn+=<span class="hljs-number">2</span>;<br>                    cmn*=(<span class="hljs-number">1ll</span>*scc[i].<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)*<span class="hljs-number">1ll</span>*scc[i].<span class="hljs-built_in">size</span>()/<span class="hljs-number">2</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">1</span>)<br>                &#123;<br>                    mn++;<br>                    cmn*=<span class="hljs-number">1ll</span>*(scc[i].<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>                &#125;<br>            &#125;<br>            scc[i].<span class="hljs-built_in">clear</span>();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=mx;i++)<span class="hljs-comment">//初始化</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(vis[i])<br>            &#123;<br>                vis[i]=<span class="hljs-number">0</span>;<br>                ctp[i]=<span class="hljs-number">0</span>;<br>                rod[i].<span class="hljs-built_in">clear</span>();<br>                dfn[i]=low[i]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %d %lld\n&quot;</span>,cc++,mn,cmn);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>图与树</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BLO-Blockade-割点</title>
    <link href="/2021.07-12/BLO-Blockade-%E5%89%B2%E7%82%B9/"/>
    <url>/2021.07-12/BLO-Blockade-%E5%89%B2%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3469">洛谷P3469 [POI2008]BLO-Blockade</a></p><h2 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h2><p>给定一张无向连通图，求每个点被删除之后有多少个有序点对(x,y) (x!=y,1&lt;=x,y&lt;=n)满足x无法到达y；</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题首先考虑的便是和求割点相关；</p><p>对于每个割点，以下称<strong>当这个点被删除时，当前连通块分裂出的几个连通块</strong>为“被割集”，记第 i 个被割集的元素数量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ；</p><p>对于每个节点，其造成的影响 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mi>r</mi><mi>k</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mn>2</mn><mo>+</mo><mo>∑</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>−</mo><msub><mi>c</mi><mi>i</mi></msub><mo stretchy="false">)</mo><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">brk[i]=(n-1)*2+\sum(n-1-c_i)c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ；对于非割点，影响仅有前一项；</p><p>在判断割点的整个dfs过程中，记以节点 i 为根的dfs树元素数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>t</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">ctp[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> ，满足<code>low[to] &gt;= dfn[u]</code>的子节点显然有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>j</mi></msub><mo>=</mo><mi>c</mi><mi>t</mi><msub><mi>p</mi><mrow><mi>t</mi><mi>o</mi></mrow></msub></mrow><annotation encoding="application/x-tex">c_j=ctp_{to}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mord mathdefault mtight">o</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，造成的影响是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>−</mo><msub><mi>c</mi><mi>j</mi></msub><mo stretchy="false">)</mo><msub><mi>c</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">(n-1-c_j)c_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ，即每个被割集和整个图的其他部分均被分离；</p><p>当然，对于每个割点，还有一个特殊的被割集，即为包含该割点的父节点的被割集，记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">c_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>0</mn></msub><mo>=</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>−</mo><msub><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow></msub><msub><mi>c</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">c_0=n-1-\sum_{j=1}c_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.185818em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ，影响量同上；</p><p>实际实现中，并不需要特判割点计算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">c_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，对于非割点，影响量为0；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e8</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; rod[N]; <span class="hljs-comment">//存路</span><br><span class="hljs-type">int</span> dfn[N], dc = <span class="hljs-number">1</span>; <span class="hljs-comment">//dfs存储dfs入序，dc用于分配dfs序</span><br><span class="hljs-type">int</span> low[N];         <span class="hljs-comment">//low存储节点下子树经过一次边所连接的最小dfs序</span><br><span class="hljs-type">int</span> cut[N];         <span class="hljs-comment">//cut存储该点是否为割点</span><br>ll n;<br>ll brk[N];          <span class="hljs-comment">//brk存储该点的答案</span><br>ll ctp[N];<span class="hljs-comment">//ctp存储dfs树中，以该点为根的子树大小</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    low[u] = dfn[u] = dc++;<br>    cut[u] = (u == r) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>    brk[u] = (n - <span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>    ctp[u] = <span class="hljs-number">1</span>;<br>    ll tmp = <span class="hljs-number">0</span>, stp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; rod[u].<span class="hljs-built_in">size</span>(); j++)<br>    &#123;<br>        <span class="hljs-type">int</span> to = rod[u][j];<br>        <span class="hljs-keyword">if</span> (!dfn[to])<br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(to, r);<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], low[to]);<br>            ctp[u] += ctp[to];<br>            <span class="hljs-keyword">if</span> (low[to] &gt;= dfn[u])<br>                cut[u]++, tmp += ctp[to] * (n - ctp[to] - <span class="hljs-number">1</span>), stp += ctp[to];<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            low[u] = <span class="hljs-built_in">min</span>(low[u], dfn[to]);<br>        &#125;<br>    &#125;<br>    brk[u] += tmp + (n - stp - <span class="hljs-number">1</span>) * stp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m, a, b;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br>        rod[a].<span class="hljs-built_in">push_back</span>(b);<br>        rod[b].<span class="hljs-built_in">push_back</span>(a);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, brk[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>图与树</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-线段树</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/454316#overview">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-lowbit">A Lowbit</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-ezzat-and-grid">B Ezzat and Grid</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-%E5%A5%87%E6%95%B0%E5%9B%BD">C 奇数国</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E6%95%8C%E5%85%B5%E5%B8%83%E9%98%B5">D 敌兵布阵</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-i-hate-it">E I Hate It</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-transformation">F Transformation</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li></ul></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢学长的讲解与付出；</p><p>感谢ph和zsl两位大佬的指导与讨论；</p><p>夹带私货：<br />此节课的代表性的内容已经整理到自己的贴子中：<a href="https://blog.csdn.net/Tan_Yuu/article/details/117451839">【笔记】数据结构</a></p><p>线段树本身相对抽象，一些题又有懒标记的要求，实在不太好理解；<br />从应用来讲，线段树可以快速地进行区间修改与区间查询，但是所需空间复杂度比较大，有时需要离散化处理；</p><h2 id="a-lowbit"><a class="markdownIt-Anchor" href="#a-lowbit"></a> A Lowbit</h2><p><a href="https://blog.csdn.net/acm_durante/article/details/117963867">参考</a></p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>朴素来讲，我们会在进行区间更改时递归到所有叶节点进行lowbit更改，但是这种做法会被卡T；</p><p>我们可以发现，若某叶节点元素 a 满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">lowbit(a)=a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>a</mi></mrow><annotation encoding="application/x-tex">a+lowbit(a)=2a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">a</span></span></span></span>，并且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">lowbit(a)=a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>的性质不会改变；<br />除此之外，若某节点 s 下所有叶节点元素 a 均满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">lowbit(a)=a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>，则对 s 区间进行操作后，等价与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">2s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">s</span></span></span></span>，并且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>=</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">lowbit(a)=a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>的性质也不会改变；</p><p>我们可以用此性质，懒标记存储此节点有多少次二倍操作未下传，就可以一定程度上降低时间复杂度；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r, is; <span class="hljs-comment">//l,r为节点的左右界</span><br>    ll sum, lt;   <span class="hljs-comment">//sum为节点值，lt为懒标记</span><br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span> | <span class="hljs-number">1</span>];<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span><span class="hljs-comment">//qm即quick_mod</span></span><br><span class="hljs-function"></span>&#123;<br>ll ans=<span class="hljs-number">1</span>%M;<span class="hljs-comment">//特殊处理M=1这一特殊情况</span><br><span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=a*ans%M;<span class="hljs-comment">//如果b此位为1</span><br>a=a*a%M;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">lowbit</span><span class="hljs-params">(ll x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(ll x)</span> </span>&#123; <span class="hljs-keyword">return</span> !(x - <span class="hljs-built_in">lowbit</span>(x)); &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> <span class="hljs-comment">//对懒标记进行下传</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].lt)<br>    &#123;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].sum=segt[p &lt;&lt; <span class="hljs-number">1</span>].sum*<span class="hljs-built_in">qm</span>(<span class="hljs-number">2</span>,segt[p].lt)%M;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sum=segt[p &lt;&lt; <span class="hljs-number">1</span>|<span class="hljs-number">1</span>].sum*<span class="hljs-built_in">qm</span>(<span class="hljs-number">2</span>,segt[p].lt)%M;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].lt+=segt[p].lt;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>|<span class="hljs-number">1</span>].lt+=segt[p].lt;<br>        segt[p].lt = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr, segt[p].lt = <span class="hljs-number">0</span>, segt[p].sum = <span class="hljs-number">0</span>, segt[p].is = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;segt[p].sum);<br>        segt[p].is = <span class="hljs-built_in">check</span>(segt[p].sum);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>    segt[p].is = segt[p&lt;&lt;<span class="hljs-number">1</span>].is&amp;&amp;segt[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].is;<br>    <span class="hljs-keyword">if</span> (segt[p].is)<br>        segt[p].sum %= M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">icg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr &amp;&amp; segt[p].is)<br>    &#123;<br>        segt[p].sum &lt;&lt;= <span class="hljs-number">1</span>;<br>        segt[p].lt++;<br>        segt[p].sum %= M;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (segt[p].l == segt[p].r)<br>    &#123;<br>        segt[p].sum += <span class="hljs-built_in">lowbit</span>(segt[p].sum);<br>        segt[p].is = <span class="hljs-built_in">check</span>(segt[p].sum);<br>        <span class="hljs-keyword">if</span> (segt[p].is)<br>            segt[p].sum %= M;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>    segt[p].is = segt[p&lt;&lt;<span class="hljs-number">1</span>].is&amp;&amp;segt[p&lt;&lt;<span class="hljs-number">1</span>|<span class="hljs-number">1</span>].is;<br>    segt[p].sum %= M;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>        <span class="hljs-keyword">return</span> segt[p].sum;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    ll val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr), val %= M;<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr), val %= M;<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, t, q, l, r, o;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;o, &amp;l, &amp;r);<br>            <span class="hljs-keyword">if</span> (o == <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">icg</span>(<span class="hljs-number">1</span>, l, r);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o == <span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>, l, r));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-ezzat-and-grid"><a class="markdownIt-Anchor" href="#b-ezzat-and-grid"></a> B Ezzat and Grid</h2><p><a href="https://blog.csdn.net/Stevenwuxu/article/details/119611897">参考</a><br />线段树+dp</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>首先左右界的数据范围过大，需要离散化处理；</p><p>定义dp函数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>为以第i行为末尾的最长可行序列长度，在线段树内存储结点下前i-1行该节点内的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>最大值；<br />对于某一行的若干的区间，假设有区间内的可行序列长度最大值为a，则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dp[i]=a+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；<br />同时持续更新答案的最大值（即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>）即可；</p><p>但是此题要求输出应被删掉的点，就需要在维护线段树时同时记录该最大值对应的行号，在进行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>的修改时同时标记<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">fa[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>即可；<br />再通过上溯找到没有在这个序列中的点即可；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">6e5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r; <span class="hljs-comment">//l,r为节点的左右界</span><br>    ll lt;    <span class="hljs-comment">//sum为节点值，lt为懒标记</span><br>    pair&lt;ll, <span class="hljs-type">int</span>&gt; sum;<br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span> | <span class="hljs-number">1</span>];<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>, ch = <span class="hljs-number">1</span>, gh[<span class="hljs-number">600005</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">300005</span>], fa[<span class="hljs-number">300005</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> <span class="hljs-comment">//对懒标记进行下传</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].lt)<br>    &#123;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].sum = segt[p].sum;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum = segt[p].sum;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].lt = segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lt = <span class="hljs-number">1</span>;<br>        segt[p].lt = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr, segt[p].lt = <span class="hljs-number">0</span>, segt[p].sum = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        <span class="hljs-comment">//scanf(&quot;%lld&quot;, &amp;segt[p].sum);</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    segt[p].sum = <span class="hljs-built_in">max</span>(segt[p &lt;&lt; <span class="hljs-number">1</span>].sum, segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">icg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr, pair&lt;ll, <span class="hljs-type">int</span>&gt; d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (d &gt;= segt[p].sum)<br>            segt[p].sum = d, segt[p].lt = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr, d);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr, d);<br>    segt[p].sum = <span class="hljs-built_in">max</span>(segt[p &lt;&lt; <span class="hljs-number">1</span>].sum, segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum);<br>&#125;<br><span class="hljs-function">pair&lt;ll, <span class="hljs-type">int</span>&gt; <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>        <span class="hljs-keyword">return</span> segt[p].sum;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    pair&lt;ll, <span class="hljs-type">int</span>&gt; val = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        val = <span class="hljs-built_in">max</span>(val, <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr));<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        val = <span class="hljs-built_in">max</span>(val, <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr));<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br>pair&lt;<span class="hljs-type">int</span>, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; opt;<br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; iq[<span class="hljs-number">300005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;opt.first, &amp;opt.second.first, &amp;opt.second.second);<br>        gh[c++] = opt.second.first;<br>        gh[c++] = opt.second.second;<br>        iq[opt.first].<span class="hljs-built_in">push_back</span>(opt.second);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(gh, gh + c);<br>    mp[gh[<span class="hljs-number">0</span>]] = ch++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; c; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (gh[i] == gh[i - <span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">continue</span>;<br>        mp[gh[i]] = ch++;<br>    &#125;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, ch);<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>, tail = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br><br>        pair&lt;ll, <span class="hljs-type">int</span>&gt; mx = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; iq[i].<span class="hljs-built_in">size</span>(); j++)<br>        &#123;<br>            pair&lt;ll, <span class="hljs-type">int</span>&gt; g = <span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>, mp[iq[i][j].first], mp[iq[i][j].second]);<br>            <span class="hljs-keyword">if</span> (g &gt; mx)<br>                mx = g;<br>        &#125;<br>        dp[i] = mx.first + <span class="hljs-number">1</span>;<br>        fa[i] = mx.second;<br>        <span class="hljs-keyword">if</span> (dp[i] &gt; ans)<br>        &#123;<br>            ans = dp[i];<br>            tail = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; iq[i].<span class="hljs-built_in">size</span>(); j++)<br>        &#123;<br>            <span class="hljs-built_in">icg</span>(<span class="hljs-number">1</span>, mp[iq[i][j].first], mp[iq[i][j].second], &#123;dp[i], i&#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, n - ans);<br>    <span class="hljs-keyword">if</span> (ans != n)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        <span class="hljs-type">int</span> now = tail, p = n;<br>        <span class="hljs-keyword">while</span> (p != now)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p--);<br>            &#125;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>            p--;<br>            now = fa[now];<br>            <span class="hljs-keyword">while</span> (p != now)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p--);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!now)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="c-奇数国"><a class="markdownIt-Anchor" href="#c-奇数国"></a> C 奇数国</h2><p><a href="https://blog.csdn.net/weixin_33785972/article/details/93396185">参考</a></p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>朴素来讲，我们可以在维护乘积线段树的同时，用一个桶数组维护结点的乘积值内有什么质数，有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>p</mi><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>i</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>p</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>i</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mtext> </mtext><mi mathvariant="normal">∣</mi><mtext> </mtext><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>p</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>i</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">st[p].pri[i]=st[p&lt;&lt;1].pri[i]\ |\ st[p&lt;&lt;1|1].pri[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mord">.</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mord">.</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace"> </span><span class="mord">∣</span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mord">1</span><span class="mclose">]</span><span class="mord">.</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>；</p><p>但是如此存储的话，时间即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>60</mn><mi>n</mi><mo separator="true">⋅</mo><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">60n\cdotp \log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mord">0</span><span class="mord mathdefault">n</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>，约为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>7</mn><mi>e</mi><mn>7</mn></mrow><annotation encoding="application/x-tex">7e7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord mathdefault">e</span><span class="mord">7</span></span></span></span>，比较悬；</p><p>但是仔细观察，60个质数的存在性不必用数组维护，还可以用long long内的数位维护，用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>p</mi><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>i</mi><mo>&gt;</mo><mo>&gt;</mo><mi>i</mi><mo stretchy="false">)</mo><mi mathvariant="normal">&amp;</mi><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[(st[p].pri&gt;&gt;i)\&amp;1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mord">.</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mord">&amp;</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>表示p结点下是否有质数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，更新时变成了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>p</mi><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>i</mi><mo>=</mo><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>p</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>i</mi><mtext> </mtext><mi mathvariant="normal">∣</mi><mtext> </mtext><mi>s</mi><mi>t</mi><mo stretchy="false">[</mo><mi>p</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">.</mi><mi>p</mi><mi>r</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">st[p].pri=st[p&lt;&lt;1].pri\ |\ st[p&lt;&lt;1|1].pri</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mord">.</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mord">.</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mspace"> </span><span class="mord">∣</span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mord">1</span><span class="mclose">]</span><span class="mord">.</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span></span></span></span>，时间复杂度降低啦；</p><p>最后结合快速幂和逆元进行欧拉函数值的求取即可；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">19961993</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;     <span class="hljs-comment">//l,r为节点的左右界</span><br>    ll sum, ppos; <span class="hljs-comment">//sum为节点值</span><br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span> | <span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> pri[<span class="hljs-number">62</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">37</span>,<br>               <span class="hljs-number">41</span>, <span class="hljs-number">43</span>, <span class="hljs-number">47</span>, <span class="hljs-number">53</span>, <span class="hljs-number">59</span>, <span class="hljs-number">61</span>, <span class="hljs-number">67</span>, <span class="hljs-number">71</span>, <span class="hljs-number">73</span>, <span class="hljs-number">79</span>, <span class="hljs-number">83</span>, <span class="hljs-number">89</span>, <span class="hljs-number">97</span>,<br>               <span class="hljs-number">101</span>, <span class="hljs-number">103</span>, <span class="hljs-number">107</span>, <span class="hljs-number">109</span>, <span class="hljs-number">113</span>, <span class="hljs-number">127</span>, <span class="hljs-number">131</span>, <span class="hljs-number">137</span>, <span class="hljs-number">139</span>, <span class="hljs-number">149</span>,<br>               <span class="hljs-number">151</span>, <span class="hljs-number">157</span>, <span class="hljs-number">163</span>, <span class="hljs-number">167</span>, <span class="hljs-number">173</span>, <span class="hljs-number">179</span>, <span class="hljs-number">181</span>, <span class="hljs-number">191</span>, <span class="hljs-number">193</span>, <span class="hljs-number">197</span>, <span class="hljs-number">199</span>,<br>               <span class="hljs-number">211</span>, <span class="hljs-number">223</span>, <span class="hljs-number">227</span>, <span class="hljs-number">229</span>, <span class="hljs-number">233</span>, <span class="hljs-number">239</span>, <span class="hljs-number">241</span>, <span class="hljs-number">251</span>, <span class="hljs-number">257</span>, <span class="hljs-number">263</span>, <span class="hljs-number">269</span>, <span class="hljs-number">271</span>, <span class="hljs-number">277</span>, <span class="hljs-number">281</span>&#125;;<br><br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a % M;<br>        a = a * a % M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr, segt[p].ppos = <span class="hljs-number">2</span>, segt[p].sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        segt[p].sum = <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    segt[p].sum = (segt[p &lt;&lt; <span class="hljs-number">1</span>].sum * segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum) % M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pcg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, ll v, ll pnow)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].l == segt[p].r)<br>    &#123;<br>        segt[p].sum = v;<br>        segt[p].ppos = pnow;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = segt[p].l + segt[p].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid)<br>        <span class="hljs-built_in">pcg</span>(p &lt;&lt; <span class="hljs-number">1</span>, x, v, pnow);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">pcg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x, v, pnow);<br>    segt[p].sum = (segt[p &lt;&lt; <span class="hljs-number">1</span>].sum * segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum) % M;<br>    segt[p].ppos = segt[p &lt;&lt; <span class="hljs-number">1</span>].ppos | segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].ppos;<br>&#125;<br><span class="hljs-function">pair&lt;ll, ll&gt; <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>        <span class="hljs-keyword">return</span> &#123;segt[p].sum, segt[p].ppos&#125;;<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    pair&lt;ll, ll&gt; val = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, tmp = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>    &#123;<br>        tmp = <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr);<br>        val.first = val.first*tmp.first%M;<br>        val.second |= tmp.second;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>    &#123;<br>        tmp = <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr);<br>        val.first = val.first*tmp.first%M;<br>        val.second |= tmp.second;<br>    &#125;<br>    val.first%=M;<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">100000</span>, m;<br>    ll a, b, c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span> (m--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>,&amp;a,&amp;b,&amp;c);<br>        <span class="hljs-keyword">if</span>(!a)<br>        &#123;<br>            pair&lt;ll, ll&gt;tmp=<span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>,b,c);<br>            ll ans=tmp.first;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">60</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>((tmp.second&gt;&gt;i)&amp;<span class="hljs-number">1ll</span>)<br>                &#123;<br>                    ans=(ans-(ans*<span class="hljs-built_in">qm</span>(pri[i],M<span class="hljs-number">-2</span>))%M+M)%M;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ll pnow=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">60</span>;i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(c%pri[i]==<span class="hljs-number">0</span>)pnow|=(<span class="hljs-number">1ll</span>&lt;&lt;i);<br>            &#125;<br>            <span class="hljs-built_in">pcg</span>(<span class="hljs-number">1</span>,b,c,pnow);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="d-敌兵布阵"><a class="markdownIt-Anchor" href="#d-敌兵布阵"></a> D 敌兵布阵</h2><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>板~</p><p>单点修改，区间查询</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;<span class="hljs-comment">//l,r为节点的左右界</span><br>    ll sum, lt;<span class="hljs-comment">//sum为节点值，lt为懒标记</span><br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr, segt[p].lt = <span class="hljs-number">0</span>, segt[p].sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;segt[p].sum);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pcg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, ll v)</span><span class="hljs-comment">//不兼容懒标记</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].l == segt[p].r)<br>    &#123;<br>        segt[p].sum += v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = segt[p].l + segt[p].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid)<br>        <span class="hljs-built_in">pcg</span>(p &lt;&lt; <span class="hljs-number">1</span>, x, v);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">pcg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x, v);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>        <span class="hljs-keyword">return</span> segt[p].sum;<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    ll val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,n,a,b,c=<span class="hljs-number">1</span>;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d:\n&quot;</span>,c++);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        string o;<br>        <span class="hljs-keyword">while</span>(cin&gt;&gt;o&amp;&amp;o!=<span class="hljs-string">&quot;End&quot;</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>            <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&quot;Query&quot;</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>,a,b));<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&quot;Add&quot;</span>)<br>            &#123;<br>                <span class="hljs-built_in">pcg</span>(<span class="hljs-number">1</span>,a,b);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&quot;Sub&quot;</span>)<br>            &#123;<br>                <span class="hljs-built_in">pcg</span>(<span class="hljs-number">1</span>,a,-b);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-i-hate-it"><a class="markdownIt-Anchor" href="#e-i-hate-it"></a> E I Hate It</h2><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>板~</p><p>单点修改，区间查询</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;<span class="hljs-comment">//l,r为节点的左右界</span><br>    ll sum, lt;<span class="hljs-comment">//sum为节点值，lt为懒标记</span><br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span>|<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr, segt[p].lt = <span class="hljs-number">0</span>, segt[p].sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;segt[p].sum);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    segt[p].sum = <span class="hljs-built_in">max</span>(segt[p &lt;&lt; <span class="hljs-number">1</span>].sum , segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pcg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x, ll v)</span><span class="hljs-comment">//不兼容懒标记</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].l == segt[p].r)<br>    &#123;<br>        segt[p].sum = v;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = segt[p].l + segt[p].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid)<br>        <span class="hljs-built_in">pcg</span>(p &lt;&lt; <span class="hljs-number">1</span>, x, v);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">pcg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, x, v);<br>    segt[p].sum =<span class="hljs-built_in">max</span>(segt[p &lt;&lt; <span class="hljs-number">1</span>].sum , segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>        <span class="hljs-keyword">return</span> segt[p].sum;<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    ll val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        val=<span class="hljs-built_in">max</span>(val, <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr));<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        val=<span class="hljs-built_in">max</span>(val, <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr));<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m,n,a,b;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m))<br>    &#123;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>        <span class="hljs-type">char</span> o;<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            cin&gt;&gt;o;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>            <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&#x27;Q&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>,a,b));<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&#x27;U&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">pcg</span>(<span class="hljs-number">1</span>,a,b);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-transformation"><a class="markdownIt-Anchor" href="#f-transformation"></a> F Transformation</h2><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4>p\in\{1,2,3\}$$朴素来讲，我们可以使用三个懒标记和三个值维护未下传的区间加（ad），区间乘（mu），区间更改（cg）操作和区间下的元素和（sum1），元素平方和（sum2），区间立方和（sum3）；但是我们就面临一个问题，如果某位同时存在多种标记，如何判断它们的先后顺序？在查阅资料时发现，有人在更新时选择先把当前结点的其他标记下传，但是被卡t了；我们可以制定以下策略：1. 对某结点进行cg操作时，直接修改三个sum值，清空ad和mu标记；2. 对某结点进行mu操作时（假设区间乘d），维护三个sum值，对现有的ad标记乘d，mu标记也乘d；3. 对某节点进行ad操作时（假设区间加d），通过 完全平方公式 和 完全立方公式 维护三个num值，对现有ad标记加d；以此策略进行维护后，在下传懒标记时只需要以cg，mu，ad的顺序修改子节点就可以规避顺序问题；#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">10007</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;                        <span class="hljs-comment">//l,r为节点的左右界</span><br>    ll sum1, sum2, sum3, ad, mu, cg; <span class="hljs-comment">//sum为节点值</span><br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span> | <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cgcg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, ll d)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].sum1 = d * (segt[p].r - segt[p].l + <span class="hljs-number">1</span>) % M;<br>    segt[p].sum2 = d * d * (segt[p].r - segt[p].l + <span class="hljs-number">1</span>) % M;<br>    segt[p].sum3 = d * d * d * (segt[p].r - segt[p].l + <span class="hljs-number">1</span>) % M;<br>    segt[p].cg = d;<br>    segt[p].ad = <span class="hljs-number">0</span>;<br>    segt[p].mu = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cgmu</span><span class="hljs-params">(<span class="hljs-type">int</span> p, ll d)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].sum1 = segt[p].sum1 * d % M;<br>    segt[p].sum2 = segt[p].sum2 * d * d % M;<br>    segt[p].sum3 = segt[p].sum3 * d * d * d % M;<br>    segt[p].ad = segt[p].ad * d % M;<br>    segt[p].mu = segt[p].mu * d % M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">cgad</span><span class="hljs-params">(<span class="hljs-type">int</span> p, ll d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> lenp = segt[p].r - segt[p].l + <span class="hljs-number">1</span>;<br>    segt[p].sum3 = (segt[p].sum3 + lenp * d * d * d + <span class="hljs-number">3</span> * segt[p].sum1 * d * d + <span class="hljs-number">3</span> * segt[p].sum2 * d) % M;<br>    segt[p].sum2 = (segt[p].sum2 + lenp * d * d + <span class="hljs-number">2</span> * segt[p].sum1 * d) % M;<br>    segt[p].sum1 = (segt[p].sum1 + lenp * d) % M;<br>    segt[p].ad = (segt[p].ad + d) % M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span> <span class="hljs-comment">//对懒标记进行下传</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].cg)<br>    &#123;<br>        <span class="hljs-built_in">cgcg</span>(p &lt;&lt; <span class="hljs-number">1</span>, segt[p].cg);<br>        <span class="hljs-built_in">cgcg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, segt[p].cg);<br>        segt[p].cg = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (segt[p].mu != <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">cgmu</span>(p &lt;&lt; <span class="hljs-number">1</span>, segt[p].mu);<br>        <span class="hljs-built_in">cgmu</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, segt[p].mu);<br>        segt[p].mu = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (segt[p].ad)<br>    &#123;<br>        <span class="hljs-built_in">cgad</span>(p &lt;&lt; <span class="hljs-number">1</span>, segt[p].ad);<br>        <span class="hljs-built_in">cgad</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, segt[p].ad);<br>        segt[p].ad = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr;<br>    segt[p].sum1 = <span class="hljs-number">0</span>, segt[p].sum2 = <span class="hljs-number">0</span>, segt[p].sum3 = <span class="hljs-number">0</span>;<br>    segt[p].ad = <span class="hljs-number">0</span>, segt[p].mu = <span class="hljs-number">1</span>, segt[p].cg = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        <span class="hljs-comment">//scanf(&quot;%lld&quot;, &amp;segt[p].sum);</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">icg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr, <span class="hljs-type">int</span> o, ll d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">cgad</span>(p, d);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-built_in">cgmu</span>(p, d);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o == <span class="hljs-number">3</span>)<br>        &#123;<br>            <span class="hljs-built_in">cgcg</span>(p, d);<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr, o, d);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr, o, d);<br>    segt[p].sum1 = (segt[p &lt;&lt; <span class="hljs-number">1</span>].sum1 + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum1) % M;<br>    segt[p].sum2 = (segt[p &lt;&lt; <span class="hljs-number">1</span>].sum2 + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum2) % M;<br>    segt[p].sum3 = (segt[p &lt;&lt; <span class="hljs-number">1</span>].sum3 + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum3) % M;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr, <span class="hljs-type">int</span> k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> segt[p].sum1;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> segt[p].sum2;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">return</span> segt[p].sum3;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    ll val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr, k);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr, k);<br>    <span class="hljs-keyword">return</span> val % M;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, x, y, d, o;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) &amp;&amp; (n || m))<br>    &#123;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">while</span> (m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;o, &amp;x, &amp;y, &amp;d);<br>            <span class="hljs-keyword">if</span>(o!=<span class="hljs-number">4</span>)<br>            &#123;<br>                <span class="hljs-built_in">icg</span>(<span class="hljs-number">1</span>,x,y,o,d);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>,x,y,d));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>## G Can you answer these queries?#### 思路朴素地想，对于一次修改，递归到叶节点进行平方根操作，很不幸，会卡时间；但是我们可以发现，如果某叶节点的值若为1或0，则进行平方根修改并不能影响其的值；这样就可以进行标记，如果某节点下所有点都是1或0，则不需要对其进行修改，降低了复杂度；这道题很坑的一点是，区间左右界的相对大小并不明确，需要修正非法数据；#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;   <span class="hljs-comment">//l,r为节点的左右界</span><br>    ll sum, lt; <span class="hljs-comment">//sum为节点值，lt为懒标记</span><br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr, segt[p].lt = <span class="hljs-number">0</span>, segt[p].sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;segt[p].sum);<br>        segt[p].lt = segt[p].sum &lt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>    segt[p].lt = (segt[p &lt;&lt; <span class="hljs-number">1</span>].lt == <span class="hljs-number">1</span> &amp;&amp; segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lt == <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">icg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].lt)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (segt[p].l == segt[p].r)<br>    &#123;<br>        segt[p].sum = (ll)<span class="hljs-built_in">sqrt</span>(segt[p].sum*<span class="hljs-number">1.0</span>);<br>        segt[p].lt = segt[p].sum &lt;= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>    segt[p].lt = (segt[p &lt;&lt; <span class="hljs-number">1</span>].lt == <span class="hljs-number">1</span> &amp;&amp; segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lt == <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>        <span class="hljs-keyword">return</span> segt[p].sum;<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    ll val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, q, l, r, k, c = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d:\n&quot;</span>, c++);<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;q);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;k, &amp;l, &amp;r);<br>            <span class="hljs-keyword">if</span>(l&gt;r)<span class="hljs-built_in">swap</span>(l,r);<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>)<br>                <span class="hljs-built_in">icg</span>(<span class="hljs-number">1</span>, l, r);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>, l, r));<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>## H A Simple Problem with Integers#### 思路板~区间修改，区间查询；#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;<span class="hljs-comment">//l,r为节点的左右界</span><br>    ll sum, lt;<span class="hljs-comment">//sum为节点值，lt为懒标记</span><br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span> | <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span><span class="hljs-comment">//对懒标记进行下传</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].lt)<br>    &#123;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].sum += segt[p].lt * (segt[p &lt;&lt; <span class="hljs-number">1</span>].r - segt[p &lt;&lt; <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>);<br>        segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum += segt[p].lt * (segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].r - segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>);<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].lt += segt[p].lt;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lt += segt[p].lt;<br>        segt[p].lt = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr, segt[p].lt = <span class="hljs-number">0</span>, segt[p].sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;segt[p].sum);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">icg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr, ll d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>    &#123;<br>        segt[p].sum += d * (segt[p].r - segt[p].l + <span class="hljs-number">1</span>);<br>        segt[p].lt += d;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr, d);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr, d);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>        <span class="hljs-keyword">return</span> segt[p].sum;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    ll val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, q, l, r, k;<br>    <span class="hljs-type">char</span> o;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n,&amp;q))<br>    &#123;<br>        <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>        &#123;<br>            cin&gt;&gt;o;<br>            <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&#x27;C&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;k);<br>                <span class="hljs-built_in">icg</span>(<span class="hljs-number">1</span>,l,r,k);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&#x27;Q&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>,l,r));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>## ED\]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Junk-Mail Filter-并查集</title>
    <link href="/2021.07-12/Junk-Mail%20Filter-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2021.07-12/Junk-Mail%20Filter-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=2473">HDUOJ.2473 Junk-Mail Filter</a><br /><a href="https://blog.csdn.net/weixin_30371875/article/details/94772644">题解参考</a></p><h4 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h4><p>共对n个元素进行m次操作，操作共有两种，<code>M a b</code>为定义a与b为同一类元素，<code>S a</code>定义为将a节点与其他节点分离；<br />输出共有几类元素；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>我们可以将元素用代表元代替：<br />每一次该元素被分离是，就给它定义一个新的代表元，并定义该代表元的根为其自己；<br />同时，对于旧的树状结构，下级元素的根依然为该元素的旧代表元，所以不会影响旧关系的传递；</p><p>这样就可以将不同的关系之间分离开，不会互相干扰；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> rep[N];<br><span class="hljs-type">int</span> fa[<span class="hljs-number">1100006</span>];<span class="hljs-comment">//Nmax+Mmax</span><br><span class="hljs-type">int</span> fg[<span class="hljs-number">1100006</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]==x)<span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,a,b,faa,fbb,ccs=<span class="hljs-number">1</span>,crep;<br>    <span class="hljs-type">char</span> o;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m)&amp;&amp;(n||m))<br>    &#123;<br>        crep=n+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//初始化</span><br>        &#123;<br>            rep[i]=i;<br>            fa[i]=i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>        &#123;<br>            cin&gt;&gt;o;<br>            <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&#x27;M&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>                faa=<span class="hljs-built_in">find</span>(rep[a]);<br>                fbb=<span class="hljs-built_in">find</span>(rep[b]);<br>                <span class="hljs-keyword">if</span>(faa!=fbb)<span class="hljs-comment">//操作代表元</span><br>                &#123;<br>                    fa[faa]=fbb;<br>                &#125;  <br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&#x27;S&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a);<br>                rep[a]=crep;<span class="hljs-comment">//更新代表元</span><br>                fa[crep]=crep;<br>                crep++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(fg,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> fg);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!fg[<span class="hljs-built_in">find</span>(rep[i])])<span class="hljs-comment">//fg标记该集合是否统计过</span><br>            &#123;<br>                fg[<span class="hljs-built_in">find</span>(rep[i])]=<span class="hljs-number">1</span>;<br>                ans++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %d\n&quot;</span>,ccs++,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-树状数组</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/453737#overview">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-ultra-quicksort">A Ultra-QuickSort</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-stars">B Stars</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-2">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-mobile-phones">C Mobile phones</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-3">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-cows">D Cows</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-4">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-get-many-persimmon-trees">E Get Many Persimmon Trees</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-5">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-matrix">F Matrix</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-6">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#g-moofest">G MooFest</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-7">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#h-disharmony-trees">H Disharmony Trees</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#i-kikis-k-number">I KiKi’s K-Number</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-8">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li><li><a href="#j-reverse-prime">J Reverse Prime</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-9">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-10">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-10">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢学长的讲解与付出；</p><p>感谢ph和zsl两位大佬的指导与讨论；</p><p>夹带私货：<br />此节课的代表性的内容已经整理到自己的贴子中：<a href="https://blog.csdn.net/Tan_Yuu/article/details/117451839">【笔记】数据结构</a></p><p>树状数组总的来说可以快速对数组进行单点更改和区间查询（或通过维护前缀实现区间更改和单点查询），适用于一些边改边查的情况；</p><h2 id="a-ultra-quicksort"><a class="markdownIt-Anchor" href="#a-ultra-quicksort"></a> A Ultra-QuickSort</h2><h4 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h4><p><s>在一个马桶搋子<strong>图片</strong>的陪同下</s> 求逆序对；<br />有定义：若 i &lt; j ，且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&gt;</mo><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_i\gt a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> ，则构成一对逆序对；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>有两种做法，暂且称之为归并法和树状数组法，大体相同，但树状数组法更加直观，具体做法可以参考PPT，下面简述一下归并法；</p><p>在归并排序的过程中，我们会得到两个有序递增数组（暂称为a数组和b数组），其中保证左数组（a）的下标均小于右数组（b）；</p><p>在通过双指针将两个数组合并时，若对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">b_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 存在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>b</mi><mi>j</mi></msub><mo>&lt;</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_i\lt b_j\lt a_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>，则说明 a数组中从 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>后的每个数都可以和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">b_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 构成逆序对；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll a[<span class="hljs-number">500005</span>];<br>ll tmp[<span class="hljs-number">500005</span>];<br>ll ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qs</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">qs</span>(l, mid);<br>    <span class="hljs-built_in">qs</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>, c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (a[i] &lt;= a[j])<br>            tmp[c++] = a[i++];<br>        <span class="hljs-keyword">else</span><br>            tmp[c++] = a[j++],ans+=mid-i+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid)<br>        tmp[c++] = a[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r)<br>        tmp[c++] = a[j++];<br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++ ) a[i] = tmp[j];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;a[i]);<br>        &#125;<br>        ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">qs</span>(<span class="hljs-number">1</span>,n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-stars"><a class="markdownIt-Anchor" href="#b-stars"></a> B Stars</h2><h4 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h4><p>给出星星坐标，求出以每个星星为原点，其第三象限（含象限边界）内的星星数；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>由于输入是将星星按<strong>先以纵坐标升序，再以横坐标升序</strong>顺序输入的，我们可以保证对于新输入的星星，目前在场的所有星星纵坐标皆小于等于它，只需要判断横坐标小于等于它的星星有多少颗即可；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<span class="hljs-keyword">return</span> x&amp;-x;&#125;<br><span class="hljs-type">int</span> c[<span class="hljs-number">32003</span>],n=<span class="hljs-number">32001</span>,ans[<span class="hljs-number">15003</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(;x;x-=<span class="hljs-built_in">lowbit</span>(x))ans+=c[x];<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> v)</span><span class="hljs-comment">//a[p]+=v;</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(;x&lt;=n;x+=<span class="hljs-built_in">lowbit</span>(x))c[x]+=v;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m,x,y;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        cin&gt;&gt;x&gt;&gt;y;<br>        x++,y++;<br>        ans[<span class="hljs-built_in">sum</span>(x)]++;<br>        <span class="hljs-built_in">add</span>(x,<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-mobile-phones"><a class="markdownIt-Anchor" href="#c-mobile-phones"></a> C Mobile phones</h2><h4 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h4><p>对一个二维平面进行单点数值修改和区块数值总和查询；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p><s>模拟</s></p><p>通过二维树状数组维护即可~</p><p>板子已经更新到帖子中；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> c[<span class="hljs-number">1025</span>][<span class="hljs-number">1025</span>], n = <span class="hljs-number">1024</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i))<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &gt; <span class="hljs-number">0</span>; j -= <span class="hljs-built_in">lowbit</span>(j))<br>            ans += c[i][j];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//a[p]+=v;</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= n; i += <span class="hljs-built_in">lowbit</span>(i))<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &lt;= n; j += <span class="hljs-built_in">lowbit</span>(j))<br>            c[i][j] += v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> o, x, y, a, l, b, r, t;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;o) &amp;&amp; o != <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;a);<br>            x++, y++;<br>            <span class="hljs-built_in">add</span>(x,y, a);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o == <span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;l, &amp;b, &amp;r, &amp;t);<br>            l++, b++, r++, t++;<br>            <span class="hljs-type">int</span> ans = <span class="hljs-built_in">sum</span>(r,t)-<span class="hljs-built_in">sum</span>(r,b<span class="hljs-number">-1</span>)+ <span class="hljs-built_in">sum</span>(l<span class="hljs-number">-1</span>,b<span class="hljs-number">-1</span>)-<span class="hljs-built_in">sum</span>(l<span class="hljs-number">-1</span>,t);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-cows"><a class="markdownIt-Anchor" href="#d-cows"></a> D Cows</h2><h4 id="题目大意-4"><a class="markdownIt-Anchor" href="#题目大意-4"></a> 题目大意</h4><p>给出每头牛对应的区间，对每头牛求出有多少个区间覆盖（至多一个端点相同）它的区间；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>可以先按右端点降序，左端点升序的顺序排序，若有两区间完全重合，同时保证了两区间排序后必相邻；</p><p>排序后对与每头牛，可以保证所有右端点大于其的牛都在它的左侧，如果我们统计的同时在数组中添加该头牛的左端点，则对于每头牛只需要计数目前在其左端点以左有多少个左端点即可；</p><p>注意特判重合区间；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> c[<span class="hljs-number">100005</span>],ans[<span class="hljs-number">100005</span>];<br><span class="hljs-type">int</span> N=<span class="hljs-number">100001</span>;<br>pair&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;,<span class="hljs-type">int</span>&gt;pir[<span class="hljs-number">100005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(;x;x-=<span class="hljs-built_in">lowbit</span>(x))ans+=c[x];<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> v)</span><span class="hljs-comment">//a[x]+=v;</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(;x&lt;=N;x+=<span class="hljs-built_in">lowbit</span>(x))c[x]+=v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(pair&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;,<span class="hljs-type">int</span>&gt;a,pair&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;,<span class="hljs-type">int</span>&gt;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.first.second==b.first.second)<br>    &#123;<br>        <span class="hljs-keyword">return</span> a.first.first&lt;b.first.first;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a.first.second&gt;b.first.second;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(c,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> c);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;pir[i].first.first,&amp;pir[i].first.second);<br>            pir[i].first.first++,pir[i].first.second++;<br>            pir[i].second=i;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(pir+<span class="hljs-number">1</span>,pir+<span class="hljs-number">1</span>+n,cmp1);<br>        <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pir[i].first==pir[i<span class="hljs-number">-1</span>].first)ans[pir[i].second]=ans[pir[i<span class="hljs-number">-1</span>].second];<br>            <span class="hljs-keyword">else</span><br>                ans[pir[i].second]=<span class="hljs-built_in">sum</span>(pir[i].first.first);<br>            <span class="hljs-built_in">add</span>(pir[i].first.first,<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans[i]);<br>            <span class="hljs-keyword">if</span>(i!=n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-get-many-persimmon-trees"><a class="markdownIt-Anchor" href="#e-get-many-persimmon-trees"></a> E Get Many Persimmon Trees</h2><h4 id="题目大意-5"><a class="markdownIt-Anchor" href="#题目大意-5"></a> 题目大意</h4><p>给出总区域大小，每棵树的坐标和可选区域的大小，求所有可选区域中树的最大值；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>不需要树状数组，用二维前缀和穷举即可；</p><p>做题的时候没意识到这一点，代码中用了树状数组；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> c[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>], X = <span class="hljs-number">100</span>,Y=<span class="hljs-number">100</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i))<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &gt; <span class="hljs-number">0</span>; j -= <span class="hljs-built_in">lowbit</span>(j))<br>            ans += c[i][j];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//a[x][y]+=v;</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= X; i += <span class="hljs-built_in">lowbit</span>(i))<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &lt;= Y; j += <span class="hljs-built_in">lowbit</span>(j))<br>            c[i][j] += v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> w,h,x,y,s,t;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)&amp;&amp;n)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(c,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> c);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;w,&amp;h);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>            <span class="hljs-built_in">add</span>(x,y,<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;s,&amp;t);<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=s;i&lt;=w;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=t;j&lt;=h;j++)<br>            &#123;<br>                ans=<span class="hljs-built_in">max</span>(ans,<span class="hljs-built_in">sum</span>(i,j)-<span class="hljs-built_in">sum</span>(i-s,j)+<span class="hljs-built_in">sum</span>(i-s,j-t)-<span class="hljs-built_in">sum</span>(i,j-t));<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="f-matrix"><a class="markdownIt-Anchor" href="#f-matrix"></a> F Matrix</h2><h4 id="题目大意-6"><a class="markdownIt-Anchor" href="#题目大意-6"></a> 题目大意</h4><p>二维区间修改，单点查询；</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>可以通过树状数组维护二位前缀和实现；</p><p>实际上不需要做翻转的动作，只需要判断奇偶即可；</p><p>注意输出要求；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> c[<span class="hljs-number">1003</span>][<span class="hljs-number">1003</span>], X = <span class="hljs-number">1000</span>, Y = <span class="hljs-number">1000</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i))<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &gt; <span class="hljs-number">0</span>; j -= <span class="hljs-built_in">lowbit</span>(j))<br>            ans += c[i][j];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//a[x][y]+=v;</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= X; i += <span class="hljs-built_in">lowbit</span>(i))<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = y; j &lt;= Y; j += <span class="hljs-built_in">lowbit</span>(j))<br>            c[i][j] += v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t, n, x, x1, y1, x2, y2;<br>    <span class="hljs-type">char</span> o;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;x);<br>        <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> c);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; i++)<br>        &#123;<br>            cin&gt;&gt;o;<br>            <span class="hljs-keyword">if</span> (o == <span class="hljs-string">&#x27;C&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);<br>                <span class="hljs-built_in">add</span>(x1, y1, <span class="hljs-number">1</span>);<br>                <span class="hljs-built_in">add</span>(x2 + <span class="hljs-number">1</span>, y2 + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>                <span class="hljs-built_in">add</span>(x1, y2 + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>                <span class="hljs-built_in">add</span>(x2 + <span class="hljs-number">1</span>, y1, <span class="hljs-number">-1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o == <span class="hljs-string">&#x27;Q&#x27;</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;x1, &amp;y1);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">sum</span>(x1, y1) &amp; <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-moofest"><a class="markdownIt-Anchor" href="#g-moofest"></a> G MooFest</h2><h4 id="题目大意-7"><a class="markdownIt-Anchor" href="#题目大意-7"></a> 题目大意</h4><p>给定每头牛的位置<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和音量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，定义两牛<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i,j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>交流所需要的代价为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>b</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo separator="true">⋅</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">abs(x_i-x_j)\cdotp max(v_i,v_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，求所有牛对（N(N-1)/2对）进行互相交流的总代价；</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>我们可以按v升序排序，可以保证每头牛j  和前面交流时的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">max(v_i,v_j)=v_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>；</p><p>接下来需要处理<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>b</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">abs(x_i-x_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>：<br />我们可以维护前面所有牛的坐标和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">sumx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">x</span></span></span></span> ，再通过树状数组求出前面牛中比此牛坐标小的坐标之和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> 和头数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> ；<br />那么此时的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>i</mi><mo>&lt;</mo><mi>j</mi></mrow></msubsup><mi>a</mi><mi>b</mi><mi>s</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>m</mi><mi>x</mi><mo>−</mo><mi>s</mi><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><mo separator="true">⋅</mo><mo stretchy="false">(</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>x</mi><mi>j</mi></msub><mo separator="true">⋅</mo><mi>k</mi><mo>−</mo><mi>s</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{i&lt;j}abs(x_i-x_j)=sumx-s-x_j\cdotp (j-1-k)+x_j\cdotp k-s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.264274em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>；</p><p>即可求出此牛和前面所有牛交流所用代价；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>pair&lt;<span class="hljs-type">int</span>,ll&gt; c[<span class="hljs-number">20004</span>];<br><span class="hljs-type">int</span> N=<span class="hljs-number">20000</span>;<br>pair&lt;<span class="hljs-type">int</span>,ll&gt;pir[<span class="hljs-number">20004</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><br><span class="hljs-function">pair&lt;<span class="hljs-type">int</span>,ll&gt; <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    pair&lt;<span class="hljs-type">int</span>,ll&gt; ans =<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i))<br>            ans.second += c[i].second,ans.first+=c[i].first;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, pair&lt;<span class="hljs-type">int</span>,ll&gt; v)</span> <span class="hljs-comment">//a[x][y]+=v;</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;=N; i += <span class="hljs-built_in">lowbit</span>(i))<br>            c[i].first += v.first,c[i].second+=v.second;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lld&quot;</span>,&amp;pir[i].first,&amp;pir[i].second);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(pir+<span class="hljs-number">1</span>,pir+<span class="hljs-number">1</span>+n);<br>    ll sumx=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        pair&lt;<span class="hljs-type">int</span>,ll&gt;res=<span class="hljs-built_in">sum</span>(pir[i].second);<br>        ans+=pir[i].first*<br>            ((sumx-res.second-pir[i].second*((i<span class="hljs-number">-1</span>)-res.first))+pir[i].second*res.first-res.second);<br>        <span class="hljs-built_in">add</span>(pir[i].second,<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>,pir[i].second));<br>        sumx+=pir[i].second;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-disharmony-trees"><a class="markdownIt-Anchor" href="#h-disharmony-trees"></a> H Disharmony Trees</h2><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>和G类似~</p><p>另外地，此题需要将坐标和高度转换为顺序；</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>pair&lt;ll,ll&gt; c[<span class="hljs-number">100005</span>];<br>pair&lt;pair&lt;ll,ll&gt;,pair&lt;ll,ll&gt; &gt; te[<span class="hljs-number">100005</span>];<span class="hljs-comment">//&lt;x,h&gt;</span><br><span class="hljs-type">int</span> N = <span class="hljs-number">100000</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><br><span class="hljs-function">pair&lt;ll,ll&gt; <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    pair&lt;ll,ll&gt; ans = <span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i))<br>            ans.second += c[i].second,ans.first+=c[i].first;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= N; i += <span class="hljs-built_in">lowbit</span>(i))<br>            c[i].second += v,c[i].first++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(pair&lt;pair&lt;ll,ll&gt;,pair&lt;ll,ll&gt; &gt;a,pair&lt;pair&lt;ll,ll&gt;,pair&lt;ll,ll&gt; &gt;b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.first.second&lt;b.first.second;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(c,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> c);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;te[i].first.first,&amp;te[i].first.second);<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(te+<span class="hljs-number">1</span>,te+<span class="hljs-number">1</span>+n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(te[i].first.first==te[i<span class="hljs-number">-1</span>].first.first)<br>            &#123;<br>                te[i].second.first=te[i<span class="hljs-number">-1</span>].second.first;<br>            &#125;<br>            <span class="hljs-keyword">else</span> te[i].second.first=i;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(te+<span class="hljs-number">1</span>,te+<span class="hljs-number">1</span>+n,cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(te[i].first.second==te[i<span class="hljs-number">-1</span>].first.second)<br>            &#123;<br>                te[i].second.second=te[i<span class="hljs-number">-1</span>].second.second;<br>            &#125;<br>            <span class="hljs-keyword">else</span> te[i].second.second=i;<br>        &#125;<br>        ll ans=<span class="hljs-number">0</span>,sumx=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)<br>        &#123;<br>            pair&lt;ll,ll&gt;tmp=<span class="hljs-built_in">sum</span>(te[i].second.first);<br>            ans+=(sumx-tmp.second-te[i].second.first*(n-i-tmp.first)+tmp.first*te[i].second.first-tmp.second)*te[i].second.second;<br>            sumx+=te[i].second.first;<br>            <span class="hljs-built_in">add</span>(te[i].second.first,te[i].second.first);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-kikis-k-number"><a class="markdownIt-Anchor" href="#i-kikis-k-number"></a> I KiKi’s K-Number</h2><h4 id="题目大意-8"><a class="markdownIt-Anchor" href="#题目大意-8"></a> 题目大意</h4><p>对于一个容器，有三种操作：<br />加入数字e，删除数字e，查询大于a的第k个数；</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>大体上可以用桶排的思路进行加入和删除维护；</p><p>对于查询，我们可以使用二分的思想快速确定；</p><p>具体看代码~</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> c[<span class="hljs-number">100005</span>], N = <span class="hljs-number">100001</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i))<br>            ans += c[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> v)</span> <span class="hljs-comment">//a[x][y]+=v;</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= N; i += <span class="hljs-built_in">lowbit</span>(i))<br>            c[i] += v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m,p,e,k;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m))<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(c,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> c);<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;p,&amp;e);<br>            e++;<br>            <span class="hljs-keyword">if</span>(p==<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">add</span>(e,<span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p==<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sum</span>(e)-<span class="hljs-built_in">sum</span>(e<span class="hljs-number">-1</span>))<br>                &#123;<br>                    <span class="hljs-built_in">add</span>(e,<span class="hljs-number">-1</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No Elment!\n&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>                <span class="hljs-type">int</span> l=e,r=N+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span>(l&lt;r)<br>                &#123;<br>                    <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sum</span>(mid)-<span class="hljs-built_in">sum</span>(e)&gt;=k)r=mid;<br>                    <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(l==N+<span class="hljs-number">1</span>)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not Find!\n&quot;</span>);<br>                <span class="hljs-keyword">else</span> <br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,l<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-reverse-prime"><a class="markdownIt-Anchor" href="#j-reverse-prime"></a> J Reverse Prime</h2><h4 id="题目大意-9"><a class="markdownIt-Anchor" href="#题目大意-9"></a> 题目大意</h4><p>定义了“反向指数”，要求进行两种操作：<br />删除反向质数e，查询前 i 个反向质数的质因数数量之和；</p><h4 id="思路-10"><a class="markdownIt-Anchor" href="#思路-10"></a> 思路</h4><p>具体查询过程和 I 题类似；</p><p>对于一个被删除的的反向质数，我们可以标记删除，并在维护质因数数量的树状数组中的那一位清零（删除等量的质因数）；<br />对于查询操作，使用二分思想，找到该位之前满足剩余 i 个的位置；</p><h4 id="代码-10"><a class="markdownIt-Anchor" href="#代码-10"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> c[<span class="hljs-number">80004</span>],N = <span class="hljs-number">78500</span> , del[<span class="hljs-number">80004</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><br><span class="hljs-function">ll <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>* c,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans =<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &gt; <span class="hljs-number">0</span>; i -= <span class="hljs-built_in">lowbit</span>(i))<br>            ans += c[i];<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> *c,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = x; i &lt;= N; i += <span class="hljs-built_in">lowbit</span>(i))<br>            c[i]+= v;<br>&#125;<br><br><span class="hljs-type">int</span> n[<span class="hljs-number">1000006</span>],p[<span class="hljs-number">80004</span>],ct[<span class="hljs-number">80004</span>],rp[<span class="hljs-number">80004</span>];<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> cp=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;<span class="hljs-number">1000000</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!n[i])p[cp++]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;cp&amp;&amp;p[j]*i&lt;<span class="hljs-number">1000000</span>;j++)<br>        &#123;<br>            n[p[j]*i]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cp;i++)<br>    &#123;<br>        ll as=<span class="hljs-number">0</span>,tmp=p[i];<br>        <span class="hljs-keyword">for</span>(tmp;tmp;tmp/=<span class="hljs-number">10</span>)<br>        &#123;<br>            as*=<span class="hljs-number">10</span>,as+=tmp%<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(as&lt;<span class="hljs-number">1000000</span>)as*=<span class="hljs-number">10</span>;<br>        rp[i+<span class="hljs-number">1</span>]=as;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(rp+<span class="hljs-number">1</span>,rp+cp+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=cp;i++)<br>    &#123;<br>        ll as=rp[i];<br>        <span class="hljs-comment">//printf(&quot;%d\n&quot;,as);</span><br>        mp[as]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;p[j]&lt;=<span class="hljs-built_in">sqrt</span>(as)&amp;&amp;j&lt;cp;j++)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(as%p[j]==<span class="hljs-number">0</span>)<br>            &#123;<br>                as/=p[j];<br>                ct[i]++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(as&gt;<span class="hljs-number">1</span>)ct[i]++;<br>        <span class="hljs-built_in">add</span>(c,i,ct[i]);<br>    &#125;<br>    <span class="hljs-comment">//printf(&quot;%d&quot;,ct[1]);</span><br>    <span class="hljs-type">char</span> o;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;o)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>        <span class="hljs-keyword">if</span>(o==<span class="hljs-string">&#x27;d&#x27;</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> i=mp[x];<br>            mp[x]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(!i)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-built_in">add</span>(del,i,<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">add</span>(c,i,-ct[i]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            x++;<br>            <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">78498</span>)x=<span class="hljs-number">78498</span>;<br>            <span class="hljs-type">int</span> l=x,r=<span class="hljs-number">78499</span>;<br>            <span class="hljs-keyword">while</span>(l&lt;r)<br>            &#123;<br>                <span class="hljs-type">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(mid-<span class="hljs-built_in">sum</span>(del,mid)&gt;=x)r=mid;<br>                <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">sum</span>(c,l));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-并查集</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%88ABCDEFGIJ%EF%BC%89/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%88ABCDEFGIJ%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/452390#overview">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-%E9%A3%9F%E7%89%A9%E9%93%BE">A 食物链</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-%E5%85%B3%E6%8A%BC%E7%BD%AA%E7%8A%AF">B 关押罪犯</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E5%88%86%E6%9E%90">C 程序自动分析</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91">D 最小生成树</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-lomsat-gelral">E Lomsat gelral</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-%E4%BF%AE%E5%A4%8D%E5%85%AC%E8%B7%AF">F 修复公路</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#g-%E5%A5%B6%E9%85%AA">G 奶酪</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#i-city">I City</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-2">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#j-the-child-and-zoo">J The Child and Zoo</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-3">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢ph和zsl两位大佬的指导与讨论；</p><h2 id="a-食物链"><a class="markdownIt-Anchor" href="#a-食物链"></a> A 食物链</h2><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>查看PDF即可~<br />两种做法，下面代码中选择了扩展域；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">150004</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (fa[x] == x)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k, ans = <span class="hljs-number">0</span>, o, a, b, i;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span> * n; i++)<br>        fa[i] = i;<br>    <span class="hljs-keyword">while</span> (k--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;o, &amp;a, &amp;b);<br>        <span class="hljs-keyword">if</span> (a &gt; n || b &gt; n)<br>        &#123;<br>            ans++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-number">1</span>) <span class="hljs-comment">//同类</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(a + n) == <span class="hljs-built_in">find</span>(b) || <span class="hljs-built_in">find</span>(a + <span class="hljs-number">2</span> * n) == <span class="hljs-built_in">find</span>(b))<br>                ans++;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                fa[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b);<br>                fa[<span class="hljs-built_in">find</span>(a + n)] = <span class="hljs-built_in">find</span>(b + n);<br>                fa[<span class="hljs-built_in">find</span>(a + <span class="hljs-number">2</span> * n)] = <span class="hljs-built_in">find</span>(b + <span class="hljs-number">2</span> * n);<br>                <span class="hljs-comment">//按同类维护</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o == <span class="hljs-number">2</span>) <span class="hljs-comment">//a吃b</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b) || <span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b + n))<br>                ans++;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                fa[<span class="hljs-built_in">find</span>(a + n)] = <span class="hljs-built_in">find</span>(b);<br>                fa[<span class="hljs-built_in">find</span>(a + <span class="hljs-number">2</span> * n)] = <span class="hljs-built_in">find</span>(b + n);<br>                fa[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b + <span class="hljs-number">2</span> * n);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-关押罪犯"><a class="markdownIt-Anchor" href="#b-关押罪犯"></a> B 关押罪犯</h2><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>详见PDF~；</p><p>贪心，优先分配矛盾最严重的，直到无法分配；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll N = <span class="hljs-number">100005</span>;<br><span class="hljs-type">int</span> fa[N] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dat</span><br>&#123;<br>    <span class="hljs-type">int</span> a, b, c;<br>&#125; da[N];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(dat a, dat b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.c &gt; b.c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, i;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;da[i].a, &amp;da[i].b, &amp;da[i].c);<br>    <span class="hljs-built_in">sort</span>(da + <span class="hljs-number">1</span>, da + <span class="hljs-number">1</span> + m, cmp);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n; i++)<br>        fa[i] = i;           <span class="hljs-comment">//初始化</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= m; i++) <span class="hljs-comment">//贪心，从大到小找到第一个发生冲突的</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(da[i].a) == <span class="hljs-built_in">find</span>(da[i].b)) <span class="hljs-comment">//存在冲突</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, da[i].c);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            fa[<span class="hljs-built_in">find</span>(da[i].a)] = <span class="hljs-built_in">find</span>(da[i].b + n);<br>            fa[<span class="hljs-built_in">find</span>(da[i].b)] = <span class="hljs-built_in">find</span>(da[i].a + n);<br>            <span class="hljs-comment">//把一个加入另一个的扩展域，代表放入相异的集合</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-程序自动分析"><a class="markdownIt-Anchor" href="#c-程序自动分析"></a> C 程序自动分析</h2><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>详见PDF~；</p><p>先把要求相同的放在同一集合中，再查看要求不同的是否有冲突；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">200005</span>]; <span class="hljs-comment">//fa数组</span><br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; e0[<span class="hljs-number">200005</span>];<br><span class="hljs-comment">//存储需要不同值的数对，统一判冲</span><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp; <span class="hljs-comment">//映射表</span><br><span class="hljs-type">int</span> c, ce0;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (fa[x] == x)<br>        <span class="hljs-keyword">return</span> x;<br>    <span class="hljs-keyword">return</span> fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t, n, a, b, e;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        mp.<span class="hljs-built_in">clear</span>();<br>        c = <span class="hljs-number">1</span>, ce0 = <span class="hljs-number">0</span>; <span class="hljs-comment">//初始化</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>        <span class="hljs-type">int</span> f = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">200000</span>; i++) <span class="hljs-comment">//初始化</span><br>        &#123;<br>            fa[i] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;e);<br>            <span class="hljs-keyword">if</span> (!mp[a])<br>                mp[a] = c++;<br>            <span class="hljs-keyword">if</span> (!mp[b])<br>                mp[b] = c++;<br>            <span class="hljs-comment">//若值不存在，则为其分配哈希值</span><br>            a = mp[a], b = mp[b];<br>            <span class="hljs-keyword">if</span> (!e)<br>            &#123;<br>                e0[ce0++] = &#123;a, b&#125;;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                fa[<span class="hljs-built_in">find</span>(a)] = <span class="hljs-built_in">find</span>(b); <span class="hljs-comment">//合并</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ce0 &amp;&amp; f; i++) <span class="hljs-comment">//处理需要不同值的值对</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(e0[i].first) == <span class="hljs-built_in">find</span>(e0[i].second))<br>                f = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="d-最小生成树"><a class="markdownIt-Anchor" href="#d-最小生成树"></a> D 最小生成树</h2><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>最小生成树板题~</p><p>这里是直接用天空之城代码改的；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">200005</span>], cnt[<span class="hljs-number">200005</span>];<br>ll len[<span class="hljs-number">200005</span>];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">road</span><br>&#123;<br>    <span class="hljs-type">int</span> fr, to;<br>    ll lrd;<br>&#125; rod[<span class="hljs-number">500005</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(road a, road b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.lrd &lt; b.lrd;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (fa[x] != x)<br>        fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, q, i;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;q))<br>    &#123;<br>        <span class="hljs-type">int</span> g1,g2,glen;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>        &#123;<br>            cin &gt;&gt; g1;<br>            cin &gt;&gt; g2;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;glen);<br>            rod[i].fr = g2, rod[i].to = g1, rod[i].lrd = glen; <span class="hljs-comment">//存路</span><br>        &#125;<br>        <span class="hljs-built_in">sort</span>(rod + <span class="hljs-number">1</span>, rod + <span class="hljs-number">1</span> + q, cmp);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            fa[i] = i, cnt[i] = <span class="hljs-number">1</span>, len[i] = <span class="hljs-number">0</span>; <span class="hljs-comment">//初始化并查集</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> frn = rod[i].fr, ton = rod[i].to;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(frn) != <span class="hljs-built_in">find</span>(ton))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(frn) &gt; <span class="hljs-built_in">find</span>(ton))<br>                    <span class="hljs-built_in">swap</span>(frn, ton);<br>                cnt[<span class="hljs-built_in">find</span>(frn)] += cnt[<span class="hljs-built_in">find</span>(ton)];<br>                len[<span class="hljs-built_in">find</span>(frn)] += len[<span class="hljs-built_in">find</span>(ton)] + rod[i].lrd;<br>                fa[<span class="hljs-built_in">find</span>(ton)] = <span class="hljs-built_in">find</span>(frn);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cnt[<span class="hljs-number">1</span>] == n)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, len[<span class="hljs-number">1</span>]);<br>        <span class="hljs-comment">/* else</span><br><span class="hljs-comment">            printf(&quot;No!\n&quot;); */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-lomsat-gelral"><a class="markdownIt-Anchor" href="#e-lomsat-gelral"></a> E Lomsat gelral</h2><p>按秩合并思想</p><h4 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h4><p>给出树状结构和每个节点的颜色编号，输出以每个节点为根的子树出现次数最多的若干颜色编号之和；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>在dfs搜索时，对某节点下每个子树的颜色需要单独维护，如果对每一子树都重复进行维护和撤销，显然在处理以该节点为根的子树时又需要把这些子树再维护；<br />我们可以保留权重最大的子树，最后处理，处理后再维护其他子树的值，直接作为以该节点为根的整个子树的颜色统计；</p><p>对于颜色统计，我们可以用桶来维护，在搜索最大颜色时不必扫描整个桶数组，以子树的根节点进行dfs即可；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; E[N];<br><span class="hljs-type">int</span> col[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans[N];<br><span class="hljs-type">int</span> tmp[N];<br><span class="hljs-type">bool</span> is[N];<br><span class="hljs-type">int</span> sz[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> mxtmp, astmp;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_inf</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa = <span class="hljs-number">-1</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> it;<br>    <span class="hljs-type">int</span> maxx = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : E[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (t == fa)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">get_inf</span>(t, u);<br>        sz[u] += sz[t];<br>        <span class="hljs-keyword">if</span> (sz[t] &gt; maxx)<br>        &#123;<br>            maxx = sz[t];<br>            it = t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (maxx != <span class="hljs-number">-1</span>)<br>        is[it] = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa = <span class="hljs-number">-1</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    tmp[col[u]]--;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : E[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (t == fa)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">clear</span>(t, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_ans</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa, <span class="hljs-type">int</span> p = <span class="hljs-number">-1</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    tmp[col[u]]++;<br>    <span class="hljs-keyword">if</span> (tmp[col[u]] &gt; mxtmp)<br>    &#123;<br>        mxtmp = tmp[col[u]];<br>        astmp = col[u];<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp[col[u]] == mxtmp)<br>    &#123;<br>        astmp += col[u];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : E[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (t == fa || t == p)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">get_ans</span>(t, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa = <span class="hljs-number">-1</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> t : E[u])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (t == fa)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (is[t])<br>        &#123;<br>            p = t;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(t, u);<br>        <span class="hljs-built_in">clear</span>(t, u);<br>        mxtmp = astmp = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p)<br>        <span class="hljs-built_in">dfs</span>(p, u);<br>    <span class="hljs-built_in">get_ans</span>(u, fa, p);<br>    ans[u] = astmp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;col[i]), sz[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, u, v; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        E[u].<span class="hljs-built_in">push_back</span>(v);<br>        E[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    <span class="hljs-built_in">get_inf</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-修复公路"><a class="markdownIt-Anchor" href="#f-修复公路"></a> F 修复公路</h2><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>最小生成树~</p><p>只不过这里求的是生成树中最大边权；</p><p>同样改自天空之城；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">200005</span>], cnt[<span class="hljs-number">200005</span>]; <span class="hljs-comment">//fa存该城所在集合的根节点（城市），cnt存以该城为根的集合城市数</span><br>ll len[<span class="hljs-number">200005</span>]; <span class="hljs-comment">//len存以该城为根的集合内部的连通代价</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">road</span><br>&#123;<br>    <span class="hljs-type">int</span> fr, to;<br>    ll lrd;<br>&#125; rod[<span class="hljs-number">500005</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(road a, road b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.lrd &lt; b.lrd;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (fa[x] != x)<br>        fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, q, i;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;q))<br>    &#123;<br>        <span class="hljs-type">int</span> g1,g2,glen;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>        &#123;<br>            cin &gt;&gt; g1;<br>            cin &gt;&gt; g2;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;glen);<br>            rod[i].fr = g2, rod[i].to = g1, rod[i].lrd = glen; <span class="hljs-comment">//存路</span><br>        &#125;<br>        <span class="hljs-built_in">sort</span>(rod + <span class="hljs-number">1</span>, rod + <span class="hljs-number">1</span> + q, cmp);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            fa[i] = i, cnt[i] = <span class="hljs-number">1</span>, len[i] = <span class="hljs-number">0</span>; <span class="hljs-comment">//初始化并查集</span><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> frn = rod[i].fr, ton = rod[i].to;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(frn) != <span class="hljs-built_in">find</span>(ton))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(frn) &gt; <span class="hljs-built_in">find</span>(ton))<br>                    <span class="hljs-built_in">swap</span>(frn, ton);<br>                cnt[<span class="hljs-built_in">find</span>(frn)] += cnt[<span class="hljs-built_in">find</span>(ton)];<br>                len[<span class="hljs-built_in">find</span>(frn)] = <span class="hljs-built_in">max</span>(len[<span class="hljs-built_in">find</span>(ton)] , rod[i].lrd); <span class="hljs-comment">//处理连通代价</span><br>                fa[<span class="hljs-built_in">find</span>(ton)] = <span class="hljs-built_in">find</span>(frn);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cnt[<span class="hljs-number">1</span>] == n)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, len[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>); <br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-奶酪"><a class="markdownIt-Anchor" href="#g-奶酪"></a> G 奶酪</h2><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>这里用的是BFS；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ball</span><br>&#123;<br>    <span class="hljs-type">double</span> x,y,z;<br>&#125; bll[<span class="hljs-number">1003</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">double</span> h,r;<br><span class="hljs-type">bool</span> gt[<span class="hljs-number">1003</span>];<br>queue&lt;<span class="hljs-type">int</span>&gt;que;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dis</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (bll[i].x-bll[j].x)*(bll[i].x-bll[j].x)+<br>            (bll[i].y-bll[j].y)*(bll[i].y-bll[j].y)+<br>             (bll[i].z-bll[j].z)*(bll[i].z-bll[j].z)&lt;=<span class="hljs-number">4</span>*r*r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> now=que.<span class="hljs-built_in">front</span>();<br>        <span class="hljs-keyword">if</span>(h-bll[now].z&lt;=r)<br>        &#123;<br>            f=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!gt[i]&amp;&amp;<span class="hljs-built_in">dis</span>(i,now))<br>            &#123;<br>                gt[i]=<span class="hljs-number">1</span>;<br>                que.<span class="hljs-built_in">push</span>(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())que.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(gt,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> gt);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%lf%lf&quot;</span>,&amp;n,&amp;h,&amp;r);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf%lf%lf&quot;</span>,&amp;bll[i].x,&amp;bll[i].y,&amp;bll[i].z);<br>            <span class="hljs-keyword">if</span>(bll[i].z&lt;=r)<br>            &#123;<br>                gt[i]=<span class="hljs-number">1</span>;<br>                que.<span class="hljs-built_in">push</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">bfs</span>())<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-city"><a class="markdownIt-Anchor" href="#i-city"></a> I City</h2><h4 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h4><p>给出城市，道路和道路强度，求问在不同强度的攻击下，有多少城市对之间仍有通路；</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>显然，若对于每一次攻击重新进行搜索是不实际的；</p><p>由于高强度攻击下剩余的道路一定是低强度攻击下剩余道路的子集，所以我们可以从高到低处理询问，逐步添加道路；</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">road</span><br>&#123;<br>    <span class="hljs-type">int</span> a,b,z;<br>&#125; rod[<span class="hljs-number">200005</span>];<br>pair&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; ,ll&gt;tt[<span class="hljs-number">200005</span>];<br><span class="hljs-type">int</span> fa[<span class="hljs-number">200005</span>];<br>ll cnt[<span class="hljs-number">200005</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmpr</span><span class="hljs-params">(road A,road B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> A.z&gt;B.z;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmpt</span><span class="hljs-params">(pair&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; ,ll&gt; A,pair&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; ,ll&gt; B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> A.first.second&gt;B.first.second;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmptt</span><span class="hljs-params">(pair&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; ,ll&gt; A,pair&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; ,ll&gt; B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> A.first.first&lt;B.first.first;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> fa[x]==x?x:fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,m,q;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;rod[i].a,&amp;rod[i].b,&amp;rod[i].z);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tt[i].first.second);<br>            tt[i].first.first=i;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(rod+<span class="hljs-number">1</span>,rod+<span class="hljs-number">1</span>+m,cmpr);<br>        <span class="hljs-built_in">sort</span>(tt+<span class="hljs-number">1</span>,tt+<span class="hljs-number">1</span>+q,cmpt);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            fa[i]=i;<br>            cnt[i]=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;<br>        ll ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>        &#123;<br>            <span class="hljs-comment">//if(rod[j].z&gt;=tt[i].first.second)</span><br>            <span class="hljs-keyword">for</span>(j;rod[j].z&gt;=tt[i].first.second;j++)<br>            &#123;<br>                <span class="hljs-type">int</span> faa=<span class="hljs-built_in">find</span>(rod[j].a),fab=<span class="hljs-built_in">find</span>(rod[j].b);<br>                <span class="hljs-keyword">if</span>(faa!=fab)<br>                &#123;<br>                    ans+=cnt[faa]*cnt[fab];<br>                    fa[faa]=fab;<br>                    cnt[fab]+=cnt[faa];<br>                &#125;<br>            &#125;<br>            tt[i].second=ans;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(tt+<span class="hljs-number">1</span>,tt+<span class="hljs-number">1</span>+q,cmptt);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,tt[i].second);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-the-child-and-zoo"><a class="markdownIt-Anchor" href="#j-the-child-and-zoo"></a> J The Child and Zoo</h2><p>“最大生成树”</p><h4 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h4><p>给定每一个节点的权重和网状结构，定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(i,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span>为 i 到 j 的所有简单路径中，途径节点最小值的最大值；<br />求<br /><img src="https://img-blog.csdnimg.cn/dcccc9c185af4eb88d4cc963cccba5af.png" alt="在这里插入图片描述" /></p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>对于每条道路，道路的权值即可认为是道路两端节点权值的最小值；</p><p>从大到小排列所有道路，生成“最大生成树”，对于每次连接操作，即可认为道路一段所在区块与另一端所在区块的元素两两之间的 f 值均为此道路的权值；</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><p>代码依然修改自天空之城；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> fa[<span class="hljs-number">200005</span>], cnt[<span class="hljs-number">200005</span>],qu[<span class="hljs-number">200005</span>];<br>ll len[<span class="hljs-number">200005</span>];              <span class="hljs-comment">//len存以该城为根的集合内部的连通代价</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">road</span><br>&#123;<br>    <span class="hljs-type">int</span> fr, to;<br>    ll lrd;<br>&#125; rod[<span class="hljs-number">500005</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(road a, road b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.lrd &gt; b.lrd;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (fa[x] != x)<br>        fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, q, i;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;q);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;qu[i]);<br>    <span class="hljs-type">int</span> g1, g2, glen;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>    &#123;<br>        cin &gt;&gt; g1;<br>        cin &gt;&gt; g2;<br>        <span class="hljs-comment">//scanf(&quot;%d&quot;, &amp;glen);</span><br>        rod[i].fr = g2, rod[i].to = g1, rod[i].lrd = <span class="hljs-built_in">min</span>(qu[g1],qu[g2]); <span class="hljs-comment">//存路</span><br>    &#125;<br>    <span class="hljs-built_in">sort</span>(rod + <span class="hljs-number">1</span>, rod + <span class="hljs-number">1</span> + q, cmp);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        fa[i] = i, cnt[i] = <span class="hljs-number">1</span>, len[i] = <span class="hljs-number">0</span>; <span class="hljs-comment">//初始化并查集</span><br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt;= q; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> frn = rod[i].fr, ton = rod[i].to;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(frn) != <span class="hljs-built_in">find</span>(ton))<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(frn) &gt; <span class="hljs-built_in">find</span>(ton))<br>                <span class="hljs-built_in">swap</span>(frn, ton);<br>            ans+=(ll)rod[i].lrd*cnt[<span class="hljs-built_in">find</span>(frn)]*cnt[<span class="hljs-built_in">find</span>(ton)];<br>            cnt[<span class="hljs-built_in">find</span>(frn)] += cnt[<span class="hljs-built_in">find</span>(ton)];<br>            len[<span class="hljs-built_in">find</span>(frn)] += len[<span class="hljs-built_in">find</span>(ton)] + rod[i].lrd;<br>            fa[<span class="hljs-built_in">find</span>(ton)] = <span class="hljs-built_in">find</span>(frn);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.6lf\n&quot;</span>, <span class="hljs-number">1.0</span>*ans/(<span class="hljs-number">1.0</span>*n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>));<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-矩阵连乘</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/451864#overview">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-fibonacci-numbers">A Fibonacci Numbers</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-how-many-fibs">B How Many Fibs?</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-2">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-fibonacci-again">C Fibonacci Again</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-3">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-hats-fibonacci">D Hat’s Fibonacci</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-4">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-fibonacci">E Fibonacci</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-5">题目大意</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-another-kind-of-fibonacci">F Another kind of Fibonacci</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-6">题目大意</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#g-fibonacci-subsequence">G Fibonacci Subsequence</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-7">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢老师的讲解与付出；</p><p>感谢ph和zsl两位大佬的指导与讨论；</p><p>夹带私货：<br />此节课的代表性内容和例题也已经整理到自己的贴子中：<a href="https://blog.csdn.net/Tan_Yuu/article/details/116999151">【笔记】数学</a></p><h2 id="a-fibonacci-numbers"><a class="markdownIt-Anchor" href="#a-fibonacci-numbers"></a> A Fibonacci Numbers</h2><h4 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h4><p>对于大于8位的斐波那契数，输出其前四位及后四位；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>求前四位可以使用近似公式，求后四位可以使用矩阵快速幂对1e4取模；</p><p>使用近似公式求前四位时，由于幂次太高，会爆掉<code>double</code>和<code>long double</code>，我们可以先将其<code>log10</code>，再进行后续运算；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">mtx</span>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">10000</span>;<br><span class="hljs-type">const</span> mtx sd=&#123;&#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;&#125;&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> bas=<span class="hljs-built_in">log10</span>((<span class="hljs-number">1</span>+<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">5</span>))/<span class="hljs-number">2</span>);<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> fiv=<span class="hljs-built_in">log10</span>(<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">5</span>));<br><span class="hljs-type">int</span> f[<span class="hljs-number">1003</span>],c;<br><span class="hljs-function">mtx <span class="hljs-title">mul</span><span class="hljs-params">(mtx A,mtx B)</span></span><br><span class="hljs-function"></span>&#123;<br>mtx C;<br><span class="hljs-built_in">memset</span>(C.a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(C.a));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>;j++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">2</span>;k++)<br>&#123;<br>C.a[i][j]+=A.a[i][k]*B.a[k][j];<br>                C.a[i][j]%=M;<br>&#125;<br><span class="hljs-keyword">return</span> C;<br>&#125;<br><span class="hljs-function">mtx <span class="hljs-title">mqm</span><span class="hljs-params">(mtx A,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>mtx ans;<br><span class="hljs-built_in">memset</span>(ans.a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(ans.a));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)ans.a[i][i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=<span class="hljs-built_in">mul</span>(ans,A);<br>A=<span class="hljs-built_in">mul</span>(A,A);<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    f[<span class="hljs-number">2</span>]=f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i;i++)<br>    &#123;<br>        f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];<br>        <span class="hljs-keyword">if</span>(f[i]&gt;=<span class="hljs-number">1e8</span>)&#123;c=i;<span class="hljs-keyword">break</span>;&#125;<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;c;</span><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n&lt;c)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,f[n]);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">double</span> frt=bas*n-fiv;<br>            frt=frt-<span class="hljs-built_in">floor</span>(frt);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d...%04d\n&quot;</span>,(<span class="hljs-type">int</span>)(<span class="hljs-number">1000</span>*<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,frt)),<span class="hljs-built_in">mqm</span>(sd,n).a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-how-many-fibs"><a class="markdownIt-Anchor" href="#b-how-many-fibs"></a> B How Many Fibs?</h2><h4 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h4><p>对于给定a和b，求有多少斐波那契数在区间 [a,b] 中；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>由于数据量不大，我们可以先用高精度算出所有的斐波那契数，再遍历统计即可；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>string fbn[<span class="hljs-number">482</span>],<span class="hljs-built_in">bod</span>(<span class="hljs-number">102</span>,<span class="hljs-string">&#x27;0&#x27;</span>),g1,g2,l,r;<br><span class="hljs-comment">//map&lt;string,int&gt;mp;</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">480</span>;i++)fbn[i]=bod;<br>    fbn[<span class="hljs-number">0</span>][<span class="hljs-number">101</span>]=fbn[<span class="hljs-number">1</span>][<span class="hljs-number">101</span>]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-comment">//mp[fbn[0]]=0;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">480</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> jin=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">101</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>        &#123;<br>            <span class="hljs-type">int</span> wei=fbn[i<span class="hljs-number">-1</span>][j]-<span class="hljs-string">&#x27;0&#x27;</span>+fbn[i<span class="hljs-number">-2</span>][j]-<span class="hljs-string">&#x27;0&#x27;</span>+jin;<br>            fbn[i][j]=<span class="hljs-string">&#x27;0&#x27;</span>+wei%<span class="hljs-number">10</span>;<br>            jin=wei/<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-comment">//mp[fbn[i]]=i;</span><br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;fbn[480];</span><br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;g1&gt;&gt;g2)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(g1==<span class="hljs-string">&quot;0&quot;</span>&amp;&amp;g2==<span class="hljs-string">&quot;0&quot;</span>)<span class="hljs-keyword">break</span>;<br>        l.<span class="hljs-built_in">clear</span>();<br>        r.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">102</span>-g1.<span class="hljs-built_in">length</span>();i++)l+=<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">102</span>-g2.<span class="hljs-built_in">length</span>();i++)r+=<span class="hljs-string">&#x27;0&#x27;</span>;<br>        l+=g1;<br>        r+=g2;<br>        <span class="hljs-comment">/* l[l.length()]=0;</span><br><span class="hljs-comment">        r[r.length()]=0; */</span><br>        <span class="hljs-comment">//int nl=mp[lower_bound(fbn[0],fbn[481],l)],nr=mp[upper_bound(fbn[0],fbn[481],r)];</span><br>        <span class="hljs-comment">//printf(&quot;%d\n&quot;,nr-nl);</span><br>        <span class="hljs-comment">//cout&lt;&lt;l&lt;&lt;endl&lt;&lt;r&lt;&lt;endl;</span><br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">480</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(fbn[i]&gt;=l&amp;&amp;fbn[i]&lt;=r)ans++;<span class="hljs-comment">//,cout&lt;&lt;fbn[i]&lt;&lt;endl;</span><br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><br></code></pre></td></tr></table></figure><h2 id="c-fibonacci-again"><a class="markdownIt-Anchor" href="#c-fibonacci-again"></a> C Fibonacci Again</h2><h4 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h4><p>定义了一个新的斐波那契数，求给定 f(i) 是否可以被3整除；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>找规律即可</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n%<span class="hljs-number">4</span>==<span class="hljs-number">2</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-hats-fibonacci"><a class="markdownIt-Anchor" href="#d-hats-fibonacci"></a> D Hat’s Fibonacci</h2><h4 id="题目大意-4"><a class="markdownIt-Anchor" href="#题目大意-4"></a> 题目大意</h4><p>定义了一个新的斐波那契数列，输出给定项的值；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>高精度即可；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>string fbn[<span class="hljs-number">7503</span>],<span class="hljs-built_in">bod</span>(<span class="hljs-number">2007</span>,<span class="hljs-string">&#x27;0&#x27;</span>),g1,g2,l,r;<br><span class="hljs-comment">//map&lt;string,int&gt;mp;</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">7500</span>;i++)fbn[i]=bod;<br>    fbn[<span class="hljs-number">1</span>][<span class="hljs-number">2006</span>]=fbn[<span class="hljs-number">2</span>][<span class="hljs-number">2006</span>]=fbn[<span class="hljs-number">3</span>][<span class="hljs-number">2006</span>]=fbn[<span class="hljs-number">4</span>][<span class="hljs-number">2006</span>]=<span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-comment">//mp[fbn[0]]=0;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">5</span>;i&lt;=<span class="hljs-number">7500</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> jin=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2006</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>        &#123;<br>            <span class="hljs-type">int</span> wei=fbn[i<span class="hljs-number">-1</span>][j]-<span class="hljs-string">&#x27;0&#x27;</span>+fbn[i<span class="hljs-number">-2</span>][j]-<span class="hljs-string">&#x27;0&#x27;</span>+fbn[i<span class="hljs-number">-3</span>][j]-<span class="hljs-string">&#x27;0&#x27;</span>+fbn[i<span class="hljs-number">-4</span>][j]-<span class="hljs-string">&#x27;0&#x27;</span>+jin;<br>            fbn[i][j]=<span class="hljs-string">&#x27;0&#x27;</span>+wei%<span class="hljs-number">10</span>;<br>            jin=wei/<span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> n,i;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;<span class="hljs-number">1</span>;i++)<span class="hljs-keyword">if</span>(fbn[n][i]!=<span class="hljs-string">&#x27;0&#x27;</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(i;i&lt;=<span class="hljs-number">2006</span>;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,fbn[n][i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//cout&lt;&lt;fbn[7500];</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-fibonacci"><a class="markdownIt-Anchor" href="#e-fibonacci"></a> E Fibonacci</h2><h4 id="题目大意-5"><a class="markdownIt-Anchor" href="#题目大意-5"></a> 题目大意</h4><p>对于给定项的斐波那契数，输出其前四位；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">10000</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> bas=<span class="hljs-built_in">log10</span>((<span class="hljs-number">1</span>+<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">5</span>))/<span class="hljs-number">2</span>);<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> fiv=<span class="hljs-built_in">log10</span>(<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">5</span>));<br><span class="hljs-type">int</span> f[<span class="hljs-number">1003</span>],c;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    f[<span class="hljs-number">2</span>]=f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i;i++)<br>    &#123;<br>        f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];<br>        <span class="hljs-keyword">if</span>(f[i]&gt;=<span class="hljs-number">1e4</span>)&#123;c=i;<span class="hljs-keyword">break</span>;&#125;<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;c;</span><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n&lt;c)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,f[n]);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">double</span> frt=bas*n-fiv;<br>            frt=frt-<span class="hljs-built_in">floor</span>(frt);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(<span class="hljs-type">int</span>)(<span class="hljs-number">1000</span>*<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>,frt)));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-another-kind-of-fibonacci"><a class="markdownIt-Anchor" href="#f-another-kind-of-fibonacci"></a> F Another kind of Fibonacci</h2><h4 id="题目大意-6"><a class="markdownIt-Anchor" href="#题目大意-6"></a> 题目大意</h4><p>给定 n ，输出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum_{i=0}^nf(i)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.113818em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> ；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><p>思路详见<a href="https://blog.csdn.net/Tan_Yuu/article/details/116999151">【笔记】数学</a>中的例题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">mtx</span>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br>&#125;;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">10007</span>;<br><span class="hljs-function">mtx <span class="hljs-title">mul</span><span class="hljs-params">(mtx A,mtx B)</span></span><br><span class="hljs-function"></span>&#123;<br>mtx C;<br><span class="hljs-built_in">memset</span>(C.a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(C.a));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)<br>&#123;<br>C.a[i][j]+=A.a[i][k]*B.a[k][j];<br>                C.a[i][j]%=M;<br>&#125;<br><span class="hljs-keyword">return</span> C;<br>&#125;<br><span class="hljs-function">mtx <span class="hljs-title">mqm</span><span class="hljs-params">(mtx A,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>mtx ans;<br><span class="hljs-built_in">memset</span>(ans.a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(ans.a));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">2</span>;i++)ans.a[i][i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=<span class="hljs-built_in">mul</span>(ans,A);<br>A=<span class="hljs-built_in">mul</span>(A,A);<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n,x,y;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;x,&amp;y))<br>    &#123;<br>        mtx bas=&#123;&#123;&#123;<span class="hljs-number">1</span>,x*x%M,y*y%M,<span class="hljs-number">2</span>*x*y%M&#125;,&#123;<span class="hljs-number">0</span>,x*x%M,y*y%M,<span class="hljs-number">2</span>*x*y%M&#125;,&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,&#123;<span class="hljs-number">0</span>,x%M,<span class="hljs-number">0</span>,y%M&#125;&#125;&#125;;<br>        bas=<span class="hljs-built_in">mqm</span>(bas,n<span class="hljs-number">-1</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,(<span class="hljs-number">2</span>*bas.a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+bas.a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]+bas.a[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]+bas.a[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>])%M);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-fibonacci-subsequence"><a class="markdownIt-Anchor" href="#g-fibonacci-subsequence"></a> G Fibonacci Subsequence</h2><h4 id="题目大意-7"><a class="markdownIt-Anchor" href="#题目大意-7"></a> 题目大意</h4><p>给定一个数列，求其中符合斐波那契规律的（不要求连续）子数列的最长长度，并输出数列；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>dp，遍历所有的元素对作为前两项，在哈希表中判断是否存在第三项，并以此进行状态转移；</p><p>详见代码~</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 3010</span><br><span class="hljs-type">int</span> a[N];<br><span class="hljs-type">short</span> dp[N][N]; <br><span class="hljs-type">int</span> n;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;::iterator it;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>    <span class="hljs-type">int</span> test=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n)!=EOF)<br>    &#123;<br><span class="hljs-keyword">if</span>(test!=<span class="hljs-number">0</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>test++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>dp[i][j]=<span class="hljs-number">1</span>;<br>mp.<span class="hljs-built_in">clear</span>();<br><span class="hljs-type">int</span> m=<span class="hljs-number">0</span>,x,y;<br>x=a[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">0</span>;i--)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i<span class="hljs-number">-1</span>;j++)<br>&#123;<br><span class="hljs-type">int</span> k=a[i]+a[j];<br>it=mp.<span class="hljs-built_in">find</span>(k);<br><span class="hljs-keyword">if</span>(it!=mp.<span class="hljs-built_in">end</span>())<br>&#123;<br>dp[j][i]=dp[i][it-&gt;second]+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(dp[j][i]&gt;m)<br>&#123;<br>m=dp[j][i];<br>x=j; y=i;<br>&#125;<br>&#125;<br>    &#125;<br>mp[a[i]]=i;<br>&#125;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n%d\n&quot;</span>,a[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2\n%d %d\n&quot;</span>,a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>]);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>]); <br><span class="hljs-keyword">continue</span>;&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,m+<span class="hljs-number">1</span>);<br>x=a[x],y=a[y];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,x);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,y);<br><span class="hljs-type">int</span> z=x+y; x=y;y=z;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>矩阵连乘专题好像变成了斐波那契专题哈；</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-同余</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%90%8C%E4%BD%99/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%90%8C%E4%BD%99/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/450691#problem">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-relatives">A Relatives</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-brute-force-algorithm">B Brute-force Algorithm</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-2">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-sum">C Sum</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-3">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B">D 同余方程</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-shuffle-%E6%B4%97%E7%89%8C">E SHUFFLE 洗牌</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-%E6%A0%91%E7%9A%84%E8%AE%A1%E6%95%B0">F 树的计数</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#g-aquamoon-and-chess">G AquaMoon and Chess</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-4">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢学长的讲解与付出；<br />感谢ph和zsl两位大佬的指导与讨论；</p><p>夹点私货：<br />这些题涉及到的内容都已经更新到自己的笔记中：<br /><a href="https://blog.csdn.net/Tan_Yuu/article/details/116999151">数学</a>（快速幂，欧拉函数，欧拉定理，扩展欧里几得算法，逆元）<br /><a href="https://blog.csdn.net/Tan_Yuu/article/details/117753497">树与图论</a>（Prufer数列）<br /><a href="https://blog.csdn.net/Tan_Yuu/article/details/118873047">排列组合</a>（lucas定理）</p><h2 id="a-relatives"><a class="markdownIt-Anchor" href="#a-relatives"></a> A Relatives</h2><h4 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h4><p>对于给定n，输出小于n且与n互质的数的个数</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>第一反应即是欧拉函数值，不过需要注意的是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>φ</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\varphi(1)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，而按此题要求，对于1应输出0；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> ll N=<span class="hljs-number">1e7</span>;<br><span class="hljs-type">int</span> p[N+<span class="hljs-number">7</span>],c=<span class="hljs-number">0</span>;<span class="hljs-comment">//p[]存储第 i 个质数（from 0），c 作为末尾标记</span><br><span class="hljs-type">bool</span> n[N+<span class="hljs-number">7</span>];<span class="hljs-comment">//n[]存储整数 i 是否为质数，若标记 0 则为质数，标记 1 则为合数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pri</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>n[<span class="hljs-number">0</span>]=n[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//0，1 均不是质数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=N;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!n[i])p[c++]=i;<span class="hljs-comment">//若为质数，则加入 p 数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;c&amp;&amp;i*p[j]&lt;=N;j++)<br>&#123;<br>n[i*p[j]]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">pri</span>();<br>    ll g,ans;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;g)&amp;&amp;g)<br>    &#123;<br>        ans=g;<br>        <span class="hljs-keyword">if</span>(g==<span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br>        <span class="hljs-type">int</span> sq=<span class="hljs-built_in">sqrt</span>(g);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;c&amp;&amp;p[i]&lt;=sq;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(g%p[i]==<span class="hljs-number">0</span>)<br>            &#123;<br>                ans=ans-ans/p[i];<br>                <span class="hljs-keyword">while</span>(g%p[i]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    g/=p[i];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(g&gt;<span class="hljs-number">1</span>)<br>        ans=ans-ans/g;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-brute-force-algorithm"><a class="markdownIt-Anchor" href="#b-brute-force-algorithm"></a> B Brute-force Algorithm</h2><h4 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h4><p>对于给定 a,b,P,n 输出func函数被执行的次数对P取模的模数；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>手动模拟发现，不考虑取模的情况下：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mi>a</mi><mo separator="true">;</mo><mspace linebreak="newline"></mspace><mi>n</mi><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mi>b</mi><mo separator="true">;</mo><mspace linebreak="newline"></mspace><mi>n</mi><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mi>a</mi><mi>b</mi><mo separator="true">;</mo><mspace linebreak="newline"></mspace><mi>n</mi><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mi>a</mi><msup><mi>b</mi><mn>2</mn></msup><mo separator="true">;</mo><mspace linebreak="newline"></mspace><mi>n</mi><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>3</mn></msup><mo separator="true">;</mo><mspace linebreak="newline"></mspace><mi>n</mi><mo>=</mo><mn>6</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><msup><mi>a</mi><mn>3</mn></msup><msup><mi>b</mi><mn>5</mn></msup><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">n=1,ans=a;\\n=2,ans=b;\\n=3,ans=ab;\\n=4,ans=ab^2;\\n=5,ans=a^2b^3;\\n=6,ans=a^3b^5;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">;</span></span></span></span><br />假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">n=i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>时，a和b的幂次分别为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>B</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i,B_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，我们可以发现有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub><mo>=</mo><msub><mi>A</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>A</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msub><mo separator="true">,</mo><msub><mi>B</mi><mi>i</mi></msub><mo>=</mo><msub><mi>B</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>B</mi><mrow><mi>i</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">A_i=A_{i-1}+A_{i-2},B_i=B_{i-1}+B_{i-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span> ，同时有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>B</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>A</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>B</mi><mn>2</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">A_1=1,B_1=0,A_2=0,B_2=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ；</p><p>规律很像斐波那契数列，我们就可以用矩阵快速幂进行快速计算了；</p><p>注意对矩阵元素取模的过程实际上是降幂过程，而不是简单的取模过程，所以要依照降幂的基本法；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br>ll x, y, gn, m, phim;<br><br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span> % m;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a % m;<br>        a = a * a % m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">mtx</span><br>&#123;<br>    ll a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br>&#125;;<br><br><span class="hljs-function">mtx <span class="hljs-title">mul</span><span class="hljs-params">(mtx A, mtx B)</span></span><br><span class="hljs-function"></span>&#123;<br>    mtx C;<br>    <span class="hljs-built_in">memset</span>(C.a, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(C.a));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">2</span>; k++)<br>            &#123;<br>                C.a[i][j] += A.a[i][k] * B.a[k][j];<br>                <span class="hljs-keyword">if</span>(C.a[i][j]&gt;phim)C.a[i][j] %= phim,C.a[i][j] += phim;<br>            &#125;<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br><br><span class="hljs-function">mtx <span class="hljs-title">mqm</span><span class="hljs-params">(mtx A, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    mtx ans;<br>    <span class="hljs-built_in">memset</span>(ans.a, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(ans.a));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)<br>        ans.a[i][i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = <span class="hljs-built_in">mul</span>(ans, A);<br>        A = <span class="hljs-built_in">mul</span>(A, A);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">const</span> ll N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> p[N + <span class="hljs-number">7</span>], c = <span class="hljs-number">0</span>; <span class="hljs-comment">//p[]存储第 i 个质数（from 0），c 作为末尾标记</span><br><span class="hljs-type">bool</span> n[N + <span class="hljs-number">7</span>];       <span class="hljs-comment">//n[]存储整数 i 是否为质数，若标记 0 则为质数，标记 1 则为合数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pri</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n[<span class="hljs-number">0</span>] = n[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">//0，1 均不是质数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!n[i])<br>            p[c++] = i; <span class="hljs-comment">//若为质数，则加入 p 数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; c &amp;&amp; i * p[j] &lt;= N; j++)<br>        &#123;<br>            n[i * p[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % p[j] == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">gphi</span><span class="hljs-params">(ll g)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = g;<br>    <span class="hljs-keyword">if</span> (g == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sq = <span class="hljs-built_in">sqrt</span>(g);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c &amp;&amp; p[i] &lt;= sq; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (g % p[i] == <span class="hljs-number">0</span>)<br>        &#123;<br>            ans = ans - ans / p[i];<br>            <span class="hljs-keyword">while</span> (g % p[i] == <span class="hljs-number">0</span>)<br>            &#123;<br>                g /= p[i];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (g &gt; <span class="hljs-number">1</span>)<br>        ans = ans - ans / g;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">pri</span>();<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld&quot;</span>, &amp;x, &amp;y, &amp;m, &amp;gn);<br>        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %lld\n&quot;</span>, i, <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (gn == <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %lld\n&quot;</span>, i, x%m);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        phim = <span class="hljs-built_in">gphi</span>(m);<br>        mtx k = &#123;&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;&#125;&#125;;<br>        k = <span class="hljs-built_in">mqm</span>(k, (gn - <span class="hljs-number">2</span>));<br>        <span class="hljs-comment">//printf(&quot;%lld &quot;,phim);</span><br>        <span class="hljs-comment">//printf(&quot;%lld %lld &quot;,k.a[1][0],k.a[1][1]);</span><br>        ll ans = <span class="hljs-built_in">qm</span>(x, k.a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]) * <span class="hljs-built_in">qm</span>(y, k.a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]) % m;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d: %lld\n&quot;</span>, i, ans);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="c-sum"><a class="markdownIt-Anchor" href="#c-sum"></a> C Sum</h2><h4 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h4><p>设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> 为将N拆分为k份的方案数，对于给定N，求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>S</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{i=1}^nS(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> 对1e9+7取模的值；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>由插板法可知 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">S(k)=C_{n-1}^{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2138779999999998em;vertical-align:-0.324639em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8892389999999999em;"><span style="top:-2.433692em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.324639em;"><span></span></span></span></span></span></span></span></span></span> ，故 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>S</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\sum_{i=1}^nS(i)=2^{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>；<br />接下来对2进行降幂即可；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-type">const</span> ll m=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span> % m;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a % m;<br>        a = a * a % m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string g;<br>    ll mi=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;g)<br>    &#123;<br>        mi=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;g[i];i++)<br>        &#123;<br>            mi*=<span class="hljs-number">10</span>;<br>            mi+=g[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            mi%=m<span class="hljs-number">-1</span>;<br>        &#125;<br>        mi-=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(mi&lt;<span class="hljs-number">0</span>)mi+=m<span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">//printf(&quot;%lld &quot;,mi);</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">qm</span>(<span class="hljs-number">2</span>,mi));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-同余方程"><a class="markdownIt-Anchor" href="#d-同余方程"></a> D 同余方程</h2><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>实际上即是求a对b的逆元，题目保证有解即逆元存在；</p><p>由于未保证b为质数，<code>qm(a,b-2)</code>的方法便无法使用，我们可以用扩展欧几里得算法求解；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-type">const</span> ll m=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span> % m;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a % m;<br>        a = a * a % m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">exgcd</span><span class="hljs-params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">if</span>(!b)<br>   &#123;<br>      x=<span class="hljs-number">1</span>,y=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">return</span> a;<br>   &#125;<br>   ll ans=<span class="hljs-built_in">exgcd</span>(b,a%b,x,y);<br>   ll y1=y,x1=x;<br>   x=y1;<br>   y=x1-a/b*y1;<br>   <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll a,b;<br>    cin&gt;&gt;a&gt;&gt;b;<br>    ll x,y;<br>    <span class="hljs-built_in">exgcd</span>(a,b,x,y);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,(x%b+b)%b);<span class="hljs-comment">//防负</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-shuffle-洗牌"><a class="markdownIt-Anchor" href="#e-shuffle-洗牌"></a> E SHUFFLE 洗牌</h2><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>简单模拟可以发现，洗牌是会循环进行的，即顺序牌洗若干次之后便会回到顺序，首先的处理我们可以将洗牌次数对循环长度取模；</p><p>分析易知对于原来第 i 位的牌，洗过一次后即为第 <code>2*i+((i&lt;=n&gt;&gt;1)?0:-(n+1))</code>位；</p><p>如果洗牌次数对循环长度（m）取模后还剩n次，即可认为洗完n次后第L位的牌，再洗m-n次即可回到本身位置；</p><p>由此我们可以找出洗n次后第L位的牌是几号牌了；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n,m,l;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;l;<br>    <span class="hljs-type">int</span> ccl=<span class="hljs-number">0</span>;<br>    ll i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        ccl++;<br>        i=<span class="hljs-number">2</span>*i+((i&lt;=n&gt;&gt;<span class="hljs-number">1</span>)?<span class="hljs-number">0</span>:-(n+<span class="hljs-number">1</span>));<br>    &#125; <span class="hljs-keyword">while</span> (i!=<span class="hljs-number">1</span>);<br>    m%=ccl;<br>    m=ccl-m;<br>    i=l;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>    &#123;<br>        i=<span class="hljs-number">2</span>*i+((i&lt;=n&gt;&gt;<span class="hljs-number">1</span>)?<span class="hljs-number">0</span>:-(n+<span class="hljs-number">1</span>));<br>    &#125;<br>    cout&lt;&lt;i;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-树的计数"><a class="markdownIt-Anchor" href="#f-树的计数"></a> F 树的计数</h2><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>此题是Prufer数列的一个结论<br /><img src="https://img-blog.csdnimg.cn/352480cef0994392bc4d623412ef62fa.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Rhbl9ZdXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />在实际解决中，还需要特判不成树的数据；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><p>（我认为的）正解代码：<br />预处理组合数的值，由于总答案小于1e17，所以每个组合数不会超过1e17，而且组合数的范围一定小于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mn>150</mn><mn>150</mn></msubsup></mrow><annotation encoding="application/x-tex">C_{150}^{150}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622159999999998em;vertical-align:-0.24810799999999997em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span> ；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-comment">//const ll M=100000000000000013;</span><br>ll c[<span class="hljs-number">152</span>][<span class="hljs-number">152</span>];<br><span class="hljs-type">int</span> n;<br> <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>c[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i;j++)<br>c[i][j]=c[i<span class="hljs-number">-1</span>][j]+c[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>&#125;<br>&#125;<br>ll lefts[<span class="hljs-number">152</span>],d[<span class="hljs-number">152</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">pre</span>();<br>    ll sum=<span class="hljs-number">0</span>,ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;d[i]);<br>        sum+=d[i];<br>        <span class="hljs-keyword">if</span>((!d[i]&amp;&amp;n!=<span class="hljs-number">1</span>)||d[i]&lt;<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!d[i]&amp;&amp;n==<span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        lefts[i]=lefts[i<span class="hljs-number">-1</span>]+d[i]<span class="hljs-number">-1</span>;<br>        ans*=c[n<span class="hljs-number">-2</span>-lefts[i<span class="hljs-number">-1</span>]][d[i]<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum==<span class="hljs-number">2</span>*n<span class="hljs-number">-2</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在vj上AC，但是在洛谷上被一组样例卡的代码：（目前不知道原因）<br />如果保证答案小于1e17，是不是可以等价于答案可以对1e17+3（大于1e17的最小质数）取模？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-type">const</span> ll M=<span class="hljs-number">100000000000000003</span>;<br><br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span> % M;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a % M;<br>        a = a * a % M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125; <br><span class="hljs-function">ll <span class="hljs-title">comp</span><span class="hljs-params">(ll a,ll b,ll m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a&lt;b) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a==b) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(b&gt;a-b) b=a-b;<br>    ll ans=<span class="hljs-number">1</span>,ca=<span class="hljs-number">1</span>,cb=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b;i++)&#123;<br>        ca=ca*(a-i)%m;<br>        cb=cb*(b-i)%m;<br>    &#125;<br>    ans=ca*<span class="hljs-built_in">qm</span>(cb,m<span class="hljs-number">-2</span>)%m;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">ll lucas(ll a,ll b,ll m)&#123;</span><br><span class="hljs-comment">    ll ans=1;</span><br><span class="hljs-comment">    while(a&amp;&amp;b)&#123;</span><br><span class="hljs-comment">        ans=(ans*comp(a%m,b%m,m))%m;</span><br><span class="hljs-comment">        a/=m;</span><br><span class="hljs-comment">        b/=m;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    return ans;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>ll lefts[<span class="hljs-number">152</span>],d[<span class="hljs-number">152</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    ll sum=<span class="hljs-number">0</span>,ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;d[i]);<br>        sum+=d[i];<br>        <span class="hljs-keyword">if</span>(!d[i]&amp;&amp;n!=<span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        lefts[i]=lefts[i<span class="hljs-number">-1</span>]+d[i]<span class="hljs-number">-1</span>;<br>        ans*=<span class="hljs-built_in">comp</span>(n<span class="hljs-number">-2</span>-lefts[i<span class="hljs-number">-1</span>],d[i]<span class="hljs-number">-1</span>,M);<br>        ans%=M;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum==<span class="hljs-number">2</span>*n<span class="hljs-number">-2</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-aquamoon-and-chess"><a class="markdownIt-Anchor" href="#g-aquamoon-and-chess"></a> G AquaMoon and Chess</h2><h4 id="题目大意-4"><a class="markdownIt-Anchor" href="#题目大意-4"></a> 题目大意</h4><p>给定格子总数和占用情况，棋子可以以类似于跳棋的规则移动，求含初始状态一共可能存在多少种可能情况（对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>998</mn><mo separator="true">,</mo><mn>244</mn><mo separator="true">,</mo><mn>353</mn></mrow><annotation encoding="application/x-tex">998,244,353</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">9</span><span class="mord">9</span><span class="mord">8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">4</span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mord">5</span><span class="mord">3</span></span></span></span> 求余）；</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>简单模拟后发现此问题与组合数有关，具体规律并不好描述，详见代码；</p><p>（目前还没证明）答案可以用以下规律抽象表示：<br />假设每个独立的占用区间长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，格子中共有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span>个0，（满足格子总数=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>l</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">z+\sum_{i=1}^{n}l_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>），答案为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mrow><mi>z</mi><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">⌊</mo><mfrac><msub><mi>l</mi><mi>i</mi></msub><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><mi>z</mi></msubsup></mrow><annotation encoding="application/x-tex">C_{z+\sum_{i=1}^{n}\lfloor \frac {l_i} 2\rfloor}^z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.45216em;vertical-align:-0.7688299999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4719700000000002em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">+</span><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7046857142857144em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.8971428571428572em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">⌊</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0443285714285713em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5483000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3448em;margin-left:-0.01968em;margin-right:0.1em;"><span class="pstrut" style="height:2.65952em;"></span><span class="mord mathdefault mtight">i</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31472em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mclose mtight">⌋</span></span></span></span><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7688299999999999em;"><span></span></span></span></span></span></span></span></span></span>；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><br><span class="hljs-type">const</span> ll M=<span class="hljs-number">998244353</span>;<br><br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span> % M;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a % M;<br>        a = a * a % M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125; <br><span class="hljs-function">ll <span class="hljs-title">comp</span><span class="hljs-params">(ll a,ll b,ll m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a&lt;b) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(a==b) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(b&gt;a-b) b=a-b;<br>    ll ans=<span class="hljs-number">1</span>,ca=<span class="hljs-number">1</span>,cb=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b;i++)&#123;<br>        ca=ca*(a-i)%m;<br>        cb=cb*(b-i)%m;<br>    &#125;<br>    ans=ca*<span class="hljs-built_in">qm</span>(cb,m<span class="hljs-number">-2</span>)%m;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">lucas</span><span class="hljs-params">(ll a,ll b,ll m)</span></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(a&amp;&amp;b)&#123;<br>        ans=(ans*<span class="hljs-built_in">comp</span>(a%m,b%m,m))%m;<br>        a/=m;<br>        b/=m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,lo;<br>    cin&gt;&gt;t;<br>    string g;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;lo);<br>        cin&gt;&gt;g;<br>        ll n=<span class="hljs-number">0</span>,m=<span class="hljs-number">0</span>,l=<span class="hljs-number">-1</span>,i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;lo;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;0&#x27;</span>)<br>            &#123;<br>                m++,n++;<br>                n+=(i-l<span class="hljs-number">-1</span>)&gt;&gt;<span class="hljs-number">1</span>;<br>                l=i;<br>            &#125;<br>        &#125;<br>        n+=(i-l<span class="hljs-number">-1</span>)&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">lucas</span>(n,m,M));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>做这个题中大量用到自己以前准备的板子，同时也发现了网上扒下来的板子存在的很多问题和<strong>错误</strong>，大家注意辨别~</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-KMP</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-KMP/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-KMP/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/450442#overview">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-%E5%89%AA%E8%8A%B1%E5%B8%83%E6%9D%A1">A 剪花布条</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-power-strings">B Power Strings</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-2">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-radio-transmission">C Radio Transmission</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-3">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-okr-periods-of-words">D OKR-Periods of Words</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-4">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-%E4%BC%BC%E4%B9%8E%E5%9C%A8%E6%A2%A6%E4%B8%AD%E8%A7%81%E8%BF%87%E7%9A%84%E6%A0%B7%E5%AD%90">E 似乎在梦中见过的样子</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-5">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-censoring">F Censoring</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-6">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#g-compress-words">G Compress Words</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-7">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#h-%E5%8A%A8%E7%89%A9%E5%9B%AD">H 动物园</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#i-sza-template">I Sza-Template</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢学长的讲解与付出；<br />感谢ph和zsl两位大佬的指导与讨论；</p><p>KMP可以在线性复杂度内求出给定字符串任意前 i 个元素构成字串的最长相等前后缀，并可以以此进一步进行<strong>字串匹配</strong>或<strong>其他相等前后缀</strong>的求取；</p><h2 id="a-剪花布条"><a class="markdownIt-Anchor" href="#a-剪花布条"></a> A 剪花布条</h2><h4 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h4><p>给定待测串和标准串，求待测串中有几个互不重复的标准串；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>KMP字串匹配板，KMP本身即是求取互不重复的标准串个数；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-type">char</span> A[<span class="hljs-number">1010</span>],B[<span class="hljs-number">1010</span>];<br><span class="hljs-type">int</span> nxt[<span class="hljs-number">1010</span>],n,m,ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    nxt[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>&amp;&amp;B[j+<span class="hljs-number">1</span>]!=B[i+<span class="hljs-number">1</span>])<br>        &#123;<br>            j=nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(B[j+<span class="hljs-number">1</span>]==B[i+<span class="hljs-number">1</span>])j++;<br>        nxt[i+<span class="hljs-number">1</span>]=j;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>&amp;&amp;B[j+<span class="hljs-number">1</span>]!=A[i+<span class="hljs-number">1</span>])<br>        &#123;<br>            j=nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(B[j+<span class="hljs-number">1</span>]==A[i+<span class="hljs-number">1</span>])j++;<br>        <span class="hljs-keyword">if</span>(j==m)<br>        &#123;<br>            ans++;<br>            j=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;A+<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(A+<span class="hljs-number">1</span>,<span class="hljs-string">&quot;#&quot;</span>))<span class="hljs-keyword">break</span>;<br>        cin&gt;&gt;B+<span class="hljs-number">1</span>;<br>        n=<span class="hljs-built_in">strlen</span>(A+<span class="hljs-number">1</span>);<br>        m=<span class="hljs-built_in">strlen</span>(B+<span class="hljs-number">1</span>);<br>        ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">pre</span>();<br>        <span class="hljs-built_in">kmp</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-power-strings"><a class="markdownIt-Anchor" href="#b-power-strings"></a> B Power Strings</h2><h4 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h4><p>给定串是由几个相同字符串首尾相接拼出来的，求出最大个数；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>我们先分情况讨论：<br />假定给定串长度为 m ；</p><ol><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext> </mtext><mn>2</mn><mo separator="true">⋅</mo><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo>&lt;</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">\text{ }2\cdotp nxt[m]\lt m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord"> </span></span><span class="mord">2</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> ，此时显然没有满足条件的串，故答案为1；</li><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext> </mtext><mn>2</mn><mo separator="true">⋅</mo><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo>⩾</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">\text{ }2\cdotp nxt[m]\geqslant m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord"> </span></span><span class="mord">2</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> ，此时可能的串是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>m</mi><mo>−</mo><mi>n</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,m-nxt[m]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span> ，即可以保证给定串是若干个可行串首尾相接组成串的前缀，下一步只需要判断给定串与可行串长度有没有整除关系即可；</li></ol><p>接下来对两种情况进行合并，满足第一种情况时，两串长度一定不存在整除关系；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-type">char</span> A[<span class="hljs-number">1010</span>], B[<span class="hljs-number">1000006</span>];<br><span class="hljs-type">int</span> nxt[<span class="hljs-number">1000006</span>], n, m, ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    nxt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; B[j + <span class="hljs-number">1</span>] != B[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            j = nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (B[j + <span class="hljs-number">1</span>] == B[i + <span class="hljs-number">1</span>])<br>            j++;<br>        nxt[i + <span class="hljs-number">1</span>] = j;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; B[j + <span class="hljs-number">1</span>] != A[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            j = nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (B[j + <span class="hljs-number">1</span>] == A[i + <span class="hljs-number">1</span>])<br>            j++;<br>        <span class="hljs-keyword">if</span> (j == m)<br>        &#123;<br>            ans++;<br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,B+<span class="hljs-number">1</span>))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(B+<span class="hljs-number">1</span>,<span class="hljs-string">&quot;.&quot;</span>))<span class="hljs-keyword">break</span>;<br>        m = <span class="hljs-built_in">strlen</span>(B + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">pre</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, (m%(m - nxt[m])==<span class="hljs-number">0</span>)?m/(m - nxt[m]):<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-radio-transmission"><a class="markdownIt-Anchor" href="#c-radio-transmission"></a> C Radio Transmission</h2><h4 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h4><p>给你一个字符串，它是由某个字符串不断自我连接形成的。但是这个字符串是不确定的，现在只想知道它的最短长度是多少。</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>和上一题基本相同，求出可行串长度即可；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-type">char</span> A[<span class="hljs-number">1010</span>],B[<span class="hljs-number">1000006</span>];<br><span class="hljs-type">int</span> nxt[<span class="hljs-number">1000006</span>],n,m,ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    nxt[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>&amp;&amp;B[j+<span class="hljs-number">1</span>]!=B[i+<span class="hljs-number">1</span>])<br>        &#123;<br>            j=nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(B[j+<span class="hljs-number">1</span>]==B[i+<span class="hljs-number">1</span>])j++;<br>        nxt[i+<span class="hljs-number">1</span>]=j;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>&amp;&amp;B[j+<span class="hljs-number">1</span>]!=A[i+<span class="hljs-number">1</span>])<br>        &#123;<br>            j=nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(B[j+<span class="hljs-number">1</span>]==A[i+<span class="hljs-number">1</span>])j++;<br>        <span class="hljs-keyword">if</span>(j==m)<br>        &#123;<br>            ans++;<br>            j=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   cin&gt;&gt;m;<br>   cin&gt;&gt;B+<span class="hljs-number">1</span>;<br>   <span class="hljs-built_in">pre</span>();<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,m-nxt[m]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-okr-periods-of-words"><a class="markdownIt-Anchor" href="#d-okr-periods-of-words"></a> D OKR-Periods of Words</h2><p><a href="https://blog.csdn.net/amazingee/article/details/106665988">参考</a></p><h4 id="题目大意-4"><a class="markdownIt-Anchor" href="#题目大意-4"></a> 题目大意</h4><p>对于给定的字符串t，找到它所有前缀字串的最长周期的长度的和。</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>根据题目中周期的定义，我们只需要求出每个串的最短相同前后缀的长度，总长减去该长度即为该串的周期长；</p><p>同时需要用路径压缩优化；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-type">char</span> A[<span class="hljs-number">1010</span>], B[<span class="hljs-number">1000006</span>];<br><span class="hljs-type">int</span> nxt[<span class="hljs-number">1000006</span>], n, m, ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    nxt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; B[j + <span class="hljs-number">1</span>] != B[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            j = nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (B[j + <span class="hljs-number">1</span>] == B[i + <span class="hljs-number">1</span>])<br>            j++;<br>        nxt[i + <span class="hljs-number">1</span>] = j;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; B[j + <span class="hljs-number">1</span>] != A[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            j = nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (B[j + <span class="hljs-number">1</span>] == A[i + <span class="hljs-number">1</span>])<br>            j++;<br>        <span class="hljs-keyword">if</span> (j == m)<br>        &#123;<br>            ans++;<br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;m;<br>    cin&gt;&gt;B+<span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">pre</span>();<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> now=i;<br>        <span class="hljs-keyword">while</span>(nxt[now])now=nxt[now];<span class="hljs-comment">//,printf(&quot;*&quot;);;</span><br>        <span class="hljs-keyword">if</span>(nxt[i])nxt[i]=now;<br>        ans+=i-now;<br>    &#125;<br>    cout&lt;&lt;ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-似乎在梦中见过的样子"><a class="markdownIt-Anchor" href="#e-似乎在梦中见过的样子"></a> E 似乎在梦中见过的样子</h2><h4 id="题目大意-5"><a class="markdownIt-Anchor" href="#题目大意-5"></a> 题目大意</h4><p>所有形似于 A+B+A 的字串都是 QB 或它的替身，且 |A|≥k,|B|≥1 （位置不同其他性质相同的子串算不同子串，位置相同但拆分不同的子串算同一子串），对于给定串和给定 k ，求出其替身数量；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>实际上是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 复杂度；</p><p>对于每一个后缀串进行kmp，并遍历每个后缀串的所有前缀，以遍历所有字串；</p><p>对于每个子串，假设其某相等前后缀长度为 h ，字串长度为 l，找到其是否有同时满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>⩾</mo><mi>k</mi><mo separator="true">,</mo><mn>2</mn><mo separator="true">⋅</mo><mi>h</mi><mo>+</mo><mn>1</mn><mo>⩽</mo><mi>l</mi></mrow><annotation encoding="application/x-tex">h\geqslant k,2\cdotp h+1\leqslant l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83111em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.78111em;vertical-align:-0.13667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> 的相等前后缀；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-type">char</span> A[<span class="hljs-number">1010</span>], B[<span class="hljs-number">1000006</span>];<br><span class="hljs-type">int</span> nxt[<span class="hljs-number">1000006</span>], n, m, ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    nxt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; B[j + <span class="hljs-number">1</span>] != B[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            j = nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (B[j + <span class="hljs-number">1</span>] == B[i + <span class="hljs-number">1</span>])<br>            j++;<br>        nxt[i + <span class="hljs-number">1</span>] = j;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; B[j + <span class="hljs-number">1</span>] != A[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            j = nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (B[j + <span class="hljs-number">1</span>] == A[i + <span class="hljs-number">1</span>])<br>            j++;<br>        <span class="hljs-keyword">if</span> (j == m)<br>        &#123;<br>            ans++;<br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//cin&gt;&gt;m;</span><br>    cin &gt;&gt; B + <span class="hljs-number">1</span>;<br>    m = <span class="hljs-built_in">strlen</span>(B + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> k;<br>    cin &gt;&gt; k;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (; m &gt;= <span class="hljs-number">2</span> * k + <span class="hljs-number">1</span>; m--)<br>    &#123;<br>        <span class="hljs-built_in">pre</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            <span class="hljs-comment">//printf(&quot;%c&quot;,B[i]);</span><br>            B[i] = B[i + <span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> now = i;<br>            <span class="hljs-keyword">while</span> (nxt[now] &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * nxt[now] + <span class="hljs-number">1</span> &lt;= i)<br>                &#123;<br>                    ans++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                now = nxt[now];<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-censoring"><a class="markdownIt-Anchor" href="#f-censoring"></a> F Censoring</h2><h4 id="题目大意-6"><a class="markdownIt-Anchor" href="#题目大意-6"></a> 题目大意</h4><p>给出两个字符串 S 和 T，每次从前往后找到 S 的一个子串 A=T 并将其删除，空缺位依次向前补齐，重复上述操作多次，直到 S 串中不含 T 串。输出最终的 S 串。</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>最终用数组模拟栈和字符串哈希完成的；</p><p>持续对比栈的后缀和下一个字符串前缀的哈希值，如果有相等的，则将栈顶的重合元素弹出；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">6</span>;<br><span class="hljs-type">const</span> ll mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">3</span>, base = <span class="hljs-number">1321</span>;<br><span class="hljs-type">int</span> s[N], p[N] = &#123;<span class="hljs-number">1</span>&#125;, tmp;<br><span class="hljs-type">int</span> top, len;<br><span class="hljs-type">char</span> a[N], b[N], c[N];<br><span class="hljs-function">ll <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123; <span class="hljs-keyword">return</span> ((ll)s[r] - (ll)s[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>] + mod*mod) % mod; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>        p[i] = (ll)p[i - <span class="hljs-number">1</span>] * base % mod;<br>    cin &gt;&gt; a + <span class="hljs-number">1</span>;<br>    cin &gt;&gt; b + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; b[i]; i++)<br>        tmp = (tmp * base + b[i]) % mod, len++;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; a[i]; i++)<br>    &#123;<br>        s[top + <span class="hljs-number">1</span>] = (s[top] * base + a[i]) % mod;<br>        c[++top] = a[i];<br>        <span class="hljs-keyword">if</span> (top &gt;= len &amp;&amp; <span class="hljs-built_in">get</span>(top - len + <span class="hljs-number">1</span>, top) == tmp)<br>            top = top - len;<br>        <span class="hljs-comment">//printf(&quot;%lld %lld\n&quot;,get(top - len + 1, top),  tmp);</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= top; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, c[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-compress-words"><a class="markdownIt-Anchor" href="#g-compress-words"></a> G Compress Words</h2><h4 id="题目大意-7"><a class="markdownIt-Anchor" href="#题目大意-7"></a> 题目大意</h4><p>样例解释得很明白，不过要强调一点：<strong>即先合并前两个单词，然后将结果与第三个单词合并，依此类推</strong></p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>维护ans串；<br />对于每个新单词，截取ans串的适当后缀和该新单词组成临时串，对临时串kmp，判断是否公共前后缀，该缀即为重复部分；</p><p>有时候公共前后缀的长度可能超过预期，此时即需要特判；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br>string A,B;<br><span class="hljs-type">int</span> nxt[<span class="hljs-number">1000006</span>], n, m;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    nxt[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; B[j + <span class="hljs-number">1</span>] != B[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            j = nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (B[j + <span class="hljs-number">1</span>] == B[i + <span class="hljs-number">1</span>])<br>            j++;<br>        nxt[i + <span class="hljs-number">1</span>] = j;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kmp</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; B[j + <span class="hljs-number">1</span>] != A[i + <span class="hljs-number">1</span>])<br>        &#123;<br>            j = nxt[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (B[j + <span class="hljs-number">1</span>] == A[i + <span class="hljs-number">1</span>])<br>            j++;<br>        <span class="hljs-keyword">if</span> (j == m)<br>        &#123;<br>            <span class="hljs-comment">//ans++;</span><br>            j = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br>string g[<span class="hljs-number">100005</span>],ans;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    cin&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)cin&gt;&gt;g[i];<br>    ans=g[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=k;i++)<br>    &#123;<br>        B=<span class="hljs-string">&#x27; &#x27;</span>+g[i]+ans.<span class="hljs-built_in">substr</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,(<span class="hljs-type">int</span>)(ans.<span class="hljs-built_in">length</span>()-g[i].<span class="hljs-built_in">length</span>())));<br>        m=B.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-built_in">pre</span>();<br>        <span class="hljs-type">int</span> now=m;<br>        <span class="hljs-keyword">while</span>(nxt[now]&gt;<span class="hljs-built_in">min</span>(ans.<span class="hljs-built_in">length</span>(),g[i].<span class="hljs-built_in">length</span>())&amp;&amp;nxt[m])now=nxt[now];<br>        ans+=g[i].<span class="hljs-built_in">substr</span>(nxt[now]);<br>    &#125;<br>    cout &lt;&lt; ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-动物园"><a class="markdownIt-Anchor" href="#h-动物园"></a> H 动物园</h2><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>这道题比较像E的单次循环，但是E的数据非常水，导致<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>+</mo></mrow><annotation encoding="application/x-tex">O(n^2)+</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">+</span></span></span></span>暴力递归也能过；</p><p>这道题卡得就比较严了，需要更优的策略；</p><p>定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nx[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>为长度小于等于i/2的最长公共前后缀；<br />如果要求取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">nx[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>，我们可以按照求取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">next[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>的类似思路进行，只不过最后判断是否大于i/2即可；</p><p>那么还需要求取的是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">num[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>；<br />如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">next[i]=j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>，那么显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>n</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">num[i]=num[j]+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；</p><p>在计算ans时，我们需要乘上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>n</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">num[nx[i]]+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；</p><p>由于nx值的缩减过程也是按照next迭代的，所以在下面代码中，上文的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">nx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span></span></span>没有被存下；<br />此外<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">next</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span>为nx，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">num</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span></span></span></span>为sz；</p><p>代码中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>z</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">sz[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>代表i长度的公共前后缀内的公共前后缀数+1，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">nx[i]=j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>s</mi><mi>z</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">num[i]=sz[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>；</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">6</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> nt[N], sz[N];<br><span class="hljs-type">char</span> a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        ll ans = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, a + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(a + <span class="hljs-number">1</span>);<br>        sz[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">while</span> (j &amp;&amp; a[i] != a[j + <span class="hljs-number">1</span>]) j = nt[j];<br>            <span class="hljs-keyword">if</span> (a[i] == a[j + <span class="hljs-number">1</span>]) j++;<br>            nt[i] = j;<br>            sz[i] = sz[nt[i]] + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">while</span> (j &amp;&amp; a[j + <span class="hljs-number">1</span>] != a[i]) j = nt[j];<br>            <span class="hljs-keyword">if</span> (a[j + <span class="hljs-number">1</span>] == a[i]) j++;<br>            <span class="hljs-keyword">while</span> (j * <span class="hljs-number">2</span> &gt; i) j = nt[j];<br>            ans = ans * (sz[j] + <span class="hljs-number">1</span>) % M;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>        <span class="hljs-comment">/* for(int i=1;i&lt;=n;i++)printf(&quot;%d &quot;,nt[i]);</span><br><span class="hljs-comment">        printf(&quot;\n&quot;); */</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="i-sza-template"><a class="markdownIt-Anchor" href="#i-sza-template"></a> I Sza-Template</h2><p>KMP+DP</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p><a href="https://www.luogu.com.cn/problem/solution/P3426">参考</a><br />假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span>为给定串长度为 i 的前缀的答案；</p><p>则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>i</mi><mi mathvariant="normal">或</mi><mi>f</mi><mo stretchy="false">[</mo><mi>n</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f(i)=i或f[nx[i]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">或</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>，具体证明详见上链；</p><p>在存在 j 满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mi mathvariant="normal">且</mi><mi>j</mi><mo>+</mo><mi>n</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>⩽</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">f(j)=f(nx[i])且j+nx[i]\leqslant i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mord cjk_fallback">且</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(i)=f(nx[i])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>；<br />具体判断可以用桶实现；</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">0x3f3f3f3f</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> nx[N];<br><span class="hljs-type">int</span> f[N],h[N];<br><span class="hljs-type">char</span> s[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,s+<span class="hljs-number">1</span>); n=<span class="hljs-built_in">strlen</span>(s+<span class="hljs-number">1</span>);<br>nx[<span class="hljs-number">0</span>]=<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>,j=<span class="hljs-number">0</span>; i&lt;=n; ++i)<br>&#123;<br><span class="hljs-keyword">while</span>(j!=<span class="hljs-number">-1</span>&amp;&amp;s[j+<span class="hljs-number">1</span>]!=s[i]) j=nx[j];<br>nx[i]=++j;<br>&#125;<br>f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; ++i)<br>&#123;<br>f[i]=i;<br><span class="hljs-keyword">if</span>(h[f[nx[i]]]&gt;=i-nx[i]) f[i]=f[nx[i]];<br>h[f[i]]=i;<br>&#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,f[n]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-字典树</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%AD%97%E5%85%B8%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/449699#overview">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-l%E8%AF%AD%E8%A8%80">A L语言</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-secret-message-%E7%A7%98%E5%AF%86%E4%BF%A1%E6%81%AF">B Secret Message 秘密信息</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-2">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-the-xor-longest-path">C The XOR-longest Path</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-3">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-the-xor-largest-pair">D The XOR Largest Pair</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-4">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-phone-list">E Phone List</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-5">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-xor-sum">F Xor sum</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-6">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢学长的讲解与付出；<br />感谢ph和zsl两位大佬的指导与讨论；</p><p>目前来看，字典树主要用于线性复杂判断给定字符串与字典有没有前缀关系，和给定目标下异或值的求取；</p><h2 id="a-l语言"><a class="markdownIt-Anchor" href="#a-l语言"></a> A L语言</h2><h4 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h4><p>给定字典，问题给字符串是否为字典中的若干单词拼接起来的；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p><a href="https://www.luogu.com.cn/problem/solution/P2292">参考</a></p><p>个人选择了一个比较暴力的做法（只看懂了这个）；<br />即对每一个作为单词结尾的点的后面都进行单词判断，以此更新最大长度；<br />详见上链吧；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><p>代码来自上链</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;string, <span class="hljs-type">bool</span>&gt; m1;<br>map&lt;string, <span class="hljs-type">int</span>&gt; m2;<br><span class="hljs-type">char</span> s[<span class="hljs-number">2000005</span>];<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> trie[<span class="hljs-number">1005</span>][<span class="hljs-number">28</span>];<br><span class="hljs-type">bool</span> f[<span class="hljs-number">2000010</span>];<br><span class="hljs-type">bool</span> flag[<span class="hljs-number">10005</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>, fl = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> i = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-string">&#x27;0&#x27;</span> || i &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;-&#x27;</span>)<br>        &#123;<br>            fl = <span class="hljs-number">-1</span>;<br>        &#125;<br>        i = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; i &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>    &#123;<br>        ans = ans * <span class="hljs-number">10</span> + i - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        i = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans * fl;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> c = s[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!trie[pos][c])<br>        &#123;<br>            trie[pos][c] = ++cnt;<br>        &#125;<br>        pos = trie[pos][c];<br>    &#125;<br>    flag[pos] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> <span class="hljs-comment">//查询</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (m1[s + <span class="hljs-number">1</span>])<br>    &#123;<br>        <span class="hljs-keyword">return</span> m2[s + <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(s + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ans;<br>        <span class="hljs-built_in">memset</span>(f, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(f));<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (!f[i])<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span><br>                ans = i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>, p = <span class="hljs-number">0</span>; j &lt;= len; j++)<br>            &#123;<br>                <span class="hljs-type">int</span> c = s[j] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>                p = trie[p][c];<br>                <span class="hljs-keyword">if</span> (!p)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">if</span> (flag[p])<br>                    f[j] = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        m1[s + <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>        m2[s + <span class="hljs-number">1</span>] = ans;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    n = <span class="hljs-built_in">read</span>();<br>    m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (n--)<br>        <span class="hljs-built_in">insert</span>();<br>    <span class="hljs-keyword">while</span> (m--)<br>        cout &lt;&lt; <span class="hljs-built_in">query</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-secret-message-秘密信息"><a class="markdownIt-Anchor" href="#b-secret-message-秘密信息"></a> B Secret Message 秘密信息</h2><h4 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h4><p>用以测试的串是多少个给定串的前缀；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>字典树板，用给定串构造好字典树，用测试串去匹配即可；</p><p>注意一些特殊情况，如测试串是给定串的前缀等，做好标记；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(c&lt;<span class="hljs-string">&#x27;0&#x27;</span>||c&gt;<span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;c=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">while</span> (c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+(c^<span class="hljs-number">48</span>),c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> (ll)x*f;<br>&#125;<br><span class="hljs-type">int</span> b[<span class="hljs-number">100005</span>],g;<br><span class="hljs-type">int</span> ttre[<span class="hljs-number">500005</span>][<span class="hljs-number">2</span>],meet[<span class="hljs-number">500005</span>],ed[<span class="hljs-number">500005</span>],c;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    c=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <br>        <span class="hljs-type">int</span> k;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>        <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g);<br>            <span class="hljs-keyword">if</span>(!ttre[p][g])ttre[p][g]=c++;<span class="hljs-comment">//printf(&quot;*&quot;);</span><br>            p=ttre[p][g];<br>            meet[p]++;<br>        &#125;<br>        meet[p]--;<br>        ed[p]++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>        c=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> k;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>        <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;b[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)<br>        &#123;<br>            p=ttre[p][b[i]];<br>            <span class="hljs-keyword">if</span>(!p)<br>            &#123;<br>                <span class="hljs-comment">//ans+=meet[p];</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ans+=ed[p];<br>                <br>            &#125;<br>        &#125;<br>        ans+=meet[p];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-the-xor-longest-path"><a class="markdownIt-Anchor" href="#c-the-xor-longest-path"></a> C The XOR-longest Path</h2><h4 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h4><p>给定树的结构和每条边的边权，求任意两点间路径上的最小边权异或值；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>树的性质有，任意两点间均有且只有一条路径；</p><p>异或的性质有，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><mi>A</mi><mi>x</mi><mi>o</mi><mi>r</mi><mi>B</mi><mo separator="true">,</mo><mi>C</mi><mi>x</mi><mi>o</mi><mi>r</mi><mi>B</mi><mo>=</mo><mi>A</mi></mrow><annotation encoding="application/x-tex">C=AxorB,CxorB=A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">x</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">x</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>；</p><p>所以，我们可以通过dfs处理出所有点与一号节点（根）之间路径的边权异或，这样无论所求两点是否为同一枝杈上，都可以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 复杂度内求出两点间的路径边权异或值；</p><p>接下来把这些处理出的异或值存入字典树，依次在字典树中匹配与其异或值最大的值，并更新答案；此部分复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> ；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            f = <span class="hljs-number">-1</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> (ll)x * f;<br>&#125;<br><span class="hljs-comment">//stack&lt;int&gt; stk;</span><br><span class="hljs-type">int</span> ttre[<span class="hljs-number">3200006</span>][<span class="hljs-number">2</span>], ed[<span class="hljs-number">3200006</span>], val[<span class="hljs-number">100005</span>], rch[<span class="hljs-number">100005</span>]; <span class="hljs-comment">//val[300005];</span><br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &gt; rod[<span class="hljs-number">100005</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rod[x].<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!rch[rod[x][i].first])<br>        &#123;<br>            rch[rod[x][i].first] = <span class="hljs-number">1</span>;<br>            val[rod[x][i].first] = (val[x] ^ rod[x][i].second);<br>            <span class="hljs-built_in">dfs</span>(rod[x][i].first);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, g, a, b, c;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>    &#123;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);<br>            rod[a].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(b, c));<br>            rod[b].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(a, c));<br>        &#125; <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>        rch[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>        c = <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>            &#123;<br>                g = (val[j] &gt;&gt; i) &amp; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (!ttre[p][g])<br>                    ttre[p][g] = c++;<br>                p = ttre[p][g];<br>            &#125;<br>            <span class="hljs-comment">//ed[p]++;</span><br>        &#125;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>, p = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">30</span>; j &gt;= <span class="hljs-number">0</span>; j--)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (ttre[p][!((val[i] &gt;&gt; j) &amp; <span class="hljs-number">1</span>)])<br>                &#123;<br>                    tmp += <span class="hljs-number">1</span> &lt;&lt; j;<br>                    p = ttre[p][!((val[i] &gt;&gt; j) &amp; <span class="hljs-number">1</span>)];<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    p = ttre[p][((val[i] &gt;&gt; j) &amp; <span class="hljs-number">1</span>)];<br>            &#125;<br>            ans = <span class="hljs-built_in">max</span>(ans, tmp);<br>        &#125;<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            val[i] = <span class="hljs-number">0</span>;<br>            rch[i] = <span class="hljs-number">0</span>;<br>            rod[i].<span class="hljs-built_in">clear</span>();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c; i++)<br>        &#123;<br>            ttre[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>            ttre[i][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-the-xor-largest-pair"><a class="markdownIt-Anchor" href="#d-the-xor-largest-pair"></a> D The XOR Largest Pair</h2><h4 id="题目大意-4"><a class="markdownIt-Anchor" href="#题目大意-4"></a> 题目大意</h4><p>给定一些数，求任意两数间的异或最大值；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>字典树板，将这些数存入字典树，依次在字典树中匹配与其异或值最大的值，并更新答案；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            f = <span class="hljs-number">-1</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> (ll)x * f;<br>&#125;<br>stack&lt;<span class="hljs-type">int</span>&gt;stk;<br><span class="hljs-type">int</span> ttre[<span class="hljs-number">3100006</span>][<span class="hljs-number">2</span>],ed[<span class="hljs-number">3100006</span>],k[<span class="hljs-number">100005</span>];<span class="hljs-comment">//val[300005];</span><br><span class="hljs-type">int</span> c;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,g;<br>    cin &gt;&gt; n;<br>    c=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;k[j]);<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i&gt;=<span class="hljs-number">0</span>; i--)<br>        &#123;<br>            g = (k[j]&gt;&gt;i)&amp;<span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//printf(&quot;%d*&quot;,g);</span><br>            <span class="hljs-keyword">if</span> (!ttre[p][g])<br>                ttre[p][g] = c++;<br>            p = ttre[p][g];<br>            <span class="hljs-comment">//val[p]=g;</span><br>        &#125;<br>        ed[p]++;<br>    &#125;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> tmp=<span class="hljs-number">0</span>,p=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">30</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(ttre[p][!((k[i]&gt;&gt;j)&amp;<span class="hljs-number">1</span>)])<br>            &#123;<br>                tmp+=<span class="hljs-number">1</span>&lt;&lt;j;<br>                p=ttre[p][!((k[i]&gt;&gt;j)&amp;<span class="hljs-number">1</span>)];<br>            &#125;<br>            <span class="hljs-keyword">else</span>  p=ttre[p][((k[i]&gt;&gt;j)&amp;<span class="hljs-number">1</span>)];<br>        &#125;<br>        ans=<span class="hljs-built_in">max</span>(ans,tmp);<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-phone-list"><a class="markdownIt-Anchor" href="#e-phone-list"></a> E Phone List</h2><h4 id="题目大意-5"><a class="markdownIt-Anchor" href="#题目大意-5"></a> 题目大意</h4><p>给定 n 个长度不超过 10 且各异的数字串，问其中是否存在两个数字串 S,T，使得 S 是 T 的前缀。</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>字典树板，接收到的都存入字典树后，检测字典树中是否有前缀关系即可；</p><p>注意不能用 lld 接收，存在前导零；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            f = <span class="hljs-number">-1</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> (ll)x * f;<br>&#125;<br><span class="hljs-type">int</span> g;<br><span class="hljs-type">int</span> ttre[<span class="hljs-number">100005</span>][<span class="hljs-number">10</span>], meet[<span class="hljs-number">100005</span>], ed[<span class="hljs-number">100005</span>], c;<br><span class="hljs-type">char</span> k[<span class="hljs-number">12</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    itn t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> f = <span class="hljs-number">0</span>;<br>        cin &gt;&gt; n;<br>        c = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (n--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;k);<br>            <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; k[i]; i++)<br>            &#123;<br>                g = k[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-comment">//printf(&quot;%d*&quot;,g);</span><br>                <span class="hljs-keyword">if</span> (!ttre[p][g])<br>                    ttre[p][g] = c++;<br>                p = ttre[p][g];<br>                meet[p]++;<br>            &#125;<br>            <span class="hljs-comment">//meet[p]--;</span><br>            ed[p]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; c; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (ed[i] &amp;&amp; meet[i] &gt;= <span class="hljs-number">2</span>)<br>                f = <span class="hljs-number">1</span>;<br>            ed[i]=<span class="hljs-number">0</span>;<br>            meet[i]=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">memset</span>(ttre[i],<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> ttre[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="f-xor-sum"><a class="markdownIt-Anchor" href="#f-xor-sum"></a> F Xor sum</h2><h4 id="题目大意-6"><a class="markdownIt-Anchor" href="#题目大意-6"></a> 题目大意</h4><p>给定n个数和一个数k，求出最短的连续的一段数，使得它们的异或和大于等于k，如果没有则输出-1。</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p><a href="https://blog.csdn.net/qq_39523236/article/details/118940552">参考</a></p><p>对于给定的每一个数，在存入字典树之前先判断并更新答案，这样搜索范围内的只有它前面的数，此时即为固定右端点找左端点；</p><p>每个数在树中存储的结尾要记录这个数最后一次出现的下标，这样就可以使区间尽可能小；</p><p>注意无论这位的异或值是1还是0，只要合法，就应计算，之后取最大值；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><p>代码来自上链</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> itn;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> ll <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>)<br>            f = <span class="hljs-number">-1</span>;<br>        c = <span class="hljs-built_in">getchar</span>();<br>    &#125;<br>    <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>        x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> (ll)x * f;<br>&#125;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> trie[N * <span class="hljs-number">31</span>][<span class="hljs-number">2</span>], mx[N * <span class="hljs-number">31</span>], fa[N * <span class="hljs-number">31</span>], tot = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    trie[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = trie[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= tot; i++)<br>    &#123;<br>        mx[i] = fa[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    tot = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> temp[<span class="hljs-number">31</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>    &#123;<br>        temp[i] = x &amp; <span class="hljs-number">1</span>;<br>        x &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">30</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> p = now;<br>        mx[now] = pos;<br>        <span class="hljs-keyword">if</span> (trie[now][temp[i]])<br>            now = trie[now][temp[i]];<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            trie[now][temp[i]] = ++tot;<br>            trie[tot][<span class="hljs-number">0</span>] = trie[tot][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>            now = tot;<br>        &#125;<br>        fa[now] = p;<br>    &#125;<br>    mx[now] = pos;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> now, <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> bit)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (sum &gt;= k)<br>        <span class="hljs-keyword">return</span> mx[now];<br>    <span class="hljs-keyword">if</span> (sum + (<span class="hljs-number">1</span> &lt;&lt; (bit + <span class="hljs-number">1</span>)) &lt;= k)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (trie[now][<span class="hljs-number">0</span>])<br>    &#123;<br>        <span class="hljs-type">int</span> temp = (r &amp; (<span class="hljs-number">1</span> &lt;&lt; bit));<br>        ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">query</span>(r, k, trie[now][<span class="hljs-number">0</span>], sum + temp, bit - <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">if</span> (trie[now][<span class="hljs-number">1</span>])<br>    &#123;<br>        <span class="hljs-type">int</span> temp = (r &amp; (<span class="hljs-number">1</span> &lt;&lt; bit) ^ (<span class="hljs-number">1</span> &lt;&lt; bit));<br>        ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">query</span>(r, k, trie[now][<span class="hljs-number">1</span>], sum + temp, bit - <span class="hljs-number">1</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T = <span class="hljs-number">1</span>;<br>    T = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">while</span> (T--)<br>    &#123;<br>        <span class="hljs-built_in">init</span>();<br>        <span class="hljs-type">int</span> n, k;<br>        n = <span class="hljs-built_in">read</span>();<br>        k = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-type">int</span> ans = n + <span class="hljs-number">1</span>, l = <span class="hljs-number">-1</span>, r = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> a = <span class="hljs-built_in">read</span>();<br>            sum ^= a;<br>            <span class="hljs-keyword">if</span> (sum &gt;= k)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (ans &gt; i)<br>                &#123;<br>                    ans = i;<br>                    l = <span class="hljs-number">1</span>;<br>                    r = i;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-type">int</span> d = <span class="hljs-built_in">query</span>(sum, k, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">29</span>);<br>            <span class="hljs-keyword">if</span> (d &gt; <span class="hljs-number">0</span> &amp;&amp; ans &gt; i - d)<br>            &#123;<br>                ans = i - d;<br>                l = d + <span class="hljs-number">1</span>;<br>                r = i;<br>            &#125;<br><br>            <span class="hljs-built_in">insert</span>(sum, i);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ans == n + <span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, l, r);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-Hash（ABCDEH）</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-Hash%EF%BC%88ABCDEH%EF%BC%89/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-Hash%EF%BC%88ABCDEH%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/449160#overview">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-snowflake-snow-snowflakes">A Snowflake Snow Snowflakes</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-palindrome">B Palindrome</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-2">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-squares">C Squares</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-3">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91">D 对称二叉树</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-4">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-%E4%BC%81%E9%B9%85qq">E 企鹅QQ</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-5">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#h-ones">H Ones</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-6">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢学长的讲解与付出；<br />感谢ph和zsl两位大佬的指导与讨论；</p><p>这组题做得我脑袋疼hhh；</p><h2 id="a-snowflake-snow-snowflakes"><a class="markdownIt-Anchor" href="#a-snowflake-snow-snowflakes"></a> A Snowflake Snow Snowflakes</h2><h4 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h4><p>按顺序给定 n 片雪花的每个枝的长度，判断是否有相同的雪花存在；<br />（相同指经旋转/对称后完全相同）</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>标准做法是哈希表，对于哈希值与待测雪花相同的所有雪花进行暴力比对，哈希策略为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mn>6</mn></msubsup><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mn>6</mn></msubsup><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">hash(x)=\sum_{i=1}^6x_i+\prod_{i=1}^6x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>；</p><p>我这边的做法是单哈希匹配，即对于一个雪花的所有可能起点和顺序共生成12个哈希值，一种情况中的哈希策略为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mn>6</mn></msubsup><msub><mi>x</mi><mi>i</mi></msub><msup><mi>P</mi><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">hash(x)=\sum_{i=1}^6x_iP^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></p><p>关于P的确定费了一些时间，同时需要注意的细节蛮多的：<br />比如说去重如果用map或set就会TLE，只能通过数组sort后手动去重；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><p>直接匹配</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-comment">//const ull M = 1000000000000037;</span><br><span class="hljs-type">const</span> ull P = <span class="hljs-number">10000019</span>;<br>ll mp[<span class="hljs-number">1200005</span>];<br>map&lt;ll,<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,f=<span class="hljs-number">1</span>;<span class="hljs-type">char</span> c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span>(c&lt;<span class="hljs-string">&#x27;0&#x27;</span>||c&gt;<span class="hljs-string">&#x27;9&#x27;</span>) &#123;<span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>) f=<span class="hljs-number">-1</span>;c=<span class="hljs-built_in">getchar</span>();&#125;<br><span class="hljs-keyword">while</span> (c&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="hljs-string">&#x27;9&#x27;</span>) x=(x&lt;&lt;<span class="hljs-number">3</span>)+(x&lt;&lt;<span class="hljs-number">1</span>)+(c^<span class="hljs-number">48</span>),c=<span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> x*f;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    n=<span class="hljs-built_in">read</span>();<br>    ll a[<span class="hljs-number">6</span>];<br>    ull p[]=&#123;<span class="hljs-number">1</span>,P,P*P,P*P*P,P*P*P*P,P*P*P*P*P&#125;;<br>    ll mapt[<span class="hljs-number">13</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">6</span>;j++)<br>        &#123;<br>            a[j]=<span class="hljs-built_in">read</span>();<br>        &#125;<br>        <span class="hljs-type">int</span> cc=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">6</span>;j++)<br>        &#123;<br>            ull tmp=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">6</span>;k++)<br>            &#123;<br>                tmp+=a[(j+k)%<span class="hljs-number">6</span>]*p[k];<br>            &#125;<br>            tmp%=M;<br>            mapt[cc++]=(ll)tmp;<br>            tmp=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">6</span>;k++)<br>            &#123;<br>                tmp+=a[(j-k+<span class="hljs-number">6</span>)%<span class="hljs-number">6</span>]*p[k];<br>            &#125;<br>            tmp%=M;<br>            mapt[cc++]=(ll)tmp;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(mapt,mapt+cc);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;cc;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(mapt[j]!=mapt[j+<span class="hljs-number">1</span>]||j==cc<span class="hljs-number">-1</span>)<br>            &#123;<br>                mp[c++]=mapt[j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(mp,mp+c);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;c<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;%lld\n&quot;,mp[i]);</span><br>        <span class="hljs-keyword">if</span>(mp[i]==mp[i+<span class="hljs-number">1</span>])<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Twin snowflakes found.&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No two snowflakes are alike.&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>标准做法，<a href="//https://blog.csdn.net/weixin_30539835/article/details/96802486">来自这里</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> P = <span class="hljs-number">99991</span>, MXN = <span class="hljs-number">110000</span>;<br><span class="hljs-type">int</span> n, cnt, nxt[MXN], head[MXN], snow[MXN][<span class="hljs-number">6</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Hash</span><span class="hljs-params">(<span class="hljs-type">int</span> *a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, mul = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i)<br>    &#123;<br>        sum = (sum + a[i]) % P;<br>        mul = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)mul * a[i] % P;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (sum + mul) % P;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">equ</span><span class="hljs-params">(<span class="hljs-type">int</span> *a, <span class="hljs-type">int</span> *b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">6</span>; ++j)<br>        &#123;<br>            <span class="hljs-type">bool</span> flag = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">6</span>; ++k)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (a[(i + k) % <span class="hljs-number">6</span>] != b[(j + k) % <span class="hljs-number">6</span>])<br>                &#123;<br>                    flag = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            flag = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">6</span>; ++k)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (a[(i + k) % <span class="hljs-number">6</span>] != b[(j - k + <span class="hljs-number">6</span>) % <span class="hljs-number">6</span>])<br>                &#123;<br>                    flag = <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">inser</span><span class="hljs-params">(<span class="hljs-type">int</span> *a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> val = <span class="hljs-built_in">Hash</span>(a);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[val]; i; i = nxt[i])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">equ</span>(a, snow[i]))<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    ++cnt;<br>    <span class="hljs-built_in">memcpy</span>(snow[cnt], a, <span class="hljs-number">6</span> * <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">int</span>));<br>    nxt[cnt] = head[val];<br>    head[val] = cnt;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>    &#123;<br>        <span class="hljs-type">int</span> t[<span class="hljs-number">6</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;t[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">inser</span>(t))<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Twin snowflakes found.&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No two snowflakes are alike.&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-palindrome"><a class="markdownIt-Anchor" href="#b-palindrome"></a> B Palindrome</h2><h4 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h4><p>对于给定的两个字符串，求最长回文子串；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>马拉车算法，具体可以在<a href="//https://blog.csdn.net/qq_43456058/article/details/94588721">这里</a>和<a href="//https://www.bilibili.com/video/BV1S7411F7Xc">这里</a>了解；<br />（代码来自上链）</p><p>os：可能要开一个字符串算法的笔记了</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e6</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">char</span> s[maxn * <span class="hljs-number">2</span>], str[maxn * <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> Len[maxn * <span class="hljs-number">2</span>], len;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getstr</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//重定义字符串</span><br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>str[k++] = <span class="hljs-string">&#x27;@&#x27;</span>;<span class="hljs-comment">//开头加个特殊字符防止越界</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>str[k++] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>str[k++] = s[i];<br>&#125;<br>str[k++] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>len = k;<br>str[k] = <span class="hljs-number">0</span>;<span class="hljs-comment">//字符串尾设置为0，防止越界</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">manacher</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>, id;<span class="hljs-comment">//mx为最右边，id为中心点</span><br><span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++) &#123;<br><span class="hljs-keyword">if</span> (mx &gt; i) Len[i] = <span class="hljs-built_in">min</span>(mx - i, Len[<span class="hljs-number">2</span> * id - i]);<span class="hljs-comment">//判断当前点超没超过mx</span><br><span class="hljs-keyword">else</span> Len[i] = <span class="hljs-number">1</span>;<span class="hljs-comment">//超过了就让他等于1，之后再进行查找</span><br><span class="hljs-keyword">while</span> (str[i + Len[i]] == str[i - Len[i]]) Len[i]++;<span class="hljs-comment">//判断当前点是不是最长回文子串，不断的向右扩展</span><br><span class="hljs-keyword">if</span> (Len[i] + i &gt; mx) &#123;<span class="hljs-comment">//更新mx</span><br>mx = Len[i] + i;<br>id = i;<span class="hljs-comment">//更新中间点</span><br>maxx = <span class="hljs-built_in">max</span>(maxx, Len[i]);<span class="hljs-comment">//最长回文字串长度</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> (maxx - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(s,<span class="hljs-string">&quot;END&quot;</span>))<span class="hljs-keyword">break</span>;<br>len = <span class="hljs-built_in">strlen</span>(s);<br><span class="hljs-built_in">getstr</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case %d: %d\n&quot;</span>,i++,<span class="hljs-built_in">manacher</span>());<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-squares"><a class="markdownIt-Anchor" href="#c-squares"></a> C Squares</h2><h4 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h4><p>给定n个点，问其中能组成多少个正方形；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>对点哈希后匹配，便可在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 复杂度内确定指定点的存在性；</p><p>使用了双哈希以免被卡；</p><p>同样，哈希策略中参数的确定也比较困难，然后此道题时间卡得也比较紧；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-comment">//const ull M = 1000000000000037;</span><br><span class="hljs-type">const</span> ll P = <span class="hljs-number">10000019</span>;<br><span class="hljs-type">const</span> ll Q = <span class="hljs-number">9999971</span>;<br><span class="hljs-type">int</span> mp1[<span class="hljs-number">10000027</span>], mp2[<span class="hljs-number">10000027</span>],h1[<span class="hljs-number">1003</span>],h2[<span class="hljs-number">1003</span>];<br>pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;p[<span class="hljs-number">1003</span>];<br><span class="hljs-function">ll <span class="hljs-title">hash1</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(x.first)&gt;<span class="hljs-number">20000</span>||<span class="hljs-built_in">abs</span>(x.second)&gt;<span class="hljs-number">20000</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">10000026</span>;<br>    <span class="hljs-keyword">return</span> ((ll)x.first*<span class="hljs-number">20001</span>+x.second+<span class="hljs-number">400040007</span>)%P;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">hash2</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(x.first)&gt;<span class="hljs-number">20000</span>||<span class="hljs-built_in">abs</span>(x.second)&gt;<span class="hljs-number">20000</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">10000026</span>;<br>    <span class="hljs-keyword">return</span> ((ll)x.first*<span class="hljs-number">20001</span>+x.second+<span class="hljs-number">400040007</span>)%Q;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    ll ans;<br>    <span class="hljs-comment">//pair&lt;int,int&gt;tmp;</span><br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!n)<span class="hljs-keyword">break</span>;<br>        ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;p[i].first,&amp;p[i].second);<br>            h1[i]=<span class="hljs-built_in">hash1</span>(p[i]);<br>            h2[i]=<span class="hljs-built_in">hash2</span>(p[i]);<br>            mp1[h1[i]]++;<br>            mp2[h2[i]]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i==j)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>            pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;a,b;<br>            a=<span class="hljs-built_in">make_pair</span>(p[i].first+(p[i].second-p[j].second),p[i].second-(p[i].first-p[j].first));<br>            b=<span class="hljs-built_in">make_pair</span>(p[j].first+(p[i].second-p[j].second),p[j].second-(p[i].first-p[j].first));<br>            <span class="hljs-keyword">if</span>(mp1[<span class="hljs-built_in">hash1</span>(a)]<br>             &amp;&amp;mp1[<span class="hljs-built_in">hash1</span>(b)]<br>             &amp;&amp;mp2[<span class="hljs-built_in">hash2</span>(a)]<br>             &amp;&amp;mp2[<span class="hljs-built_in">hash2</span>(b)])<br>            ans++;<span class="hljs-comment">//printf(&quot;%d %d\n&quot;,i,j);</span><br>            a=<span class="hljs-built_in">make_pair</span>(p[i].first-(p[i].second-p[j].second),p[i].second+(p[i].first-p[j].first));<br>            b=<span class="hljs-built_in">make_pair</span>(p[j].first-(p[i].second-p[j].second),p[j].second+(p[i].first-p[j].first));<br>            <span class="hljs-keyword">if</span>(mp1[<span class="hljs-built_in">hash1</span>(a)]<br>             &amp;&amp;mp1[<span class="hljs-built_in">hash1</span>(b)]<br>             &amp;&amp;mp2[<span class="hljs-built_in">hash2</span>(a)]<br>             &amp;&amp;mp2[<span class="hljs-built_in">hash2</span>(b)])<br>            ans++;<span class="hljs-comment">//printf(&quot;%d %d\n&quot;,i,j);</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-comment">//scanf(&quot;%d%d&quot;,&amp;p[i].first,&amp;p[i].second);</span><br>            mp1[h1[i]]--;<br>            mp2[h2[i]]--;<br>        &#125;<br>        <span class="hljs-comment">//memset(mp1,0,sizeof mp1);</span><br>        <span class="hljs-comment">//memset(mp2,0,sizeof mp2);</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans&gt;&gt;<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-对称二叉树"><a class="markdownIt-Anchor" href="#d-对称二叉树"></a> D 对称二叉树</h2><h4 id="题目大意-4"><a class="markdownIt-Anchor" href="#题目大意-4"></a> 题目大意</h4><p>对于给定二叉树，判断其中最大的对称二叉树的节点数</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p><a href="https://www.luogu.com.cn/problem/solution/P5018">参考</a><br />首先统计出以每个节点为根的子树大小；</p><p>如果以某点为根的子树为对称二叉树，则满足以下条件：</p><ol><li>该点两个子节点权值相同；</li><li>左子节点的左子节点与右子节点的右子节点权值相同，左子节点的右子节点与右子节点的左子节点权值相同；</li><li>两个权值需要相同的节点的异侧子节点权值也需要相同；</li></ol><p>…以此递归；</p><p>对于其他方法，还可以通过中序遍历序列求最长回文串~</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-type">const</span> ull M = <span class="hljs-number">19260817</span>;<br><span class="hljs-type">const</span> ull P = <span class="hljs-number">100000</span> - <span class="hljs-number">3</span>;<br>pair&lt;<span class="hljs-type">int</span>,pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt;po[<span class="hljs-number">1000006</span>];<br><span class="hljs-type">int</span> sons[<span class="hljs-number">1000006</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    sons[x]=<span class="hljs-number">1</span>;<br>    sons[x]+=<span class="hljs-built_in">dfs</span>(po[x].second.first);<br>    sons[x]+=<span class="hljs-built_in">dfs</span>(po[x].second.second);<br>    <span class="hljs-keyword">return</span> sons[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">-1</span>&amp;&amp;y==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x!=<span class="hljs-number">-1</span>&amp;&amp;y!=<span class="hljs-number">-1</span>&amp;&amp;po[x].first==po[y].first<br>        &amp;&amp;<span class="hljs-built_in">judge</span>(po[x].second.first,po[y].second.second)<br>        &amp;&amp;<span class="hljs-built_in">judge</span>(po[x].second.second,po[y].second.first))<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;po[i].first);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;po[i].second.first,&amp;po[i].second.second);<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(sons[i]&lt;=ans)<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(po[i].second.first,po[i].second.second))<br>        ans=sons[i];<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-企鹅qq"><a class="markdownIt-Anchor" href="#e-企鹅qq"></a> E 企鹅QQ</h2><h4 id="题目大意-5"><a class="markdownIt-Anchor" href="#题目大意-5"></a> 题目大意</h4><p>在给定字符串中，寻找至多有一个相同位置字符不同的字符串对数；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>由于总位数是给定的，我可以预处理后，将每一位分别扣去，对一个字符串生成其长度个哈希值，单字符串内所有哈希值去重后加入全体的集合（防止我重我自己）；</p><p>在处理完所有字符串后，再在全体集合进行查重，对于每一对重复，即答案应+1；</p><p>PS：map验重会被卡；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-comment">//const ull M = 18446744073709551615;</span><br><span class="hljs-type">const</span> ull P = <span class="hljs-number">100000</span> - <span class="hljs-number">3</span>;<br>ull a[<span class="hljs-number">202</span>];<br><span class="hljs-comment">//map&lt;ull, int&gt; mp[202];</span><br>ull vt[<span class="hljs-number">202</span>][<span class="hljs-number">30004</span>];<br><span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-function">ull <span class="hljs-title">qm</span><span class="hljs-params">(ull a, ull b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ull ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a;<br>        a = a * a;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ghash</span><span class="hljs-params">(string g)</span></span><br><span class="hljs-function"></span>&#123;<br>    ull p = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; g[i]; p *= P, i++)<br>    &#123;<br>        a[i + <span class="hljs-number">1</span>] = a[i] + g[i] * p;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, l, t;<br>    ull ans = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n &gt;&gt; l &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; i++)vt[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    string g;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; g;<br>        <span class="hljs-built_in">ghash</span>(g);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= l; j++)<br>        &#123;<br>            ull tmp = a[l] - a[j] + a[j - <span class="hljs-number">1</span>] * P;<br>            <span class="hljs-comment">//ans+=mp[j][tmp];</span><br>            <span class="hljs-comment">//mp[j][tmp]++;</span><br>            vt[j][vt[j][<span class="hljs-number">0</span>]++] = tmp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= l; i++)<br>        <span class="hljs-built_in">sort</span>(vt[i] + <span class="hljs-number">1</span>, vt[i] + vt[i][<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= l; j++)<br>    &#123;<br>        <span class="hljs-type">int</span> le = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= vt[j][<span class="hljs-number">0</span>]; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ( vt[j][i + <span class="hljs-number">1</span>] != vt[j][i])<br>            &#123;<br>                <span class="hljs-type">int</span> tmp = i - le;<br>                ans += tmp * (tmp - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>                le = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">////</span><br>    &#125;<br>    <span class="hljs-comment">/*for(int i=1;i&lt;=l;i++)</span><br><span class="hljs-comment">    for (auto it = mp[i].begin(); it != mp[i].end(); it++)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        int tmp = (it)-&gt;second;</span><br><span class="hljs-comment">        if(tmp&gt;1)ans += tmp * (tmp - 1) / 2;</span><br><span class="hljs-comment">    &#125;*/</span><br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-ones"><a class="markdownIt-Anchor" href="#h-ones"></a> H Ones</h2><h4 id="题目大意-6"><a class="markdownIt-Anchor" href="#题目大意-6"></a> 题目大意</h4><p>对于给定的 n （ n 满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi mathvariant="normal">∤</mi><mi>n</mi><mtext> </mtext><mo separator="true">,</mo><mtext> </mtext><mn>5</mn><mi mathvariant="normal">∤</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">2\not|n\text{ },\text{ }5\not|n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">n</span><span class="mord text"><span class="mord"> </span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord"> </span></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">n</span></span></span></span>），输出最小 x 满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mi>n</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mi>x</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>9</mn></mrow><annotation encoding="application/x-tex">kn=(10^x-1)/9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">9</span></span></span></span> ；</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>直接计算是不可能的，枚举 x 即可；</p><p>直至满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mi>x</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mo stretchy="false">(</mo><mn>9</mn><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">(10^x-1)\%(9n)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">%</span><span class="mopen">(</span><span class="mord">9</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> ；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll n;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%n;<br>        a=a*a%n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<br>        n*=<span class="hljs-number">9ll</span>;<br>        <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;<span class="hljs-number">1</span>;i++)<br>        &#123;<br>            <span class="hljs-comment">//printf(&quot;*%lld\n&quot;,qm(10ll,i));</span><br>            <span class="hljs-keyword">if</span>((<span class="hljs-built_in">qm</span>(<span class="hljs-number">10ll</span>,i)<span class="hljs-number">-1</span>+n)%n==<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-前缀和与差分（LMRSTUVXYZ）</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%EF%BC%88LMRSTUVXYZ%EF%BC%89/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%89%8D%E7%BC%80%E5%92%8C%E4%B8%8E%E5%B7%AE%E5%88%86%EF%BC%88LMRSTUVXYZ%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/448203#overview">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢老师的讲解与付出；<br />感谢ph和zsl两位大佬的指导与讨论；</p><p>题量好大XD；</p><p><s>如果用甲子命名法就可以出60道了；</s></p><p>总的来说，对于一个数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，其与其差分数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和前缀和数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">s_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 存在以下关系：（边界条件未仔细调整）</p>a_n=\sum_{i=1}^nd_i$$$$s_n=\sum_{i=1}^na_i$$通过此规律，我们便可以在线性复杂度内完成从差分数组（$O(1)$ 区间修改）到前缀和数组（$O(1)$ 区间查询）之间的转换；## L 子段求和板，处理出前缀和后，作差出子段和即可；#### 题目大意给出一个长度为N的数组，进行Q次查询，查询从第i个元素开始长度为l的子段所有元素之和。#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll s[<span class="hljs-number">50004</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,g,a,b;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin&gt;&gt;g,s[i]=s[i<span class="hljs-number">-1</span>]+g;<br>    cin&gt;&gt;g;<br>    <span class="hljs-keyword">while</span>(g--)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,s[a+b<span class="hljs-number">-1</span>]-s[a<span class="hljs-number">-1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>## M Alyona and a tree[参考](https://blog.csdn.net/qq_34374664/article/details/70246427)#### 题目大意给出一棵根树，每个节点上和每一条边上都标记有一个正整数；定义 $dist(v, u)$ ：为从 v 到 u 的简单路径中，边上的正整数之和；定义 v 控制 u （$u\not=v$）：u 在 v 的子树中，并且 $dist(v, u) \leqslant a_u$ ；**a~u~！！！**输出每一个节点所能控制的节点个数；#### 思路对于某节点 $u_n$，在从根节点到该节点的路径 $u_1,u_2,...,u_n$ 中，如果 $u_{i}$ 不能对 $u_n$ 产生控制，则所有 $u_j(j\leqslant i)$ 均不能对其产生控制，此规律满足了二端性（以二分）和前缀性质（以前缀统计）;所以我们可以在对树dfs的同时，对 $u_n$ 维护好路径 $u_1,u_2,...,u_n$ 上的 $dist(u_1,u_1),dist(u_1,u_2),...,dist(u_1,u_n)$ ；此时有 $dist(u_i,u_n)=dist(u_1,u_n)-dist(u_1,u_{i-1})$ ， 我们可以通过二分确定最前一个能对 $u_n$ 产生控制的点；在统计部份，我们可以认为对于节点  $u_i$ ，其“本应”控制其子节点控制的所有点，但是子树中有一些点 $u_j$ ，最远能控制其的点是  $u_i$ 的子节点，那么在统计  $u_i$ 的控制数时应把他们减去，并在统计上级节点时同样不计入；此时便应用了差分思想，在二分出最前一个能对  $u_j$ 产生控制的点时，应该在对应的位置标记 -1，即为控制数-1，在统计中便减掉了此点；#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br>vector&lt;pair&lt;ll, <span class="hljs-type">int</span>&gt;&gt; G[MAXN], path;<br>ll dep[MAXN];<br><span class="hljs-type">int</span> sum[MAXN], a[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span><br><span class="hljs-function"></span>&#123;<br>    path.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(dep[u], u));<br>    <span class="hljs-type">int</span> it = <span class="hljs-built_in">lower_bound</span>(path.<span class="hljs-built_in">begin</span>(), path.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">make_pair</span>(dep[u] - a[u], <span class="hljs-number">-1</span>)) - path.<span class="hljs-built_in">begin</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (it &gt;= <span class="hljs-number">0</span>)<br>        sum[path[it].second]--;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; G[u].<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-type">int</span> v = G[u][i].first, w = G[u][i].second;<br>        dep[v] = dep[u] + w;<br>        <span class="hljs-built_in">dfs</span>(v);<br>        sum[u] += sum[v] + <span class="hljs-number">1</span>;<br>    &#125;<br>    path.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(sum, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(sum));<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> t, w;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;t, &amp;w);<br>        G[t].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(i, w));<br>    &#125;<br>    dep[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, sum[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>## R 前缀和板，处理出前缀和后，输出即可；#### 题目大意输入一个长度为n(1 <= n <= 100000)数组ai(0<=ai<=1000)，输出他的前缀和。#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll s[<span class="hljs-number">100005</span>];<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,g,a,b;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cin&gt;&gt;g,s[i]=s[i<span class="hljs-number">-1</span>]+g;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">1</span>;a&lt;=n;a++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,s[a]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>## S 校门外的树#### 题目大意>某校大门外长度为L的马路上有一排树，每两棵相邻的树之间的间隔都是 1 米。我们可以把马路看成一个数轴，马路的一端在数轴 0 的位置，另一端在 L 的位置；数轴上的每个整数点，即 0，1，2，⋯，L ，都种有一棵树。由于马路上有一些区域要用来建地铁。这些区域用它们在数轴上的起始点和终止点表示。已知任一区域的起始点和终止点的坐标都是整数，区域之间可能有重合的部分。现在要把这些区域中的树（包括区域端点处的两棵树）移走。你的任务是计算将这些树都移走后，马路上还有多少棵树。#### 思路像扫雪那道题，对于每一个砍树的区间，我只需要在区间左端点标记+1，右端点标记-1，之后扫一遍差分数组并累加差分值，统计有多少个位置累加值为0即可；#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll s[<span class="hljs-number">100005</span>];<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,t;<br>    cin&gt;&gt;n&gt;&gt;t;<br>    n++;<br>    <span class="hljs-type">int</span> a,b;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        a++,b++;<br>        s[a<span class="hljs-number">-1</span>]++;<br>        s[b]--;<br>    &#125;<br>    <span class="hljs-type">int</span> m=s[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!m)ans++;<br>        m+=s[i];<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>## T 激光炸弹#### 题目大意给出每一个目标的坐标与价值，求任意 $R\times R$ 范围内总价值的最大值#### 思路数据量不大，二位前缀和处理后，穷举每个点，算出以其为左下点 / 右上点的 $R\times R$ 区间内的价值和；#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> s[<span class="hljs-number">5003</span>][<span class="hljs-number">5003</span>];<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,r;<br>    cin&gt;&gt;n&gt;&gt;r;<br>    <span class="hljs-type">int</span> x,y,v;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;v;<br>        x++,y++;<br>        s[x][y]=v;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5001</span>;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">5001</span>;j++)<br>    s[i][j]+=s[i<span class="hljs-number">-1</span>][j]+s[i][j<span class="hljs-number">-1</span>]-s[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=r;i&lt;=<span class="hljs-number">5001</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=r;j&lt;=<span class="hljs-number">5001</span>;j++)<br>        &#123;<br>            ans=<span class="hljs-built_in">max</span>(ans,s[i][j]-s[i-r][j]-s[i][j-r]+s[i-r][j-r]);<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>##  U 天上的星星#### 题目大意给出每一个星星的坐标与亮度，求任意给定范围内的亮度和；#### 思路二位前缀和处理后，输出给定范围的和即可#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll s[<span class="hljs-number">2003</span>][<span class="hljs-number">2003</span>];<br><span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//int k,row[2003],col[2003];</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> x,y,v;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cin&gt;&gt;x&gt;&gt;y&gt;&gt;v;<br>        x++,y++;<br>        s[x][y]+=v;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2001</span>;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2001</span>;j++)<br>    s[i][j]+=s[i<span class="hljs-number">-1</span>][j]+s[i][j<span class="hljs-number">-1</span>]-s[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>    <span class="hljs-type">int</span> q,x1,x2,y1,y2;<br>    cin&gt;&gt;q;<br>    <span class="hljs-keyword">while</span>(q--)<br>    &#123;<br>        cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;<br>        x1++,x2++,y1++,y2++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,s[x2][y2]-s[x2][y1<span class="hljs-number">-1</span>]-s[x1<span class="hljs-number">-1</span>][y2]+s[x1<span class="hljs-number">-1</span>][y1<span class="hljs-number">-1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>## V 程序设计：蒜头君的数轴[参考](https://blog.csdn.net/weixin_43154720)#### 题目大意给定数轴上的一些点，要求添加一些点，使相邻两点的距离最多有一个和其余不相等，求出添加的最少点数；#### 思路显然，如果要求所有间隔相等，我们需要求出所有区间长度的gcd，并用每个区间长度去除，累加获取答案；在此题的条件中，所有区间长度的gcd就变为**除一个区间外**其他区间长度的gcd最大值；为求解这个值，我们可以算出每一位的前缀gcd和后缀gcd，并枚举扣掉每个区间，算出其余区间的gcd，并取最大值；#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">100005</span>;<br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-type">int</span> l[maxn], r[maxn], pre[maxn];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-built_in">sort</span>(a, a + n);<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        pre[i - <span class="hljs-number">1</span>] = a[i] - a[i - <span class="hljs-number">1</span>];<br>    l[<span class="hljs-number">0</span>] = pre[<span class="hljs-number">0</span>]; <span class="hljs-comment">//初始化前后缀gcd</span><br>    r[n - <span class="hljs-number">1</span>] = pre[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) <span class="hljs-comment">///从前往后求DCD</span><br>        l[i] = __gcd(l[i - <span class="hljs-number">1</span>], pre[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-comment">///从后往前求GCD</span><br>        r[i] = __gcd(r[i + <span class="hljs-number">1</span>], pre[i]);<br>    <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<span class="hljs-comment">//枚举跳过每个区间</span><br>    &#123;<br>        <span class="hljs-type">int</span> te = __gcd(l[i - <span class="hljs-number">1</span>], r[i + <span class="hljs-number">1</span>]);<span class="hljs-comment">//之前的前缀gcd与之后的后缀gcd</span><br>        <span class="hljs-keyword">if</span> (te &gt;= mx) <span class="hljs-comment">///找跳过某区间的最大公因数</span><br>        &#123;<br>            mx = te;<br>            pos = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i != pos)<br>            sum += pre[i] / mx - <span class="hljs-number">1</span>; <span class="hljs-comment">///每一段需要添加多少个点</span><br>    &#125;<br>    cout &lt;&lt; sum &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>## X 拍照#### 题目大意太复杂了，略#### 思路我们将两个方向运动的船拆开来看：对于每艘船，已知其左右坐标和距岸距离，其**在岸上能够完整被拍摄的位置区间**（后称完拍区间）是确定的；![在这里插入图片描述](https://s2.loli.net/2022/08/02/hQO7YdZBxqXHGf5.png)对于同方向的所有船，每个船对应的完拍区间的相对位置不会改变，也就是说，对于初始时刻的某个方向，岸边每个点都会拍到一定数量的船（后将这个序列成为船数序列）；具体统计操作可以用差分数组实现；对于岸边的某个点，随着时间的流逝，它可以拍到右行船的船数序列中，此点左侧的任意值（船同时向右开）；同理，也可以拍到左行船的船数序列中，此点右侧的任意值；如果要求最大值，我们只需要维护右行船的前缀最大值和左行船的后缀最大值，并找出两个最大值之和的最大值即可；#### 代码1. 注意防负2. 比较卡时间，下面的 $2.02e6$ 如果改成 $5e6$ 就会TLE<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">2020006</span>];<span class="hljs-comment">//to[0] is to left</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,n,x,y,z,d,zzz=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;        <br>        zzz++;<br>        <span class="hljs-built_in">memset</span>(to,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> to);<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">while</span>(n--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;z,&amp;d);<br>            <span class="hljs-comment">//cin&gt;&gt;x&gt;&gt;y&gt;&gt;z&gt;&gt;d;</span><br>            <span class="hljs-keyword">if</span>(d==<span class="hljs-number">-1</span>)d=<span class="hljs-number">0</span>;<br>            x+=z;<br>            y-=z;<br>            x+=<span class="hljs-number">1010000</span>;<br>            y+=<span class="hljs-number">1010000</span>;<br>            <span class="hljs-keyword">if</span>(x&lt;y)<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//如果完拍区间不存在</span><br>            to[d][y]++;<br>            to[d][x+<span class="hljs-number">1</span>]--;<br>        &#125;<br>        <span class="hljs-type">int</span> sum[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2020000</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">2</span>;j++) <span class="hljs-comment">//船数序列去差分</span><br>            &#123;<br>                sum[j]+=to[j][i];<br>                to[j][i]=sum[j];<br>            &#125;<br>            to[<span class="hljs-number">1</span>][i]=<span class="hljs-built_in">max</span>(to[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>],to[<span class="hljs-number">1</span>][i]);<span class="hljs-comment">//前缀最大值</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2020000</span>;i&gt;=<span class="hljs-number">1</span>;i--)<span class="hljs-comment">//后缀最大值</span><br>        &#123;<br>            to[<span class="hljs-number">0</span>][i]=<span class="hljs-built_in">max</span>(to[<span class="hljs-number">0</span>][i+<span class="hljs-number">1</span>],to[<span class="hljs-number">0</span>][i]);<br>        &#125;<br>        <span class="hljs-type">int</span> ma=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2020000</span>;i++)<br>        &#123;<br>            ma=<span class="hljs-built_in">max</span>(ma,to[<span class="hljs-number">0</span>][i]+to[<span class="hljs-number">1</span>][i]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Case #%d:\n%d\n&quot;</span>,zzz,ma);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>## Y Saitama Destroys Hotel#### 题目大意电梯很特别——它从顶层开始，只能向下移动，容量无限。楼层从0到s编号，电梯最初在时间0时从楼层s启动。电梯只需要1秒钟就可以准确地向下移动1层，而接客的时间可以忽略不计。Genos 会收到一份详细说明乘客到达的时间和楼层的列表。请确定 Genos 将所有乘客带到0层需要多长时间（以秒为单位）。#### 思路存储每层最后一位乘客的到达时间，模拟即可~注意边界；#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1003</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,s;<br>    <span class="hljs-type">int</span> b,c;<br>    cin&gt;&gt;n&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;b&gt;&gt;c;<br>        <span class="hljs-keyword">if</span>(a[b])a[b]=<span class="hljs-built_in">max</span>(a[b],c);<br>        <span class="hljs-keyword">else</span> a[b]=c;<br>    &#125;<br>    <span class="hljs-type">int</span> t=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=s;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        t++;<br>        t=<span class="hljs-built_in">max</span>(t,a[i]);<br>    &#125;<br>    cout&lt;&lt;t;<br>&#125;<br></code></pre></td></tr></table></figure>## Z Greg and Array#### 题目大意对于给定数组和给定操作（左界，右界，增加值），给出 k 次变动，每次变动给出**操作的编号区间**（而不是被操作数组元素的编号区间），输出最后数组的结果；#### 思路将数组先转换为差分数组，方便操作；记录每个操作的编号和操作内容；再接收k次变动，通过差分记录每个操作的操作次数；再在数组中执行这些操作；再复原数组，并输出；#### 代码<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>ll a[<span class="hljs-number">100005</span>],o[<span class="hljs-number">100005</span>];<br>pair&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;,<span class="hljs-type">int</span>&gt;opt[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,k,g;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//差分化</span><br>    &#123;<br>        cin&gt;&gt;g;<br>        a[i]+=g;<br>        a[i+<span class="hljs-number">1</span>]-=g;<br>    &#125;<br>    <span class="hljs-type">int</span> l,r,d;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<span class="hljs-comment">//接收操作并记录</span><br>    &#123;<br>        cin&gt;&gt;opt[i].first.first&gt;&gt;opt[i].first.second&gt;&gt;opt[i].second;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)<span class="hljs-comment">//接收改动，并差分存储每个操作的操作数</span><br>    &#123;<br>        cin&gt;&gt;l&gt;&gt;r;<br>        o[l]++;<br>        o[r+<span class="hljs-number">1</span>]--;<br>    &#125;<br>    ll sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<span class="hljs-comment">//遍历所有操作，统计操作数，操作</span><br>    &#123;<br>        sum+=o[i];<br>        <span class="hljs-keyword">if</span>(sum)&#123;<br>        a[opt[i].first.first]+=opt[i].second*sum;<br>        a[opt[i].first.second+<span class="hljs-number">1</span>]-=opt[i].second*sum;<br>        &#125;<br>    &#125;<br>    a[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//还原数组并输出</span><br>    &#123;<br>        a[i]+=a[i<span class="hljs-number">-1</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,a[i]);<br>        <span class="hljs-keyword">if</span>(i!=n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>## ED比较赶，如有疏漏，敬请提出]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一暑假集训-尺取法</title>
    <link href="/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%B0%BA%E5%8F%96%E6%B3%95/"/>
    <url>/2021.07-12/NEFU%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD-%E5%B0%BA%E5%8F%96%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><a href="https://vjudge.net/contest/447792#overview">题集链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-subsequence">A Subsequence</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-jessicas-reading-problem">B Jessica’s Reading Problem</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-2">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-bound-found">C Bound Found</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-3">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-sum-of-consecutive-prime-numbers">D Sum of Consecutive Prime Numbers</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-4">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-nanoape-loves-sequence-ii">E NanoApe Loves Sequence Ⅱ</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-5">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-they-are-everywhere">F They Are Everywhere</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-6">题目大意</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#g-graveyard-design">G Graveyard Design</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-7">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#h-xor-sum-2">H Xor Sum 2</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-8">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#i-petya-and-array">I Petya and Array</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-9">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li><li><a href="#j-%E9%80%9B%E7%94%BB%E5%B1%95">J 逛画展</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-10">题目大意</a></li><li><a href="#%E4%BB%A3%E7%A0%81-10">代码</a></li></ul></li><li><a href="#k-a-b%E6%95%B0%E5%AF%B9">K A-B数对</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F-11">题目大意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-11">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢学长的付出和ph大佬对题解的全程指导；<br />H&amp;I 题比较有意思；</p><h2 id="a-subsequence"><a class="markdownIt-Anchor" href="#a-subsequence"></a> A Subsequence</h2><h4 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h4><p>给出了一个由 N 个正整数 (10 &lt; N &lt; 100 000) 组成的序列，每个都小于或等于 10000，并给出一个正整数 S (S &lt; 100 000 000)。编写一个程序，求出序列中连续元素之和大于或等于S的子序列的最小长度。</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>尺取模板题，在当前区间和不足 S 的情况下，右指针持续右移，直至区间和大于等于 S ；<br />此时维护最短区间长度后，左指针右移，再循环此过程；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,n,s;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n&gt;&gt;s;<br>        <span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        &#125;<br>        <span class="hljs-type">int</span> ans=n+<span class="hljs-number">1</span>,l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(r&lt;n&amp;&amp;sum&lt;s)<br>            &#123;<br>                r++;<br>                sum+=a[r];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(sum&lt;s)<span class="hljs-keyword">break</span>;<br>            ans=<span class="hljs-built_in">min</span>(ans,r-l);<br>            sum-=a[++l];<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(ans==n+<span class="hljs-number">1</span>)?<span class="hljs-number">0</span>:ans);<span class="hljs-comment">//ans==n+1即代表没有任何合法序列</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-jessicas-reading-problem"><a class="markdownIt-Anchor" href="#b-jessicas-reading-problem"></a> B Jessica’s Reading Problem</h2><h4 id="题目大意-2"><a class="markdownIt-Anchor" href="#题目大意-2"></a> 题目大意</h4><p>一本书有 P 页，每页都有编号为 a[ i ]的知识点，知识点可能重复，求最少的连续页数来覆盖所有知识点。</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>首先用记录所有不同知识点的总数，然后对页数进行尺取，记录当前区间不同知识点的总数；<br />当前区间不同知识点数小于不同知识点总数时，右指针右移，直至当前区间不同知识点数等于不同知识点总数；<br />此时维护最短区间长度后，左指针右移，再循环此过程；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1000006</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,cntp=<span class="hljs-number">0</span>;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<span class="hljs-comment">//用map进行桶记录</span><br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        <span class="hljs-keyword">if</span>(!mp[a[i]])<br>        &#123;<br>            mp[a[i]]++;<br>            cntp++;<br>        &#125;<br>    &#125;<br>    mp.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>,ans=n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(r&lt;n&amp;&amp;cnt&lt;cntp)<br>        &#123;<br>            r++;<br>            <span class="hljs-keyword">if</span>(!mp[a[r]])cnt++;<br>            mp[a[r]]++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt&lt;cntp)<span class="hljs-keyword">break</span>;<br>        ans=<span class="hljs-built_in">min</span>(ans,r-l);<br>        l++;<br>        mp[a[l]]--;<br>        <span class="hljs-keyword">if</span>(!mp[a[l]])cnt--;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-bound-found"><a class="markdownIt-Anchor" href="#c-bound-found"></a> C Bound Found</h2><h4 id="题目大意-3"><a class="markdownIt-Anchor" href="#题目大意-3"></a> 题目大意</h4><p>给定 n 个整数序列和非负目标 t。您将找到序列的非空范围（即连续子序列）并输出其下索引 l 和上索引 u。从第 l 个元素到第 u 个元素（含）的序列值的总和的绝对值必须至少与任何其他非空范围的总和的绝对值一样接近 t</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>我们可以对前缀和数组排序；<br />前缀和数组可以快速求出区间和，但是需要注意的一点是，前缀和作差时应为大下标减小下标，只不过这一题中所用的好像是区间和的绝对值，所以也不需要注意前缀和作差时两元素的原下标大小了，只需要保证大前缀和减小前缀和即可；</p><p>类似地，这里制定的尺取策略如下：<br />若区间和绝对值小于t，右指针右移；<br />反之左指针右移；<br />不过要判断两指针重合的情况，强制右移右指针；</p><p>对于每一个生成的区间，均更新差的最小值；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;s[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;k)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!n&amp;&amp;!k)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>            s[i]=<span class="hljs-built_in">make_pair</span>(s[i<span class="hljs-number">-1</span>].first+a[i],i);<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(s,s+n+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span>(k--)<br>        &#123;<br>            <span class="hljs-type">int</span> t;cin&gt;&gt;t;<br>            <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">1</span>,tmp=<span class="hljs-number">0</span>,ml=<span class="hljs-number">0</span>,mr=<span class="hljs-number">0</span>,mdel=<span class="hljs-number">0x3f3f3f3f</span>;<span class="hljs-comment">//mdel记录最小差绝对值</span><br>            <span class="hljs-keyword">while</span>(r&lt;=n)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(t-s[r].first+s[l].first)&lt;mdel)<br>                    ml=l,mr=r,mdel=<span class="hljs-built_in">abs</span>(t-s[r].first+s[l].first);<br>                <span class="hljs-keyword">if</span>(s[r].first-s[l].first&gt;t) l++;<br>                <span class="hljs-keyword">else</span> r++;<br>                <span class="hljs-keyword">if</span>(l==r)r++;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,s[mr].first-s[ml].first);<br>            <span class="hljs-keyword">if</span>(s[ml].second&gt;s[mr].second)<span class="hljs-built_in">swap</span>(ml,mr);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d %d\n&quot;</span>,s[ml].second+<span class="hljs-number">1</span>,s[mr].second);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)<span class="hljs-comment">//初始化</span><br>        &#123;<br>            a[i]=<span class="hljs-number">0</span>;<br>            s[i]=<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-sum-of-consecutive-prime-numbers"><a class="markdownIt-Anchor" href="#d-sum-of-consecutive-prime-numbers"></a> D Sum of Consecutive Prime Numbers</h2><h4 id="题目大意-4"><a class="markdownIt-Anchor" href="#题目大意-4"></a> 题目大意</h4><p>一个整数 n 有时可以被写成若干个连续素数之和的序列。给定一个整数 n，求出这些序列的个数</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>和A题基本相同，只不过从题给数列变为指数列，从大于等于给定值到等于给定值；</p><p>尺取策略如下：<br />右指针右移直至当前区间和不小于给定值；<br />左指针右移直至当前区间和不大于给定值；<br />此时若当前区间和等于给定值，更新答案；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> n[<span class="hljs-number">10101</span>],p[<span class="hljs-number">10101</span>];<br><span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">10100</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!n[i])p[c++]=i;<span class="hljs-comment">//printf(&quot;%d\n&quot;,i);</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;c&amp;&amp;i*p[j]&lt;<span class="hljs-number">10100</span>;j++)<br>        &#123;<br>            n[i*p[j]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;t&amp;&amp;t)<br>    &#123;<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">-1</span>,r=<span class="hljs-number">0</span>,sum=p[<span class="hljs-number">0</span>],ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//printf(&quot;*%d %d %d\n&quot;,l,r,sum);</span><br>        <span class="hljs-keyword">while</span>(sum&lt;t&amp;&amp;r&lt;c)r++,sum+=p[r],f=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(sum&gt;t&amp;&amp;l&lt;r)l++,sum-=p[l],f=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(sum==t)<br>        &#123;<br>            <span class="hljs-comment">//printf(&quot;%d %d %d\n&quot;,p[l],p[r],sum);</span><br>            ans++;<br>            r++,sum+=p[r];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!f)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//一次循环中，左右指针都没有移动，即跳出</span><br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-nanoape-loves-sequence-ii"><a class="markdownIt-Anchor" href="#e-nanoape-loves-sequence-ii"></a> E NanoApe Loves Sequence Ⅱ</h2><h4 id="题目大意-5"><a class="markdownIt-Anchor" href="#题目大意-5"></a> 题目大意</h4><p>对于n长度的给定序列，其中第k大的数不小于m的序列个数</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>对于一段序列(l,r]，如果这个序列中大于等于m的数大于等于k个，那么对于所有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>∈</mo><mo stretchy="false">[</mo><mi>r</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x\in[r,n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> ，序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">(r,x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 均满足条件；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> a[<span class="hljs-number">200005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-type">int</span> n,m,k;<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,ctm=<span class="hljs-number">0</span>;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(r&lt;n&amp;&amp;ctm&lt;k)<br>        &#123;<br>            r++;<br>            <span class="hljs-keyword">if</span>(a[r]&gt;=m)ctm++;<br>        &#125;<br>        <span class="hljs-comment">//printf(&quot;%d %d %d\n&quot;,l,r,ctm);</span><br>        <span class="hljs-keyword">if</span>(ctm&gt;=k)ans+=n-r+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(l&lt;r)<br>        &#123;<br>            l++;<br>            <span class="hljs-keyword">if</span>(a[l]&gt;=m)ctm--;<br>        &#125;<br>        <span class="hljs-comment">//if(!f)break;</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-they-are-everywhere"><a class="markdownIt-Anchor" href="#f-they-are-everywhere"></a> F They Are Everywhere</h2><h4 id="题目大意-6"><a class="markdownIt-Anchor" href="#题目大意-6"></a> 题目大意</h4><p>和B基本一样，只不过从知识点编号换成了字母</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">char</span> a[<span class="hljs-number">1000006</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,cntp=<span class="hljs-number">0</span>;<br>    map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt;mp;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;a[i]);<br>        <span class="hljs-comment">//printf(&quot;%c&quot;,a[i]);</span><br>        <span class="hljs-keyword">if</span>(!mp[a[i]])<br>        &#123;<br>            mp[a[i]]++;<br>            cntp++;<br>        &#125;<br>    &#125;<br>    mp.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>,ans=n;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(r&lt;n&amp;&amp;cnt&lt;cntp)<br>        &#123;<br>            r++;<br>            <span class="hljs-keyword">if</span>(!mp[a[r]])cnt++;<br>            mp[a[r]]++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt&lt;cntp)<span class="hljs-keyword">break</span>;<br>        ans=<span class="hljs-built_in">min</span>(ans,r-l);<br>        l++;<br>        mp[a[l]]--;<br>        <span class="hljs-keyword">if</span>(!mp[a[l]])cnt--;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-graveyard-design"><a class="markdownIt-Anchor" href="#g-graveyard-design"></a> G Graveyard Design</h2><h4 id="题目大意-7"><a class="markdownIt-Anchor" href="#题目大意-7"></a> 题目大意</h4><p>对于给定n，输出所有满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><msup><mi>i</mi><mn>2</mn></msup><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">\sum_{i=l}^ri^2=n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.113818em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的序列</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>主要需要注意的地方只有存储方式，这里选择了<code>vector&lt;vector&lt;int&gt; &gt;</code>存储序列序列；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt; &gt;vec;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n;<br>    cin&gt;&gt;n;<br>    ll mx=(<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>((<span class="hljs-type">long</span> <span class="hljs-type">double</span>)n);<br>    ll l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(r&lt;=mx&amp;&amp;sum&lt;n)&#123;r++,sum+=r*r;f=<span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;sum&gt;n)&#123;l++,sum-=l*l;f=<span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">if</span>(sum==n)<br>        &#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt;now;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l+<span class="hljs-number">1</span>;i&lt;=r;i++)now.<span class="hljs-built_in">push_back</span>(i);<br>            vec.<span class="hljs-built_in">push_back</span>(now);<br>            r++,sum+=r*r;<br>            f=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!f)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,vec.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;vec.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,vec[i].<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;vec[i].<span class="hljs-built_in">size</span>();j++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,vec[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-xor-sum-2"><a class="markdownIt-Anchor" href="#h-xor-sum-2"></a> H Xor Sum 2</h2><h4 id="题目大意-8"><a class="markdownIt-Anchor" href="#题目大意-8"></a> 题目大意</h4><p>对于给定序列，找出满足序列异或和序列和相等的序列个数</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>由于异或可以看成不进位加法，所以对于确定序列，序列异或的结果不大于序列和；</p><p>对于一个已经满足序列异或等于序列和的序列，说明在这个序列加法中，没有出现进位（二进制意义），也就是说，这个序列的任意子序列均合法（均没有出现二进制意义上的进位）；</p><p>有了以上结论，我们便可以制定以下尺取策略：<br />右指针右移，直到下一个元素使序列非法；<br />在每一次右指针右移中，假定序列的每一个元素（包括新元素）均与新元素作为左右端点生成合法序列，并以此更新答案；<br />右指针无法右移时（再次右移会导致序列非法），左指针左移，再重复上述过程；</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">200005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>,xo=<span class="hljs-number">0</span>;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(r&lt;n)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(r&lt;n&amp;&amp;sum+a[r+<span class="hljs-number">1</span>]==(xo^a[r+<span class="hljs-number">1</span>]))<br>        &#123;<br>            ans+=r-l+<span class="hljs-number">1</span>;<br>            r++;<br>            sum+=a[r],xo^=a[r];<br>        &#125;<br>        <span class="hljs-comment">//printf(&quot;%d %d\n&quot;,l,r);</span><br>        l++;<br>        xo^=a[l];<br>        sum-=a[l];<br>        <br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-petya-and-array"><a class="markdownIt-Anchor" href="#i-petya-and-array"></a> I Petya and Array</h2><p>特别感谢ph大佬~<br />可以先了解一下归并排序，这个排序方法在排序中基本用不到~（因为有sort），但是总会在奇奇怪怪的地方用到这方面的思想；</p><h4 id="题目大意-9"><a class="markdownIt-Anchor" href="#题目大意-9"></a> 题目大意</h4><p>对于给定序列，求区间和小于t的区间个数</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>这个题和C题不同，因为C题接受区间和的绝对值，所以不必关注前缀和排序之后，作差得出的是区间和还是负的区间和，但是这道题不接受区间和绝对值，所以要保证作差生成区间和时，应为大下标前缀和减小下标前缀和；</p><p>为了维护这个大小关系，我们想到了归并排序中，左右两区间分别单调，又保证左区间下标均小于右区间下标；</p><p>在一层递归中：<br />我们确定右区间中的指针，寻找左区间中第一个满足<strong>右区间指针元素与它的差小于等于t</strong>的元素，左区间中此元素及右侧的所有元素均满足条件；<br />维护完答案之后，我们需要将左右区间单调化合并，将这个单调化合并后的大区间作为上一层递归的左 / 右区间；</p><p>我们在一层递归中只处理了左右端点在相异区间的序列，左右端点在相同区间的序列其实已经在左右区间分别处理时计算过了；</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> sum[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> t;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> tmp[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">M_s</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">M_s</span>(l, mid), <span class="hljs-built_in">M_s</span>(mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">while</span> (sum[j] - sum[i] &gt;= t &amp;&amp; i &lt;= mid)<span class="hljs-comment">//对于确定的j，找i，这是双指针</span><br>            i++;<br>        <span class="hljs-keyword">if</span> (sum[j] - sum[i] &lt; t)<br>            ans += mid - i + <span class="hljs-number">1</span>;<br>        j++;<br>    &#125;<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">0</span>;<br>    i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<span class="hljs-comment">//左右区间单调化合并，这还是双指针</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (sum[i] &lt; sum[j])<br>            tmp[c++] = sum[i++];<br>        <span class="hljs-keyword">else</span><br>            tmp[c++] = sum[j++];<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid)<br>        tmp[c++] = sum[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r)<br>        tmp[c++] = sum[j++];<br>    <span class="hljs-keyword">for</span>(i=l;i&lt;=r;i++)<br>    &#123;<br>        sum[i]=tmp[i-l];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n &gt;&gt; t;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;sum[i]);<br>        sum[i] += sum[i - <span class="hljs-number">1</span>];<span class="hljs-comment">//生成前缀和</span><br>    &#125;<br>    <span class="hljs-built_in">M_s</span>(<span class="hljs-number">0</span>, n);<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="j-逛画展"><a class="markdownIt-Anchor" href="#j-逛画展"></a> J 逛画展</h2><h4 id="题目大意-10"><a class="markdownIt-Anchor" href="#题目大意-10"></a> 题目大意</h4><p>和B基本相同，只不过此题中M是给出的</p><h4 id="代码-10"><a class="markdownIt-Anchor" href="#代码-10"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1000006</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,cntp=<span class="hljs-number">0</span>,m;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<br>    cin&gt;&gt;n&gt;&gt;cntp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        <span class="hljs-comment">/*if(!mp[a[i]])</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            mp[a[i]]++;</span><br><span class="hljs-comment">            //cntp++;</span><br><span class="hljs-comment">        &#125;*/</span><br>    &#125;<br>    <span class="hljs-comment">//mp.clear();</span><br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>,cnt=<span class="hljs-number">0</span>,ans=n+<span class="hljs-number">1</span>,ml,mr;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(r&lt;n&amp;&amp;cnt&lt;cntp)<br>        &#123;<br>            r++;<br>            <span class="hljs-keyword">if</span>(!mp[a[r]])cnt++;<br>            mp[a[r]]++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt&lt;cntp)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(r-l&lt;ans)<br>        &#123;<br>            ans=r-l;<br>            ml=l;<br>            mr=r;<br>        &#125;<br>        l++;<br>        mp[a[l]]--;<br>        <span class="hljs-keyword">if</span>(!mp[a[l]])cnt--;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,ml+<span class="hljs-number">1</span>,mr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="k-a-b数对"><a class="markdownIt-Anchor" href="#k-a-b数对"></a> K A-B数对</h2><h4 id="题目大意-11"><a class="markdownIt-Anchor" href="#题目大意-11"></a> 题目大意</h4><p>给出n个整数和一个数字c，要求计算出所有满足 A−B=C的数对 (A,B) 的个数。</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>对于每个数字，计数，去重后排序，再尺取到差为c的数对；<br />若n，m的个数为cn，cm，且满足n-m=c，则这两个数对答案的贡献即为 cn*cm；</p><h4 id="代码-11"><a class="markdownIt-Anchor" href="#代码-11"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1000006</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,c,g,m=<span class="hljs-number">0</span>;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<br>    cin&gt;&gt;n&gt;&gt;c;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g);<br>        <span class="hljs-keyword">if</span>(!mp[g])a[m++]=g;<br>        mp[g]++;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a,a+m);<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-number">0</span>;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(r&lt;m<span class="hljs-number">-1</span>&amp;&amp;a[r]-a[l]&lt;c)r++,f=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;a[r]-a[l]&gt;c)l++,f=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(a[r]-a[l]==c)ans+=(ll)mp[a[r]]*mp[a[l]],l++;<span class="hljs-comment">//,printf(&quot;%d %d\n&quot;,a[l],a[r]);</span><br>        <span class="hljs-keyword">if</span>(!f)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>比较赶，如有疏漏，敬请指出；</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一省赛训练2 （A B C D E F G I J）</title>
    <link href="/2021.01-06/NEFU%E5%A4%A7%E4%B8%80%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%832%20%EF%BC%88A%20B%20C%20D%20E%20F%20G%20I%20J%EF%BC%89/"/>
    <url>/2021.01-06/NEFU%E5%A4%A7%E4%B8%80%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%832%20%EF%BC%88A%20B%20C%20D%20E%20F%20G%20I%20J%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-alphabet-cookies">A Alphabet Cookies</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-sequential-game">B Sequential game</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-the-hardest-problem-ever">C The Hardest Problem Ever</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li></ul></li><li><a href="#d-dart-game">D Dart game</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#e-similar-word">E Similar Word</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#f-post-office">F Post office</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#g-lucky-boy">G Lucky Boy</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#h-car-race-game">H Car race game</a></li><li><a href="#i-jiulianhuan">I Jiulianhuan</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#j-the-minimum-square-sum">J The minimum square sum</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-10">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li><li><a href="#%E6%89%93%E8%A1%A8%E4%BB%A3%E7%A0%81">打表代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>\</p><h2 id="a-alphabet-cookies"><a class="markdownIt-Anchor" href="#a-alphabet-cookies"></a> A Alphabet Cookies</h2><p>字符串处理</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>统计字母数后比对，保证没有字母不足；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,ap[<span class="hljs-number">26</span>];<br>    string g;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(ap,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> ap);<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;g[i];i++)<br>        &#123;<br>            ap[g[i]-<span class="hljs-string">&#x27;A&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-type">int</span> f=<span class="hljs-number">1</span>;<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;g[i];i++)<br>        &#123;<br>            ap[g[i]-<span class="hljs-string">&#x27;A&#x27;</span>]--;<br>            <span class="hljs-keyword">if</span>(ap[g[i]-<span class="hljs-string">&#x27;A&#x27;</span>]&lt;<span class="hljs-number">0</span>)f=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-sequential-game"><a class="markdownIt-Anchor" href="#b-sequential-game"></a> B Sequential game</h2><p>模拟</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>按要求模拟即可</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string g;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;g)<br>    &#123;<br>        <span class="hljs-type">int</span> zero=<span class="hljs-number">0</span>,one=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(g[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)one++;<br>        <span class="hljs-keyword">else</span> zero++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;g[i];i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(g[i]!=g[i<span class="hljs-number">-1</span>])<br>            &#123;<br>                <span class="hljs-built_in">swap</span>(one,zero);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;1&#x27;</span>)one++;<br>            <span class="hljs-keyword">else</span> zero++;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,zero,one);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-the-hardest-problem-ever"><a class="markdownIt-Anchor" href="#c-the-hardest-problem-ever"></a> C The Hardest Problem Ever</h2><p>字符串处理</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>按要求操作即可</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string g;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;g)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(g!=<span class="hljs-string">&quot;START&quot;</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">getchar</span>();<br>        <span class="hljs-built_in">getline</span>(cin,g);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;g[i];i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(g[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;g[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)<br>            &#123;<br>                g[i]=(g[i]-<span class="hljs-string">&#x27;A&#x27;</span><span class="hljs-number">-5</span>+<span class="hljs-number">26</span>)%<span class="hljs-number">26</span>+<span class="hljs-string">&#x27;A&#x27;</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,g[i]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        cin&gt;&gt;g;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-dart-game"><a class="markdownIt-Anchor" href="#d-dart-game"></a> D Dart game</h2><p>dp</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>建立两个dp空间，一个存储使用一倍，两倍和三倍的方案数，另一个存储只使用一倍和三倍的方案数；</p><p>这两个再作差即为目标分数的合法方案数，因为只要整个方案中存在使用过两倍的情况，便可以将这个两倍移至最后，方案即合法；</p><p>注意DP的细节，不可以在一次循环中同时dp一倍，二倍与三倍，推测是与后效性限制有关；</p><p>注：所有的可行值是1-20的1-3倍，和25的1-2倍，想玩的可以去洛圣都体验一下hhh；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">2011</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">1100</span>]=&#123;<span class="hljs-number">0</span>&#125;,b[<span class="hljs-number">1100</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    a[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">21</span>;k++)<span class="hljs-comment">//遍历1-20及25</span><br>    &#123;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">21</span>)k=<span class="hljs-number">25</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> kk=<span class="hljs-number">1</span>;kk&lt;=<span class="hljs-number">3</span>;kk++)<span class="hljs-comment">//遍历3倍</span><br>&#123;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">25</span>&amp;&amp;kk==<span class="hljs-number">3</span>)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//25没有三倍</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">1001</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i&gt;=k*kk)a[i]+=a[i-k*kk];<br><span class="hljs-keyword">if</span>(i&gt;=k*kk&amp;&amp;kk!=<span class="hljs-number">2</span>)b[i]+=b[i-k*kk];<br>            a[i]%=M,b[i]%=M;<br>        &#125;<br>&#125;<br>    &#125;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n&amp;&amp;n)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(a[n]-b[n]+M)%M);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-similar-word"><a class="markdownIt-Anchor" href="#e-similar-word"></a> E Similar Word</h2><p>字符串处理</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>把一个串在后面加上自身后，循环对比即可；</p><p>如果两串长度不同则不可能为相似串；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">2011</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string g,g1;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">26</span>];<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;g)<br>    &#123;<br>        cin&gt;&gt;g1;<br>        <span class="hljs-type">int</span> f=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(g==g1)f=<span class="hljs-number">0</span>;<br>        g=g+g;<br>        <span class="hljs-keyword">if</span>(g.<span class="hljs-built_in">length</span>()/<span class="hljs-number">2</span>!=g1.<span class="hljs-built_in">length</span>())f=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;g1[i];i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!g.<span class="hljs-built_in">compare</span>(i,g1.<span class="hljs-built_in">length</span>(),g1))<span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!g1[i])f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-post-office"><a class="markdownIt-Anchor" href="#f-post-office"></a> F Post office</h2><p>中位数</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>特别像货仓选址问题；</p><p>在O(1)的时间复杂度内确定邮局的位置后，遍历区间求距离和，不会TLE；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">2011</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    ll pos[<span class="hljs-number">1003</span>];<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!n)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-built_in">memset</span>(pos,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> pos);<br>        <span class="hljs-built_in">memset</span>(frt,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> frt);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;pos[i]);<br>        &#125;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-type">int</span> l,r;<br>        <span class="hljs-keyword">while</span>(n--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);<br>            ll ans=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)<br>            &#123;<br>                ans+=<span class="hljs-built_in">abs</span>(pos[i]-pos[l+r&gt;&gt;<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-lucky-boy"><a class="markdownIt-Anchor" href="#g-lucky-boy"></a> G Lucky Boy</h2><p>几何，博弈</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>首先确定好统计共线的方法；</p><p>对于任意两点，一定共线；<br />对于每一条直线，我们可以用斜截式定义并用<code>map&lt;pair&lt;double,double&gt;,int&gt;</code>储存，经测试，不存在斜率不存在的直线，无浮点误差影响（数据可加强）；</p><p>由规则来说，每次操作需要拿走共线的任意个点（≥1）也就是说，如果场上存在三点共线的情况，则a必赢；<br />如果不存在三点共线的情况，则此时的博弈即为以下状况：</p><p>场上存在n个点，a先手，每人次可以拿走1个或2个点，取走最后一个点者赢；</p><p>那么此时，如果场上有3<em>n个点，则后手者可以控制使每次场上他拿完后仍剩余3</em>n个点，即先手必输；<br />如果场上有3*n+1或3*n+2个点，则先手者可以取走1个或2个点，使场上剩余3*n个点，情况即变为先后手对换的上种情况，此时后手必输；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">2011</span>;<br>map&lt;pair&lt;<span class="hljs-type">double</span>,<span class="hljs-type">double</span>&gt;,<span class="hljs-type">int</span>&gt;mp;<br>pair&lt;ll,ll&gt; p[<span class="hljs-number">1003</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        mp.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-type">int</span> i,j;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;p[i].first,&amp;p[i].second);<br>        &#125;<br>        <span class="hljs-type">int</span> ff=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n&amp;&amp;!ff;i++)<br>        <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;=n&amp;&amp;!ff;j++)<br>        &#123;<br>        &#123;<br>            <span class="hljs-type">double</span> k=(p[j].second-p[i].second)*<span class="hljs-number">1.0</span>/(p[j].first-p[i].first)<br>                ,b=p[i].second-k*p[i].first;<br>            <span class="hljs-keyword">if</span>(mp[&#123;k,b&#125;]==<span class="hljs-number">1</span>)ff++;<br>            mp[&#123;k,b&#125;]++;<br>        &#125;<br>    &#125;<br>        <span class="hljs-keyword">if</span>(ff||n%<span class="hljs-number">3</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a is the lucky boy.\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b is the lucky boy.\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-car-race-game"><a class="markdownIt-Anchor" href="#h-car-race-game"></a> H Car race game</h2><p>搜了一下题解，好像还要用到线段树之类的，感觉比较麻烦（懒），以后再来探索吧。</p><h2 id="i-jiulianhuan"><a class="markdownIt-Anchor" href="#i-jiulianhuan"></a> I Jiulianhuan</h2><p>数学</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>之前也没有玩过，赛后找了好多视频也没搞清楚怎么解的；</p><p>最后还是感谢sl大佬找的资料，如下：<br /><a href="https://www.zhihu.com/question/25836544/answer/193817598">来自知乎</a><br /><img src="https://s2.loli.net/2022/08/02/jihfTEA4d6eMklC.png" alt="在这里插入图片描述" /></p><p><img src="https://s2.loli.net/2022/08/02/ky3u2et4UndA7DR.png" alt="" /></p><p>高中数学书666；</p><p>注：题给数据有一些问题，1005的返回值应该是4260；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">10007</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qm</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> ans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>a=a*a%M;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br><span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>&#123;<br>cout&lt;&lt;(<span class="hljs-built_in">qm</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>)<span class="hljs-number">-2</span>+(n&amp;<span class="hljs-number">1</span>)+M)*<span class="hljs-built_in">qm</span>(<span class="hljs-number">3</span>,M<span class="hljs-number">-2</span>)%M&lt;&lt;endl;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-the-minimum-square-sum"><a class="markdownIt-Anchor" href="#j-the-minimum-square-sum"></a> J The minimum square sum</h2><p><s>打表</s>，数学</p><h4 id="思路-10"><a class="markdownIt-Anchor" href="#思路-10"></a> 思路</h4><p>个人是ph大佬带我打表找规律，不过他要证一下，大家可以拭目以待hh；</p><p>结论可以从AC代码中直接读出来，在此不多赘述了；</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">2011</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((n+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>)&amp;<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,n);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,n*n*<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="打表代码"><a class="markdownIt-Anchor" href="#打表代码"></a> 打表代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">2011</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j,k;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">3</span>;i&lt;=<span class="hljs-number">49</span>;i+=<span class="hljs-number">2</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">200</span>;j++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(k=j;k&lt;=<span class="hljs-number">200</span>;k++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>((j*j+k*k)%i==<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,i,(j*j+k*k));<span class="hljs-keyword">goto</span> aa;&#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((j*j+k*k)&gt;i)<span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        aa:<br>        i=i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>实际上应该有一个 <em>NEFU大一省赛训练3</em> 的，但是那一场自己做得实在太水了，在此仅做标记。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU大一省赛训练1（全题解）</title>
    <link href="/2021.01-06/NEFU%E5%A4%A7%E4%B8%80%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%831%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/"/>
    <url>/2021.01-06/NEFU%E5%A4%A7%E4%B8%80%E7%9C%81%E8%B5%9B%E8%AE%AD%E7%BB%831%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-%E5%93%AA%E4%BA%9B%E6%95%B0%E4%B8%8D%E5%9C%A8">A 哪些数不在</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-%E9%97%B9%E9%92%9F">B 闹钟</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-%E5%87%8F%E6%B3%95">C 减法</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E9%9A%A7%E9%81%93">D 隧道</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-%E5%B0%96%E6%8B%AC%E5%8F%B7">E 尖括号</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-%E6%81%90%E9%BE%99%E7%9A%84%E6%95%85%E4%BA%8B">F 恐龙的故事</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#g-%E5%BA%8F%E5%88%97%E5%92%8C">G 序列和</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#h-%E5%B7%A7%E5%85%8B%E5%8A%9B">H 巧克力</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>一个半小时七道题，两个小时一道题555；<br />G题鲨我；</p><h2 id="a-哪些数不在"><a class="markdownIt-Anchor" href="#a-哪些数不在"></a> A 哪些数不在</h2><p>差分</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>即在区间左端点标记+1，右端点标记-1；</p><p>遍历所有可行范围，遇到+1即计数值+1，-1亦然；</p><p>处理好开闭问题后，计数值为0的位置即没有被线段覆盖；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">102</span>],n,m,l,r,i;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m))<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> a);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);<br>            a[l<span class="hljs-number">-1</span>]++,a[r]--;<br>        &#125;<br>        queue&lt;<span class="hljs-type">int</span>&gt;que;<br>        <span class="hljs-type">int</span> c=a[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!c)que.<span class="hljs-built_in">push</span>(i);<br>            c+=a[i];<br>            <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,que.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">while</span>(que.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>,que.<span class="hljs-built_in">front</span>(),que.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>?<span class="hljs-string">&#x27; &#x27;</span>:<span class="hljs-string">&#x27;\n&#x27;</span>);<br>            que.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-闹钟"><a class="markdownIt-Anchor" href="#b-闹钟"></a> B 闹钟</h2><p>gcd</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>要求从第一个工作开始时间开始，所有工作开始时间均响铃，即求所有工作开始时间与第一次工作开始时间的差的最大公倍数；</p><p>再遍历所有可行响铃间隔，找出第一个满足条件的即可；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,i;<br>    ll del=<span class="hljs-number">0</span>,g,mk;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    cin&gt;&gt;mk;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;g);<br>        g-=mk;<br>        <span class="hljs-keyword">if</span>(!del)del=g;<br>        <span class="hljs-keyword">else</span> del=__gcd(del,g);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;g);<br>        <span class="hljs-keyword">if</span>(del%g==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i&lt;=m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n%d\n&quot;</span>,i);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-减法"><a class="markdownIt-Anchor" href="#c-减法"></a> C 减法</h2><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>对于这个数据量，模拟的话大概会爆TLE，于是我打算记录累计减去的值；</p><p>在代码中，这个值即为del；<br />原题中所求的最小非零值即为最小的大于del的值；</p><p>再累加减去的值即可（注意每次减去的值不是找到的数本身，而是找到的数减去该次del值）；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll del=<span class="hljs-number">0</span>,a[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> n,k,i;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-comment">//printf(&quot;%d\n&quot;,&amp;a[3]);</span><br>    <span class="hljs-keyword">while</span>(k--)<br>    &#123;<br>        ll *p=<span class="hljs-built_in">upper_bound</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>,del);<br>       <span class="hljs-comment">// printf(&quot;%d %d %lld\n&quot;,p,a+n+1,del);</span><br>        <span class="hljs-keyword">if</span>(p==a+n+<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,*p-del),del+=*p-del;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-隧道"><a class="markdownIt-Anchor" href="#d-隧道"></a> D 隧道</h2><p>bfs</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>大致估计了一下，对于目标块每一个点进行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>遍历时间复杂度也遭得住，也没想到比较好的办法进一步降低时间复杂度，于是做得比较暴力；</p><p>对于起始点进行正常的bfs形成起始块，如果目标点已达，则输出0；<br />否则对目标点bfs，再对连通块中的每一个点算出距离起始块对应最近点的距离；</p><p>os:竟然在字符串处理上栽了一发；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> c=<span class="hljs-number">1</span>,n;<span class="hljs-comment">//这道题代码贼乱，有两个bfs函数和一个求距离函数</span><br><span class="hljs-type">int</span> mp[<span class="hljs-number">51</span>][<span class="hljs-number">51</span>]=&#123;<span class="hljs-number">0</span>&#125;,gt[<span class="hljs-number">51</span>][<span class="hljs-number">51</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> xi,<span class="hljs-type">int</span> xj)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> di[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;,dj[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>    gt[xi][xj]=c;<br>    <span class="hljs-type">int</span> ct=<span class="hljs-number">1</span>;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>&gt; &gt;que;<br>    que.<span class="hljs-built_in">push</span>(&#123;xi,xj&#125;);<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;now=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(now.first+di[k]&gt;=<span class="hljs-number">1</span>&amp;&amp;now.first+di[k]&lt;=n<br>                &amp;&amp;now.second+dj[k]&gt;=<span class="hljs-number">1</span>&amp;&amp;now.second+dj[k]&lt;=n<br>                &amp;&amp;mp[now.first+di[k]][now.second+dj[k]]<br>                &amp;&amp;!gt[now.first+di[k]][now.second+dj[k]])<br>            que.<span class="hljs-built_in">push</span>(&#123;now.first+di[k],now.second+dj[k]&#125;)<br>            ,gt[now.first+di[k]][now.second+dj[k]]=c,ct++;<br>        &#125;<br>    &#125;<br>    c++;<br>    <span class="hljs-comment">//printf(&quot;%d\n&quot;,ct);</span><br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">gdis</span><span class="hljs-params">(<span class="hljs-type">int</span> xi,<span class="hljs-type">int</span> xj)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll md=<span class="hljs-number">100005</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(gt[i][j]==<span class="hljs-number">1</span>)<br>        &#123;<br>            md=<span class="hljs-built_in">min</span>(md,(ll)(xi-i)*(xi-i)+(xj-j)*(xj-j));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> md;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">bfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> xi,<span class="hljs-type">int</span> xj)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> di[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;,dj[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>    gt[xi][xj]=c;<br>    <span class="hljs-type">int</span> ct=<span class="hljs-number">1</span>;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>&gt; &gt;que;<br>    que.<span class="hljs-built_in">push</span>(&#123;xi,xj&#125;);<br>    ll mdis=<span class="hljs-built_in">gdis</span>(xi,xj);<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;now=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(now.first+di[k]&gt;=<span class="hljs-number">1</span>&amp;&amp;now.first+di[k]&lt;=n<br>                &amp;&amp;now.second+dj[k]&gt;=<span class="hljs-number">1</span>&amp;&amp;now.second+dj[k]&lt;=n<br>                &amp;&amp;mp[now.first+di[k]][now.second+dj[k]]<br>                &amp;&amp;!gt[now.first+di[k]][now.second+dj[k]])<br>            que.<span class="hljs-built_in">push</span>(&#123;now.first+di[k],now.second+dj[k]&#125;)<br>            ,gt[now.first+di[k]][now.second+dj[k]]=c<br>            ,mdis=<span class="hljs-built_in">min</span>(mdis,<span class="hljs-built_in">gdis</span>(now.first+di[k],now.second+dj[k])),ct++;<br>        &#125;<br>    &#125;<br>    c++;<br>    <span class="hljs-comment">//printf(&quot;%d\n&quot;,ct);</span><br>    <span class="hljs-keyword">return</span> mdis;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> fi,fj,ti,tj,i,j;<br>    <span class="hljs-comment">//char g;</span><br>    cin&gt;&gt;n;<br>    cin&gt;&gt;fi&gt;&gt;fj&gt;&gt;ti&gt;&gt;tj;<br>    string g;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!(g[j]-<span class="hljs-string">&#x27;0&#x27;</span>))mp[i][j+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">bfs</span>(fi,fj);<br>    <span class="hljs-keyword">if</span>(gt[ti][tj])<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ll ans=<span class="hljs-built_in">bfs1</span>(ti,tj);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-尖括号"><a class="markdownIt-Anchor" href="#e-尖括号"></a> E 尖括号</h2><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>对于一个尖括号串，最左侧的<code>&gt;</code>右面的所有符号均可以被其消去，操作后此符号在最右端，最右侧的<code>&lt;</code>同理；</p><p>接下来为了仅剩一个符号，我们需要统计要使 以上符号出现在在对应的端点 所需要删除的符号数并取最小值；<br />（即对于<code>&lt;&lt;&lt;&lt;&gt;&gt;&gt;&lt;&gt;&lt;&lt;&gt;</code>，若使最左侧的<code>&gt;</code>出现在左端，则需要删去左侧的四个<code>&lt;</code>，若使最右侧的<code>&lt;</code>出现在最右端，需要删去右侧的一个<code>&gt;</code>，故最小删去数为1）</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,n,i;<br>    string g;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n;<br>        cin&gt;&gt;n&gt;&gt;g;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> dl=<span class="hljs-number">0</span>,dr=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;g[i];i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;&lt;&#x27;</span>)dl++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;&gt;&#x27;</span>)dr++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">min</span>(dl,dr));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-恐龙的故事"><a class="markdownIt-Anchor" href="#f-恐龙的故事"></a> F 恐龙的故事</h2><p>素数筛，模拟</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>模拟即可</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> p[<span class="hljs-number">10000007</span>] , num[<span class="hljs-number">10000007</span>] , pp[<span class="hljs-number">10000007</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> c=<span class="hljs-number">0</span>,cc=<span class="hljs-number">0</span>;<br>    num[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,num[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">10000000</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!num[i])p[c++]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;c&amp;&amp;i*p[j]&lt;<span class="hljs-number">10000000</span>;j++)<br>        &#123;<br>            num[i*p[j]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;c;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!num[i+<span class="hljs-number">1</span>])pp[cc++]=p[i];<br>    &#125;<br>    <span class="hljs-comment">//for(int i=0;i&lt;cc;i++)printf(&quot;%d\n&quot;,pp[i]);</span><br>    <span class="hljs-type">int</span> t,m;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;m;<br>        <span class="hljs-type">int</span> *p=<span class="hljs-built_in">lower_bound</span>(pp,pp+cc,m);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,*p);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-序列和"><a class="markdownIt-Anchor" href="#g-序列和"></a> G 序列和</h2><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>这个题的描述有一些些些些问题，实际上需要输出的的是以x+y为第一排序依据升序排序，以x为第二排序依据降序排序之后的第一个；</p><p>为方便描述我们将删除序列中一个元素后的序列和称为缺刻和；<br />对于所有的缺刻和，我们只需要记录能满足该缺刻和的所有序列中，序列号最小的两个序列号；</p><p>在对所有缺刻和寻找符合要求的x+y即可；</p><p>注：这道题个人既被卡过空间，又被卡过时间，经测试，unordered_map所用空间比map少1/10左右；<br />用时：1077ms/2000ms，空间占用：60236k/65535k</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>unordered_map&lt;<span class="hljs-type">int</span>,pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt;mp;<br>unordered_map&lt;<span class="hljs-type">int</span>,pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt;::iterator it1;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> g[<span class="hljs-number">200005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> k,n;<br>    cin&gt;&gt;k;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g[j]);<br>            sum+=g[j];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!mp[sum-g[j]].first)mp[sum-g[j]].first=i;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!mp[sum-g[j]].second&amp;&amp;mp[sum-g[j]].first!=i)mp[sum-g[j]].second=i;<span class="hljs-comment">//避免我重我自己</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>,mx=k+<span class="hljs-number">1</span>,my=k+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(it1=mp.<span class="hljs-built_in">begin</span>();it1!=mp.<span class="hljs-built_in">end</span>();it1++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(it1-&gt;second.first&amp;&amp;it1-&gt;second.second)<span class="hljs-comment">//两个均有值才参与排序</span><br>        &#123;<br>            <span class="hljs-type">int</span> a=it1-&gt;second.first;<br>            <span class="hljs-type">int</span> b=it1-&gt;second.second;<br>            <span class="hljs-keyword">if</span>(a+b&lt;mx+my||(a+b==mx+my&amp;&amp;b&lt;my))<span class="hljs-comment">//注意第二排序依据</span><br>            &#123;<br>                mx=<span class="hljs-built_in">min</span>(a,b),my=<span class="hljs-built_in">max</span>(a,b);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(mx!=k+<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n%d %d&quot;</span>,mx,my);<span class="hljs-comment">//mk被更新过</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-comment">//printf(&quot;\n%d&quot;,mp.size());</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-巧克力"><a class="markdownIt-Anchor" href="#h-巧克力"></a> H 巧克力</h2><p>模拟</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>按要求模拟即可</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-type">int</span> s,a,b,c;<br>        cin&gt;&gt;s&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>        ll ans=<span class="hljs-number">0</span>;<br>        ans=s/c;<br>        ans+=b*(ans/a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA天梯练习赛 刷题笔记2（L2 013-021）</title>
    <link href="/2021.01-06/PTA%E5%A4%A9%E6%A2%AF%E7%BB%83%E4%B9%A0%E8%B5%9B%20%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B02%EF%BC%88L2%20013-021%EF%BC%89/"/>
    <url>/2021.01-06/PTA%E5%A4%A9%E6%A2%AF%E7%BB%83%E4%B9%A0%E8%B5%9B%20%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B02%EF%BC%88L2%20013-021%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目库链接：<a href="https://pintia.cn/problem-sets/994805046380707840/problems/type/7">团体程序设计天梯赛-练习集</a></p><p>LAST：<a href="https://blog.csdn.net/Tan_Yuu/article/details/115793239">PTA天梯练习赛 刷题笔记1</a>；<br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#l2-013-%E7%BA%A2%E8%89%B2%E8%AD%A6%E6%8A%A5-25-%E5%88%86">L2-013 红色警报 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#l2-014-%E5%88%97%E8%BD%A6%E8%B0%83%E5%BA%A6-25-%E5%88%86">L2-014 列车调度 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#l2-015-%E4%BA%92%E8%AF%84%E6%88%90%E7%BB%A9-25-%E5%88%86">L2-015 互评成绩 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#l2-016-%E6%84%BF%E5%A4%A9%E4%B8%8B%E6%9C%89%E6%83%85%E4%BA%BA%E9%83%BD%E6%98%AF%E5%A4%B1%E6%95%A3%E5%A4%9A%E5%B9%B4%E7%9A%84%E5%85%84%E5%A6%B9-25-%E5%88%86">L2-016 愿天下有情人都是失散多年的兄妹 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#l2-017-%E4%BA%BA%E4%BB%A5%E7%BE%A4%E5%88%86-25-%E5%88%86">L2-017 人以群分 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#l2-018-%E5%A4%9A%E9%A1%B9%E5%BC%8Fa%E9%99%A4%E4%BB%A5b-25-%E5%88%86">L2-018 多项式A除以B (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#l2-019-%E6%82%84%E6%82%84%E5%85%B3%E6%B3%A8-25-%E5%88%86">L2-019 悄悄关注 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#l2-020-%E5%8A%9F%E5%A4%AB%E4%BC%A0%E4%BA%BA-25-%E5%88%86">L2-020 功夫传人 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#l2-021-%E7%82%B9%E8%B5%9E%E7%8B%82%E9%AD%94-25-%E5%88%86">L2-021 点赞狂魔 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>\</p><h2 id="l2-013-红色警报-25-分"><a class="markdownIt-Anchor" href="#l2-013-红色警报-25-分"></a> L2-013 红色警报 (25 分)</h2><p>bfs</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>这道题主要部分就是bfs计数，检验新集合与旧集合是不是元素数少1，只不过需要注意的细节有些多；</p><p>我将每一个连通块内编号最小的城市作为该连通块的代表，在该位上存储该块的元素数；</p><p>一个城市沦陷后，判断该城所在的连通块元素数量变化情况；<br />需要注意的是，如果该城即为该连通块的代表，则需要另外选择一个代表对该连通块进行广搜计数；</p><p>如果由于城市沦陷导致一些城市失联，则需要对失联的城市重新bfs；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>vector&lt;<span class="hljs-type">int</span>&gt;rd[<span class="hljs-number">502</span>];<br><span class="hljs-type">int</span> gt[<span class="hljs-number">502</span>];<span class="hljs-comment">//&gt;=0为所属连通块最小号城市编号，-1为未达，-2为被攻占</span><br><span class="hljs-type">int</span> c[<span class="hljs-number">502</span>];<span class="hljs-comment">//记录以i为代表的连通块的城市数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    c[x]=<span class="hljs-number">0</span>;<span class="hljs-comment">//刷0</span><br>    queue&lt;<span class="hljs-type">int</span>&gt;que;<br>    <span class="hljs-comment">//if(gt[x]==-1)//防呆设计，无必要</span><br>    &#123;<br>        que.<span class="hljs-built_in">push</span>(x);<br>        gt[x]=x;<br>        c[x]++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> now=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:rd[now])<br>            <span class="hljs-keyword">if</span>(gt[i]==<span class="hljs-number">-1</span>)<br>            &#123;<br>                que.<span class="hljs-built_in">push</span>(i);<br>                c[x]++;<br>                gt[i]=x;<br>            &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,a,b,part=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">while</span>(m--)<span class="hljs-comment">//存路</span><br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        rd[a].<span class="hljs-built_in">push_back</span>(b);<br>        rd[b].<span class="hljs-built_in">push_back</span>(a);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)gt[i]=<span class="hljs-number">-1</span>;<span class="hljs-comment">//标记未达</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">if</span>(gt[i]==<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>            <span class="hljs-built_in">bfs</span>(i);<br>        &#125;<br>    <span class="hljs-comment">//初始化完成</span><br>    cin&gt;&gt;m;<br>    <span class="hljs-type">int</span> co=m;<br>    <span class="hljs-keyword">while</span>(m--)&#123;<br>        cin&gt;&gt;a;<span class="hljs-comment">//a为沦陷城</span><br>        b=n;<span class="hljs-comment">//b为备选代表</span><br>        <span class="hljs-type">int</span> area=gt[a],car=c[area];<span class="hljs-comment">//area为沦陷城所在区域，car为该区域城市数</span><br>        gt[a]=<span class="hljs-number">-2</span>;<span class="hljs-comment">//标记沦陷</span><br>        <span class="hljs-comment">/*if(car==1)//防呆特判，无必要</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            printf(&quot;City %d is lost.\n&quot;,a);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        else*/</span><br>        &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//把该区域内其他城市标记未连接</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(gt[i]==area&amp;&amp;i!=a)gt[i]=<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span>(gt[i]==<span class="hljs-number">-1</span>&amp;&amp;i!=a)b=<span class="hljs-built_in">min</span>(b,i);<span class="hljs-comment">//更新备选城</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(a==area)area=b;<span class="hljs-comment">//如有必要，更改代表</span><br>        c[area]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(area&gt;=<span class="hljs-number">0</span>)<span class="hljs-built_in">bfs</span>(area);<span class="hljs-comment">//如果合法，bfs</span><br>        <span class="hljs-comment">//printf(&quot;%d %d %d &quot;,area,c[area],car);</span><br>        <span class="hljs-keyword">if</span>(c[area]&lt;car<span class="hljs-number">-1</span>)<span class="hljs-comment">//如果有其余城市失联</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Red Alert: City %d is lost!\n&quot;</span>,a);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>                <span class="hljs-keyword">if</span>(gt[i]==<span class="hljs-number">-1</span>)<br>                &#123;<br>                    <span class="hljs-built_in">bfs</span>(i);<span class="hljs-comment">//重新bfs</span><br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;City %d is lost.\n&quot;</span>,a);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(co&gt;=n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Game Over.&quot;</span>);<span class="hljs-comment">//全部沦陷判定</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-014-列车调度-25-分"><a class="markdownIt-Anchor" href="#l2-014-列车调度-25-分"></a> L2-014 列车调度 (25 分)</h2><p>贪心</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>这个题我常做常忘，这次最后还是参考了<a href="https://blog.csdn.net/shiliang97/article/details/98481886">这位大佬的题解</a>;</p><p>本质是求给定序列最少有多少个递增序列（可不连续）；</p><p>首先想到的是创建足够多个栈，对于每一个元素，将其压入栈顶元素大于该元素并且栈顶元素最小的栈，如果不存在满足条件的栈，则将其压入新栈；<br />如此，时间复杂度则到了O(n<sup>2</sup>)，不现实；</p><p>在上面的过程中，我们可以发现，对于每个栈，只有栈顶元素是会被用到的，我们便可以只存储栈顶元素；</p><p>如果将栈顶元素放入一个set，便可以使用upper_bound十分快速地找到满足条件的set元素（所代表的栈）并将该元素替换为新值；<br />同理，如果不存在满足条件的set元素，将新值加入set即可；<br />时间复杂度便被降到了O(nlogn)；</p><p>因为每个车厢的编号是无重复的，所以不需要考虑误去重的问题；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>set&lt;<span class="hljs-type">int</span>&gt;st;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i,g;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">auto</span> po=st.<span class="hljs-built_in">upper_bound</span>(g);<br>        <span class="hljs-keyword">if</span>(po!=st.<span class="hljs-built_in">end</span>())<span class="hljs-comment">//有满足条件的元素</span><br>        &#123;<br>            st.<span class="hljs-built_in">erase</span>(po);<span class="hljs-comment">//清除该元素</span><br>        &#125;<br>        st.<span class="hljs-built_in">insert</span>(g);<br>    &#125;<br>    cout&lt;&lt;st.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-015-互评成绩-25-分"><a class="markdownIt-Anchor" href="#l2-015-互评成绩-25-分"></a> L2-015 互评成绩 (25 分)</h2><p>排序？</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>按要求算出每个同学成绩后排序，按要求输出即可；</p><p><strong>注意：题目中要求的“非降序”，不是按输入顺序，而是按升序</strong><br />所以代码中的pair数组用double数组即可</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k,m;<br>    cin&gt;&gt;n&gt;&gt;k&gt;&gt;m;<br>    pair&lt;<span class="hljs-type">double</span>,<span class="hljs-type">int</span>&gt; sc[<span class="hljs-number">10004</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> g[<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k;j++)<br>        &#123;<br>            cin&gt;&gt;g[j];<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(g+<span class="hljs-number">1</span>,g+k+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">2</span>;j&lt;=k<span class="hljs-number">-1</span>;j++)<br>        &#123;<br>            sc[i].first+=g[j];<br>        &#125;<br>        sc[i].first/=k<span class="hljs-number">-2</span>;<br>        sc[i].second=i;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(sc+<span class="hljs-number">1</span>,sc+n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf%s&quot;</span>,sc[n-i].first,i?<span class="hljs-string">&quot; &quot;</span>:<span class="hljs-string">&quot;\0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-016-愿天下有情人都是失散多年的兄妹-25-分"><a class="markdownIt-Anchor" href="#l2-016-愿天下有情人都是失散多年的兄妹-25-分"></a> L2-016 愿天下有情人都是失散多年的兄妹 (25 分)</h2><p>dfs</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>遇到这个题首先想到的是并查集，但是每人有父亲与母亲两个上级节点，同时又没有保证只有一个下级节点，所以并查集会非常麻烦；</p><p>于是这道题就可以用定深的dfs来解决了；</p><p>对第一个人dfs时，将其范围内所有亲友用map标记，对第二个人dfs时，检查范围内有无亲友被标记即可；</p><p>这道题的数据非常狠，包括但不限于询问某人的父母与其他同辈是否可婚；<br />4号测试组的数据怀疑有一些问题，具体描述如下：<br />默认性别为0时，38行可被注释掉，但是34行不可以，大致想了一下，没想到可能造成这种情况的测试组，也有可能是我想得不够全面，欢迎讨论；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-keyword">struct</span> <br>&#123;<br>    <span class="hljs-type">int</span> s;<br>    <span class="hljs-type">int</span> f[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> fok;<br>&#125;p[<span class="hljs-number">100005</span>];<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> o)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> f=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(mp[x])&#123;f=<span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">if</span>(o)mp[x]++;<br>    <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">4</span>&amp;&amp;p[x].fok)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<br>            <span class="hljs-keyword">if</span>(p[x].f[i]!=<span class="hljs-number">-1</span>)f*=<span class="hljs-built_in">dfs</span>(p[x].f[i],n+<span class="hljs-number">1</span>,o);<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,a,b,g;<br>    <span class="hljs-type">char</span> c;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %c&quot;</span>,&amp;g,&amp;c);<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;M&#x27;</span>)p[g].s=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> p[g].s=<span class="hljs-number">0</span>;<br>        p[g].fok=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;p[g].f[<span class="hljs-number">0</span>],&amp;p[g].f[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span>(p[g].f[<span class="hljs-number">0</span>]!=<span class="hljs-number">-1</span>)p[p[g].f[<span class="hljs-number">0</span>]].s=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(p[g].f[<span class="hljs-number">1</span>]!=<span class="hljs-number">-1</span>)p[p[g].f[<span class="hljs-number">1</span>]].s=<span class="hljs-number">0</span>;<br>    &#125;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(p[a].s==p[b].s)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Never Mind\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            mp.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-built_in">dfs</span>(a,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">dfs</span>(b,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>))<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-017-人以群分-25-分"><a class="markdownIt-Anchor" href="#l2-017-人以群分-25-分"></a> L2-017 人以群分 (25 分)</h2><p>贪心？</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>首要目的是使两群人人数差尽量小，如果总人数为偶数，则对半分，若总人数为奇数，则两边人数差一；</p><p>其次是是两侧分数之和的差尽量大，则按分数排序，一侧取较大的一段，另一侧取较小端即可；<br />对于总人数为奇数的情况，显然，将中位数分至较大端能使两端分数差更大；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,a=<span class="hljs-number">0</span>,b=<span class="hljs-number">0</span>,g[<span class="hljs-number">100005</span>],i;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g[i]);<br>    <span class="hljs-built_in">sort</span>(g+<span class="hljs-number">1</span>,g+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-keyword">if</span>(n&amp;<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n/<span class="hljs-number">2</span>;i++)<br>        a+=g[i],b+=g[n+<span class="hljs-number">1</span>-i];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Outgoing #: %d\nIntroverted #: %d\nDiff = %d&quot;</span>,n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>,n/<span class="hljs-number">2</span>,b-a+g[n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n/<span class="hljs-number">2</span>;i++)<br>        a+=g[i],b+=g[n+<span class="hljs-number">1</span>-i];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Outgoing #: %d\nIntroverted #: %d\nDiff = %d&quot;</span>,n/<span class="hljs-number">2</span>,n/<span class="hljs-number">2</span>,b-a);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-018-多项式a除以b-25-分"><a class="markdownIt-Anchor" href="#l2-018-多项式a除以b-25-分"></a> L2-018 多项式A除以B (25 分)</h2><p>大除法<br />有一些大佬的做法还是不太清楚，mark一下，以后看<a href="https://blog.csdn.net/weixin_45697774/article/details/112130004">here</a>&amp;<a href="https://blog.csdn.net/alpha202/article/details/90737626">here</a></p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>用数组模拟初中数学的大乘法即可；</p><p><a href="https://baike.baidu.com/item/%E5%A4%A7%E9%99%A4%E6%B3%95/7844493?fr=aladdin">百度百科_大除法</a></p><p>补充一点数据范围：<br />设最高幂次P；<br />五个样例中，有三个样例满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>&lt;</mo><mo>=</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">P&lt;=100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span>；<br />有四个样例满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>&lt;</mo><mo>=</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">P&lt;=1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>；<br />所有样例满足  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>&lt;</mo><mo>=</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">P&lt;=10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span>；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> a[<span class="hljs-number">10004</span>],b[<span class="hljs-number">10004</span>];<br>    <span class="hljs-type">double</span> c[<span class="hljs-number">10004</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> n,g1,m,i,l,ma=<span class="hljs-number">-1</span>,mb=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">double</span> g2;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)cin&gt;&gt;g1&gt;&gt;g2,a[g1]=g2,ma=<span class="hljs-built_in">max</span>(ma,g1);<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)cin&gt;&gt;g1&gt;&gt;g2,b[g1]=g2,mb=<span class="hljs-built_in">max</span>(mb,g1);<br>    <span class="hljs-comment">/*for(i=0;i&lt;=ma;i++)printf(&quot;%.1lf &quot;,a[i]);</span><br><span class="hljs-comment">    printf(&quot;\n&quot;);</span><br><span class="hljs-comment">    for(i=0;i&lt;=mb;i++)printf(&quot;%.1lf &quot;,b[i]);*/</span><br>    <span class="hljs-type">int</span> top=ma;<br>    <span class="hljs-keyword">while</span>(top&gt;=mb)<br>    &#123;<br>        c[top-mb]=a[top]/b[mb];<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=top;i++)<br>        &#123;<br>            a[top-i]-=b[mb-i]*c[top-mb];<br>            <span class="hljs-keyword">if</span>(i==mb)<span class="hljs-keyword">break</span>;<br>        &#125;<br>        top--;<br>    &#125;<br>    <span class="hljs-type">int</span> cc=<span class="hljs-number">0</span>,ca=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=ma-mb;i++)<span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(c[i])&gt;=<span class="hljs-number">0.1</span>)cc++;<span class="hljs-keyword">else</span> c[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;mb;i++)<span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(a[i])&gt;=<span class="hljs-number">0.1</span>)ca++;<span class="hljs-keyword">else</span> a[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,cc);<br>    <span class="hljs-keyword">if</span>(cc)&#123;<span class="hljs-keyword">for</span>(i=ma-mb;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(c[i])&gt;=<span class="hljs-number">0.1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d %.1lf&quot;</span>,i,c[i]);&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; 0 0.0&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d&quot;</span>,ca);<br>    <span class="hljs-keyword">if</span>(ca)&#123;<span class="hljs-keyword">for</span>(i=mb;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(a[i])&gt;=<span class="hljs-number">0.1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d %.1lf&quot;</span>,i,a[i]);&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; 0 0.0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-019-悄悄关注-25-分"><a class="markdownIt-Anchor" href="#l2-019-悄悄关注-25-分"></a> L2-019 悄悄关注 (25 分)</h2><p>ZZU视频刷完啦~</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>分别存下关注列表中的每个人和点赞数，为关注列表中的每个人分配哈希值（并无必要，标记即可），遍历点赞的人，筛选满足条件的输出即可；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-meta"># <span class="hljs-keyword">define</span> double long double</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">20</span>;<br><br>map&lt;string,<span class="hljs-type">int</span>&gt;hh,ct;<br>map&lt;string,<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,chh=<span class="hljs-number">1</span>,intg;<br>    string g;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cin&gt;&gt;g;<br>        hh[g]=chh++;<br>    &#125;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">double</span> cal=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;g&gt;&gt;intg;<br>        ct[g]=intg;<br>        cal+=intg;<br>    &#125;<br>    cal/=n;<br>    <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(it=ct.<span class="hljs-built_in">begin</span>();it!=ct.<span class="hljs-built_in">end</span>();it++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(it-&gt;second&gt;=cal&amp;&amp;!hh[it-&gt;first])<br>        &#123;<br>            cout&lt;&lt;it-&gt;first;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>            f++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Bing Mei You&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="l2-020-功夫传人-25-分"><a class="markdownIt-Anchor" href="#l2-020-功夫传人-25-分"></a> L2-020 功夫传人 (25 分)</h2><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>记录树状关系，进行dfs，统计得道者的武力值即可；</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">double</span> k[N + <span class="hljs-number">5</span>];<br><span class="hljs-type">double</span> val[N + <span class="hljs-number">5</span>];<br><span class="hljs-type">double</span> dk;<br>vector&lt;<span class="hljs-type">int</span>&gt; rod[N + <span class="hljs-number">5</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    val[x] *= k[x];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rod[x].<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        val[rod[x][i]] = val[x] * dk;<br>        <span class="hljs-built_in">dfs</span>(rod[x][i]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, g;<br>    <span class="hljs-type">double</span> gd;<br>    cin &gt;&gt; n &gt;&gt; val[<span class="hljs-number">0</span>] &gt;&gt; dk;<br>    dk /= <span class="hljs-number">100.0</span>;<br>    dk = <span class="hljs-number">1</span> - dk;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>        <span class="hljs-keyword">if</span> (m)<br>        &#123;<br>            k[i] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (m--)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g);<br>                rod[i].<span class="hljs-built_in">push_back</span>(g);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cin &gt;&gt; k[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-comment">// printf(&quot;%.2lf\n&quot;,val[i]);</span><br>        <span class="hljs-keyword">if</span> (k[i] != <span class="hljs-number">1</span>)<br>            ans += val[i];<br>    &#125;<br>    ans = <span class="hljs-built_in">floor</span>(ans);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.0lf&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="l2-021-点赞狂魔-25-分"><a class="markdownIt-Anchor" href="#l2-021-点赞狂魔-25-分"></a> L2-021 点赞狂魔 (25 分)</h2><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>对每个人的点赞标签去重（set / map / 排序去重）后，记录并排序；</p><p>按要求输出即可；</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; gt;<br>string g[<span class="hljs-number">102</span>];<br>pair&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">double</span>&gt;, <span class="hljs-type">int</span>&gt; pr[<span class="hljs-number">102</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, gint, m, chh = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; g[i];<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>        gt.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++)<br>        &#123;<br>            cin &gt;&gt; gint;<br>            gt[gint]++;<br>        &#125;<br>        pr[i] = &#123;&#123;gt.<span class="hljs-built_in">size</span>(), m * <span class="hljs-number">1.0</span> / gt.<span class="hljs-built_in">size</span>()&#125;, i&#125;;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(pr + <span class="hljs-number">1</span>, pr + <span class="hljs-number">1</span> + n,<br>         [&amp;](pair&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">double</span>&gt;, <span class="hljs-type">int</span>&gt; &amp;a, pair&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">double</span>&gt;, <span class="hljs-type">int</span>&gt; &amp;b)<br>         &#123;<br>             <span class="hljs-keyword">if</span> (a.first.first == b.first.first)<br>                 <span class="hljs-keyword">return</span> a.first.second &lt; b.first.second;<br>             <span class="hljs-keyword">else</span><br>                 <span class="hljs-keyword">return</span> a.first.first &gt; b.first.first;<br>         &#125;);<br>    <span class="hljs-type">int</span> f = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n &amp;&amp; i &lt;= <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (f)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        cout &lt;&lt; g[pr[i].second];<br>        f++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (f &lt; <span class="hljs-number">3</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; -&quot;</span>);<br>        f++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PTA天梯练习赛 刷题笔记1（L2 001-012）</title>
    <link href="/2021.01-06/PTA%E5%A4%A9%E6%A2%AF%E7%BB%83%E4%B9%A0%E8%B5%9B%20%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B01%EF%BC%88L2%20001-012%EF%BC%89/"/>
    <url>/2021.01-06/PTA%E5%A4%A9%E6%A2%AF%E7%BB%83%E4%B9%A0%E8%B5%9B%20%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B01%EF%BC%88L2%20001-012%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目库链接：<a href="https://pintia.cn/problem-sets/994805046380707840/problems/type/7">团体程序设计天梯赛-练习集</a><br />NEXT：<a href="https://blog.csdn.net/Tan_Yuu/article/details/115889329">PTA天梯练习赛 刷题笔记2</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#l2-001-%E7%B4%A7%E6%80%A5%E6%95%91%E6%8F%B4-25-%E5%88%86">L2-001 紧急救援 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#l2-002-%E9%93%BE%E8%A1%A8%E5%8E%BB%E9%87%8D-25-%E5%88%86">L2-002 链表去重 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#l2-003-%E6%9C%88%E9%A5%BC-25-%E5%88%86">L2-003 月饼 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#l2-004-%E8%BF%99%E6%98%AF%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E5%90%97-25-%E5%88%86">L2-004 这是二叉搜索树吗？ (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#l2-005-%E9%9B%86%E5%90%88%E7%9B%B8%E4%BC%BC%E5%BA%A6-25-%E5%88%86">L2-005 集合相似度 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#l2-006-%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86-25-%E5%88%86">L2-006 树的遍历 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#l2-007-%E5%AE%B6%E5%BA%AD%E6%88%BF%E4%BA%A7-25-%E5%88%86">L2-007 家庭房产 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#l2-008-%E6%9C%80%E9%95%BF%E5%AF%B9%E7%A7%B0%E5%AD%90%E4%B8%B2-25-%E5%88%86">L2-008 最长对称子串 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#l2-009-%E6%8A%A2%E7%BA%A2%E5%8C%85-25-%E5%88%86">L2-009 抢红包 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li><li><a href="#l2-010-%E6%8E%92%E5%BA%A7%E4%BD%8D-25-%E5%88%86">L2-010 排座位 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-10">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-10">代码</a></li></ul></li><li><a href="#l2-011-%E7%8E%A9%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91-25-%E5%88%86">L2-011 玩转二叉树 (25 分)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-11">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-11">代码</a></li></ul></li><li><a href="#l2-012%E5%85%B3%E4%BA%8E%E5%A0%86%E7%9A%84%E5%88%A4%E6%96%AD25%E5%88%86">L2-012关于堆的判断（25分）</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-12">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-12">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>\</p><h2 id="l2-001-紧急救援-25-分"><a class="markdownIt-Anchor" href="#l2-001-紧急救援-25-分"></a> L2-001 紧急救援 (25 分)</h2><p>dijkstra（迪杰斯特拉）算法<br />大佬说SPFA也可以做，mark一下，接下来学</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>可以参考<a href="https://blog.csdn.net/hzf0701/article/details/107643772">这里</a>来了解迪杰斯特拉的基本原理；</p><p>此题的主要特定是最短路可能有多种规划路线，而最优解只有一个，即需要同时处理距离和人数两个维度的信息；</p><p>主要思想是将所有点分为已达点与未达点两个集合（代码中用一个数组进行01标记），最开始时，已达点集合仅有出发点，未达点集合包含其余所有点；</p><p>主要过程是每一次循环遍历所有未达点，对于每一个未达点 p<sub>j</sub> ，如果可以通过一条道路（长度 k<sub>i</sub> ）连接至已达点 p<sub>i</sub> ，则记录由此未达点到达初始点的最短距离（设 p<sub>i</sub> 点到起始点的最短距离 l<sub>i</sub>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>l</mi><mi>j</mi></msub><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>l</mi><mi>i</mi></msub><mo>+</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">l_j=min(l_i+k_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>），并记录所有能使 l<sub>j</sub> 取最小值的 i ，作为到达此点的方案数；</p><p>在所有未达点中选择距离初始点最短的点，将其加入已达点集合，并在所有可行方案（ i ）中选择积累人数最多的点作为最终与其连接的点，新点的累计人数即为与其连接点的累积人数和新点原有人数的和；</p><p>如此循环，直到目标点已达；</p><p>最后按顺序找出整个路径上的各个点并输出即可。</p><p><em>详见代码注释</em><br /><em>进行人数存储的部分可优化，即smp变量不必要</em><br /><em>时间复杂度O(n<sup>3</sup>)</em></p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">struct</span> <br>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;fr;<span class="hljs-comment">//存储其上游的点，即from i</span><br><span class="hljs-type">int</span> strd=<span class="hljs-number">100000000</span>;<span class="hljs-comment">//存储距离初始点的距离，默认无穷大</span><br><span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<span class="hljs-comment">//存储此点的人数</span><br><span class="hljs-type">int</span> smp=<span class="hljs-number">0</span>;<span class="hljs-comment">//存储从初始点到此点的累计人数</span><br>&#125;cty[<span class="hljs-number">502</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,m,f,t,a,b,l;<span class="hljs-comment">//n为城市数，m为道路数，abl为接收道路用变量</span><br><span class="hljs-type">int</span> r[<span class="hljs-number">502</span>][<span class="hljs-number">502</span>]=&#123;<span class="hljs-number">0</span>&#125;,rch[<span class="hljs-number">502</span>]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//r即road，存储道路，长度为0即无路，此处可优化</span><br><span class="hljs-comment">//rch数组存储已达点及方案数，0为未达</span><br>cin&gt;&gt;n&gt;&gt;m&gt;&gt;f&gt;&gt;t;<br>cty[f].fr.<span class="hljs-built_in">push_back</span>(f);<span class="hljs-comment">//初始化处理开始点</span><br>rch[f]=<span class="hljs-number">1</span>;<br>cty[f].strd=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br>cin&gt;&gt;cty[i].p;<br>cty[i].smp=cty[i].p;<br>&#125;<span class="hljs-comment">//接收城市救援人数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<span class="hljs-comment">//接收路，对称加入存储</span><br>&#123;<br>cin&gt;&gt;a&gt;&gt;b&gt;&gt;l;<br><span class="hljs-keyword">if</span>(r[a][b])r[a][b]=<span class="hljs-built_in">min</span>(r[a][b],l);<br><span class="hljs-keyword">else</span> r[a][b]=l;<br><span class="hljs-keyword">if</span>(r[b][a])r[b][a]=<span class="hljs-built_in">min</span>(r[b][a],l);<br><span class="hljs-keyword">else</span> r[b][a]=l;<br>&#125;<br><span class="hljs-keyword">while</span>(!rch[t])<span class="hljs-comment">//如果目标点未达，则持续循环</span><br>&#123;<br><span class="hljs-type">int</span> mnr=<span class="hljs-number">100000000</span><span class="hljs-number">-8</span>,mnm=<span class="hljs-number">-1</span>;<span class="hljs-comment">//mnr存储未达点距离初始点的距离最小值</span><br><span class="hljs-comment">//mnm存储满足mnr点的编号</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(!rch[i])<span class="hljs-comment">//如果未达</span><br>&#123;<br>cty[i].fr.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//初始化</span><br>cty[i].strd=<span class="hljs-number">100000000</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(rch[j]&amp;&amp;r[i][j])<span class="hljs-comment">//遍历每一条通往可达点的道路</span><br>&#123;<br><span class="hljs-keyword">if</span>(cty[j].strd+r[i][j]&lt;cty[i].strd)<span class="hljs-comment">//更小值</span><br>&#123;<br>cty[i].strd=cty[j].strd+r[i][j];<span class="hljs-comment">//更新最小值</span><br>cty[i].fr.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//情况方案</span><br>cty[i].fr.<span class="hljs-built_in">push_back</span>(j);<span class="hljs-comment">//j加入方案</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cty[j].strd+r[i][j]==cty[i].strd)<span class="hljs-comment">//与最小值相等的值</span><br>&#123;<br>cty[i].fr.<span class="hljs-built_in">push_back</span>(j);<span class="hljs-comment">//j加入方案</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(cty[i].strd&lt;mnr)<span class="hljs-comment">//更新此次循环的最小距离</span><br>&#123;<br>mnr=cty[i].strd;<br>mnm=i;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> mxp=<span class="hljs-number">0</span>,mxm=<span class="hljs-number">-1</span>;<span class="hljs-comment">//mxp记录最多积累人数，mxm记录mxp对应的城市编号</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j:cty[mnm].fr)<br>&#123;<br>rch[mnm]+=rch[j];<span class="hljs-comment">//到达新点的最终方案数为每一个可行方案对应的点方案数之和</span><br><span class="hljs-keyword">if</span>(cty[j].smp&gt;mxp)<span class="hljs-comment">//更新</span><br>&#123;<br>mxp=cty[j].smp;<br>mxm=j;<br>&#125;<br>&#125;<br>cty[mnm].fr.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空方案</span><br>cty[mnm].fr.<span class="hljs-built_in">push_back</span>(mxm);<span class="hljs-comment">//并将积累人数最多的方案定为最终方案</span><br>cty[mnm].smp+=cty[mxm].smp;<span class="hljs-comment">//更新积累人数</span><br><span class="hljs-comment">//printf(&quot;%d %d\n&quot;,mnm,rch[mnm]);</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,rch[t],cty[t].smp);<span class="hljs-comment">//输出方案数和最优方案人数</span><br>stack&lt;<span class="hljs-type">int</span>&gt;stk;<span class="hljs-comment">//栈存储路径结点</span><br><span class="hljs-type">int</span> now=t;<br>stk.<span class="hljs-built_in">push</span>(t);<br>stk.<span class="hljs-built_in">push</span>(cty[now].fr[<span class="hljs-number">0</span>]);<br>now=cty[now].fr[<span class="hljs-number">0</span>];<br><span class="hljs-comment">//printf(&quot;*%d&quot;,stk.top());</span><br><span class="hljs-keyword">while</span>(stk.<span class="hljs-built_in">top</span>()!=f)<br>&#123;<br>stk.<span class="hljs-built_in">push</span>(cty[now].fr[<span class="hljs-number">0</span>]);<br>now=cty[now].fr[<span class="hljs-number">0</span>];<br><span class="hljs-comment">//printf(&quot;*%d&quot;,stk.top());</span><br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,stk.<span class="hljs-built_in">top</span>());<span class="hljs-comment">//输出开始</span><br>stk.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">while</span>(stk.<span class="hljs-built_in">size</span>())<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,stk.<span class="hljs-built_in">top</span>());<br>stk.<span class="hljs-built_in">pop</span>();<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-002-链表去重-25-分"><a class="markdownIt-Anchor" href="#l2-002-链表去重-25-分"></a> L2-002 链表去重 (25 分)</h2><p>数据结构</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>存住上一个节点，按要求更新处理即可；</p><p>要握住两个链表的起始点；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">struct</span> <br>&#123;<br><span class="hljs-type">int</span> num;<br><span class="hljs-type">int</span> nxt;<br>&#125;vtr[<span class="hljs-number">100005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> f1,n,g,f2=<span class="hljs-number">-1</span>;<br>cin&gt;&gt;f1&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>cin&gt;&gt;g;<br>cin&gt;&gt;vtr[g].num&gt;&gt;vtr[g].nxt;<br>&#125;<span class="hljs-comment">//接收结束</span><br><span class="hljs-type">int</span> now=f1,a[<span class="hljs-number">10004</span>]=&#123;<span class="hljs-number">0</span>&#125;,lst=<span class="hljs-number">0</span>,now2;<span class="hljs-comment">//a用来桶去重，now为正在处理的节点，lst为上一个节点，now2为另一个链表的末尾</span><br><span class="hljs-keyword">while</span>(now!=<span class="hljs-number">-1</span>)<span class="hljs-comment">//未到f1的结尾则继续循环</span><br>&#123;<br><span class="hljs-keyword">if</span>(a[<span class="hljs-built_in">abs</span>(vtr[now].num)])<br>&#123;<br>vtr[lst].nxt=vtr[now].nxt;<br><span class="hljs-keyword">if</span>(f2==<span class="hljs-number">-1</span>)f2=now,now2=now,now=vtr[now].nxt,vtr[now2].nxt=<span class="hljs-number">-1</span>;<span class="hljs-comment">//若另一链表未被建立</span><br><span class="hljs-keyword">else</span><br>&#123;<br>vtr[now2].nxt=now;<br>now2=now;<br>now=vtr[now].nxt;<br>vtr[now2].nxt=<span class="hljs-number">-1</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>a[<span class="hljs-built_in">abs</span>(vtr[now].num)]=<span class="hljs-number">1</span>;<br>lst=now;<br>now=vtr[now].nxt;<br>&#125;<br>&#125;<br>now=f1;<br><span class="hljs-keyword">while</span>(now!=<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d &quot;</span>,now,vtr[now].num);<br>        <span class="hljs-keyword">if</span>(vtr[now].nxt==<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d\n&quot;</span>,vtr[now].nxt);<span class="hljs-comment">//注意要求保留位数</span><br>now=vtr[now].nxt;<br>&#125;<br>now=f2;<br><span class="hljs-keyword">while</span>(now!=<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d %d &quot;</span>,now,vtr[now].num);<br>        <span class="hljs-keyword">if</span>(vtr[now].nxt==<span class="hljs-number">-1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d\n&quot;</span>,vtr[now].nxt);<br>now=vtr[now].nxt;<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-003-月饼-25-分"><a class="markdownIt-Anchor" href="#l2-003-月饼-25-分"></a> L2-003 月饼 (25 分)</h2><p>模拟，贪心</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>模拟即可，优先卖单价高的；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">mooncake</span><br>&#123;<br><span class="hljs-type">double</span> w;<br><span class="hljs-type">double</span> m;<br>&#125;mnk[<span class="hljs-number">1003</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> mooncake a,<span class="hljs-type">const</span> mooncake b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>*a.m/a.w&gt;<span class="hljs-number">1.0</span>*b.m/b.w;<br>&#125;<br><span class="hljs-comment">//money per weight 按单价降序排序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> t;<br>    <span class="hljs-type">double</span> n;<br>cin&gt;&gt;t&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)cin&gt;&gt;mnk[i].w;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)cin&gt;&gt;mnk[i].m;<br><span class="hljs-built_in">sort</span>(mnk+<span class="hljs-number">1</span>,mnk+t+<span class="hljs-number">1</span>,cmp);<br><span class="hljs-type">double</span> s=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=t&amp;&amp;n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(n&gt;=mnk[i].w)<br>&#123;<br>n-=mnk[i].w;<br>s+=mnk[i].m;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>s+=<span class="hljs-number">1.0</span>*n*mnk[i].m/mnk[i].w;<br>n=<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-004-这是二叉搜索树吗-25-分"><a class="markdownIt-Anchor" href="#l2-004-这是二叉搜索树吗-25-分"></a> L2-004 这是二叉搜索树吗？ (25 分)</h2><p>树的前序遍历</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>对于题目中描述的二叉搜索树，满足以下性质：<br />对于一棵树前序遍历 [ l , r ] ，第一个元素必为根节点；<br />设从第二个节点开始，第一个大于等于根节点的节点编号为mk，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>m</mi><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo separator="true">,</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">[</mo><mi>m</mi><mi>k</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo><mo>&lt;</mo><mo>=</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">max [ l , mk - 1 ]&lt;root,min[ mk , r ]&lt;=root</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span></span></span></span>；</p><p>镜像树类似；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>queue&lt;<span class="hljs-type">int</span>&gt;que;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1003</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ju</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> dir)</span><span class="hljs-comment">//dir=1即为正向树，dir=0即为镜像树</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> i,root=a[l],ans=<span class="hljs-number">1</span>,mk=r+<span class="hljs-number">1</span>,mi=root,mx=root<span class="hljs-number">-1</span>;<br><span class="hljs-comment">//root存储子树根节点的值，mk为右子树的根节点</span><br><span class="hljs-comment">//mi为目标子树的最小值，mx为目标字数的最大值</span><br><span class="hljs-comment">/*if(l==r)//防呆代码，实际上用不到</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">que.push(a[l]);</span><br><span class="hljs-comment">return 1;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">else if(l&gt;r)</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">return 1;</span><br><span class="hljs-comment">&#125;*/</span><br><span class="hljs-keyword">if</span>(dir)<br>&#123;<br><span class="hljs-keyword">for</span>(i=l+<span class="hljs-number">1</span>;i&lt;=r;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&gt;=root)mk=<span class="hljs-built_in">min</span>(mk,i);<br><span class="hljs-keyword">if</span>(mk==r+<span class="hljs-number">1</span>)mx=<span class="hljs-built_in">max</span>(mx,a[i]);<span class="hljs-comment">//mk==r+1说明此处仍为左子树</span><br><span class="hljs-keyword">else</span> mi=<span class="hljs-built_in">min</span>(mi,a[i]);<br>&#125;<br><span class="hljs-keyword">if</span>(mk!=l+<span class="hljs-number">1</span>&amp;&amp;mx&gt;=root||mk!=r+<span class="hljs-number">1</span>&amp;&amp;mi&lt;root)<span class="hljs-comment">//对于mk的判据可以删除</span><br>&#123;<br><span class="hljs-comment">//printf(&quot;%d %d %d %d %d\n&quot;,l,r,mi,mx,mk);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(i=l+<span class="hljs-number">1</span>;i&lt;=r;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i]&lt;root)mk=<span class="hljs-built_in">min</span>(mk,i);<br><span class="hljs-keyword">if</span>(mk==r+<span class="hljs-number">1</span>)mi=<span class="hljs-built_in">min</span>(mi,a[i]);<br><span class="hljs-keyword">else</span> mx=<span class="hljs-built_in">max</span>(mx,a[i]);<br>&#125;<br><span class="hljs-keyword">if</span>(mk!=r+<span class="hljs-number">1</span>&amp;&amp;mx&gt;=root||mk!=l+<span class="hljs-number">1</span>&amp;&amp;mi&lt;root)<br>&#123;<br><span class="hljs-comment">//printf(&quot;%d %d %d %d %d\n&quot;,l,r,mi,mx,mk);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(mk!=l+<span class="hljs-number">1</span>)<span class="hljs-comment">//若左子树存在</span><br>&#123;<br>ans*=<span class="hljs-built_in">ju</span>(l+<span class="hljs-number">1</span>,mk<span class="hljs-number">-1</span>,dir);<br>&#125;<br><span class="hljs-keyword">if</span>(mk!=r+<span class="hljs-number">1</span>)<span class="hljs-comment">//若右子树存在</span><br>&#123;<br>ans*=<span class="hljs-built_in">ju</span>(mk,r,dir);<br>&#125;<br>que.<span class="hljs-built_in">push</span>(root);<span class="hljs-comment">//根节点入栈，栈内即为后序遍历</span><br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,i,f=<span class="hljs-number">1</span>;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n&amp;&amp;f;i++)cin&gt;&gt;a[i];<br>&#123;<br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>]&gt;a[<span class="hljs-number">2</span>])f=<span class="hljs-built_in">ju</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">1</span>);<span class="hljs-comment">//正向树</span><br><span class="hljs-keyword">else</span> f=<span class="hljs-built_in">ju</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">0</span>);<span class="hljs-comment">//镜像树</span><br><span class="hljs-keyword">if</span>(f)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>,que.<span class="hljs-built_in">size</span>());<br><span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,que.<span class="hljs-built_in">front</span>());<br><span class="hljs-keyword">if</span>(que.<span class="hljs-built_in">size</span>()!=<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>que.<span class="hljs-built_in">pop</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-005-集合相似度-25-分"><a class="markdownIt-Anchor" href="#l2-005-集合相似度-25-分"></a> L2-005 集合相似度 (25 分)</h2><p>双指针</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>之前写过一篇题解，和这个题很像，详见<a href="https://blog.csdn.net/Tan_Yuu/article/details/113003031">关于 相似的数集 的思路+时间复杂度分析+代码</a>;</p><p>排序后双指针去重即可，时间复杂度 O(KN)；</p><p>经测试，用map桶计数来查总数会TLE；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> t,n,i,j;<br><span class="hljs-type">int</span> a[<span class="hljs-number">51</span>][<span class="hljs-number">2003</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>cin&gt;&gt;t;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=t;i++)<br>&#123;<br>cin&gt;&gt;a[i][<span class="hljs-number">0</span>];<span class="hljs-comment">//a[i][0]存第 i 个数集的元素数</span><br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=a[i][<span class="hljs-number">0</span>];j++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br>&#125;<br><span class="hljs-built_in">sort</span>(a[i]+<span class="hljs-number">1</span>,a[i]+a[i][<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>);<br>&#125;<br>cin&gt;&gt;n;<br><span class="hljs-type">int</span> x,y,cc,ca;<br><span class="hljs-keyword">while</span>(n--)<br>&#123;<br>cc=<span class="hljs-number">0</span>;<br>cin&gt;&gt;x&gt;&gt;y;<br>ca=a[x][<span class="hljs-number">0</span>]+a[y][<span class="hljs-number">0</span>];<br>i=j=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;=a[x][<span class="hljs-number">0</span>]&amp;&amp;j&lt;=a[y][<span class="hljs-number">0</span>])<br>&#123;<br><span class="hljs-keyword">while</span>(a[x][i+<span class="hljs-number">1</span>]==a[x][i])i++,ca--;<br><span class="hljs-keyword">while</span>(a[y][j+<span class="hljs-number">1</span>]==a[y][j])j++,ca--;<br><span class="hljs-keyword">if</span>(a[x][i]&lt;a[y][j])i++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[x][i]&gt;a[y][j])j++;<br><span class="hljs-keyword">else</span> cc++,i++,j++,ca--;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf%%\n&quot;</span>,<span class="hljs-number">100.0</span>*cc/ca);<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-006-树的遍历-25-分"><a class="markdownIt-Anchor" href="#l2-006-树的遍历-25-分"></a> L2-006 树的遍历 (25 分)</h2><p>树的遍历</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>思路与代码可以移步我之前的题解 <a href="https://blog.csdn.net/Tan_Yuu/article/details/115156991">关于 树的遍历 一题的思路+代码（树的后序与中序遍历输出层序遍历）（递归）</a>；</p><p><strong>补充：这个方法太麻烦了，下面的 L2-011 玩转二叉树 用的方法简单些</strong></p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; son[<span class="hljs-number">31</span>];<span class="hljs-comment">//son[x]代表x的子节点</span><br><br><span class="hljs-type">int</span> n,i,j;<br><span class="hljs-type">int</span> mid[<span class="hljs-number">31</span>],lst[<span class="hljs-number">31</span>],rot=<span class="hljs-number">0</span>;<span class="hljs-comment">//rot存总根</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">maketr</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> fa)</span><span class="hljs-comment">//fa存该树的根的父节点</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==r)<span class="hljs-comment">//叶子</span><br>    &#123;<br>        son[fa].<span class="hljs-built_in">push_back</span>(mid[l]);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(l&gt;r)<span class="hljs-keyword">return</span>;<span class="hljs-comment">//非法</span><br>    <span class="hljs-type">int</span> root=<span class="hljs-number">0</span>,rm=<span class="hljs-number">0</span>;<span class="hljs-comment">//root存该子树的根，rm存该根在中序遍历中的位置</span><br>    <span class="hljs-keyword">for</span>(i=l;i&lt;=r;i++)<span class="hljs-comment">//对于该子树的每一个节点</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=n;j++)<span class="hljs-comment">//在后序遍历中位置最靠后的一个</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(mid[i]==lst[j])<br>            &#123;<br>                <span class="hljs-keyword">if</span>(j&gt;root)&#123;root=j,rm=i;&#125;<br>                <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!rot)rot=lst[root];<span class="hljs-comment">//如果总根未确定，该根即为总根</span><br>    <span class="hljs-comment">//printf(&quot;%d\n&quot;,root);</span><br>    son[fa].<span class="hljs-built_in">push_back</span>(lst[root]);<span class="hljs-comment">//将此树的根连接至其父节点</span><br>    <span class="hljs-built_in">maketr</span>(l,rm<span class="hljs-number">-1</span>,lst[root]);<span class="hljs-comment">//递归左子树</span><br>    <span class="hljs-built_in">maketr</span>(rm+<span class="hljs-number">1</span>,r,lst[root]);<span class="hljs-comment">//递归右子树</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br>queue&lt;<span class="hljs-type">int</span>&gt; que;<span class="hljs-comment">//bfs队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//printf(&quot;*&quot;);</span><br><span class="hljs-type">int</span> pf=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;son[x].<span class="hljs-built_in">size</span>();i++)que.<span class="hljs-built_in">push</span>(son[x][i]);<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> now=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span>(!pf)pf=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,now);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;son[now].<span class="hljs-built_in">size</span>();i++)que.<span class="hljs-built_in">push</span>(son[now][i]);<span class="hljs-comment">//树无自环、重边与回路，不需要考虑重复加入的问题</span><br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;lst[i]);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;mid[i]);<br>    <span class="hljs-built_in">maketr</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">0</span>);<span class="hljs-comment">//建树</span><br>    <span class="hljs-built_in">bfs</span>(<span class="hljs-number">0</span>);<span class="hljs-comment">//bfs输出</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="l2-007-家庭房产-25-分"><a class="markdownIt-Anchor" href="#l2-007-家庭房产-25-分"></a> L2-007 家庭房产 (25 分)</h2><p>并查集</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>基础思想是并查集，不过需要注意的细节很多；</p><p>可以将每一个家庭编号最小的成员作为家庭的根成员；</p><p>详见注释</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-keyword">struct</span> <br>&#123;<br><span class="hljs-type">int</span> t,s;<span class="hljs-comment">//t为以其为根的套数，s为以其为根的面积</span><br><span class="hljs-type">int</span> p;<span class="hljs-comment">//p为以其为根的家族人数</span><br><span class="hljs-type">int</span> f;<span class="hljs-comment">//f标记其上级节点</span><br>&#125;ppo[<span class="hljs-number">10000</span>];<span class="hljs-comment">//ppo节点存人</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">fmy</span><br>&#123;<br><span class="hljs-type">double</span> tpp,spp;<br><span class="hljs-type">int</span> p;<br><span class="hljs-type">int</span> mn;<br>&#125;fm[<span class="hljs-number">10000</span>];<span class="hljs-comment">//fm节点存家庭</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(ppo[x].f==x)<span class="hljs-keyword">return</span> x;<br>ppo[x].f=<span class="hljs-built_in">find</span>(ppo[x].f);<br><span class="hljs-keyword">return</span> ppo[x].f;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> fmy a,<span class="hljs-type">const</span> fmy b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(a.spp-b.spp)&lt;=<span class="hljs-number">0.00001</span>)<br>&#123;<br><span class="hljs-keyword">return</span> a.mn&lt;b.mn;<br>&#125;<br><span class="hljs-keyword">return</span> a.spp&gt;b.spp;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,i,x,g,m,c=<span class="hljs-number">0</span>,get[<span class="hljs-number">10000</span>]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//get防止成员被重复计数</span><br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">9999</span>;i++)ppo[i].f=i;<span class="hljs-comment">//初始化并查集</span><br><span class="hljs-keyword">while</span>(n--)<br>&#123;<br>cin&gt;&gt;x;<br><span class="hljs-type">int</span> fx,fg;<br><span class="hljs-keyword">if</span>(!get[x])ppo[<span class="hljs-built_in">find</span>(x)].p++,get[x]=<span class="hljs-number">1</span>;<span class="hljs-comment">//若未计数x，则计数x</span><br>m=<span class="hljs-number">2</span>;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;g;<br><span class="hljs-keyword">if</span>(g==<span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(!get[g])ppo[<span class="hljs-built_in">find</span>(g)].p++,get[g]=<span class="hljs-number">1</span>;<br>fx=<span class="hljs-built_in">find</span>(x),fg=<span class="hljs-built_in">find</span>(g);<br><span class="hljs-keyword">if</span>(fg&gt;fx)<span class="hljs-comment">//选出x与g中较小的根，并合并</span><br>&#123;<br>ppo[fg].f=fx;<br>ppo[fx].p+=ppo[fg].p;<br>ppo[fx].s+=ppo[fg].s;<br>ppo[fx].t+=ppo[fg].t;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fg&lt;fx)<br>&#123;<br>ppo[fx].f=fg;<br>ppo[fg].p+=ppo[fx].p;<br>ppo[fg].s+=ppo[fx].s;<br>ppo[fg].t+=ppo[fx].t;<br>&#125;<span class="hljs-comment">//若x与g相等，则说明已在同一家庭，不处理</span><br>&#125;<br>cin&gt;&gt;m;<br><span class="hljs-keyword">while</span>(m--)<br>&#123;<br>cin&gt;&gt;g;<br><span class="hljs-keyword">if</span>(g==<span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span>(!get[g])ppo[<span class="hljs-built_in">find</span>(g)].p++,get[g]=<span class="hljs-number">1</span>;<br>fx=<span class="hljs-built_in">find</span>(x),fg=<span class="hljs-built_in">find</span>(g);<br><span class="hljs-keyword">if</span>(fg&gt;fx)<br>&#123;<br>ppo[fg].f=fx;<br>ppo[fx].p+=ppo[fg].p;<br>ppo[fx].s+=ppo[fg].s;<br>ppo[fx].t+=ppo[fg].t;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fg&lt;fx)<br>&#123;<br>ppo[fx].f=fg;<br>ppo[fg].p+=ppo[fx].p;<br>ppo[fg].s+=ppo[fx].s;<br>ppo[fg].t+=ppo[fx].t;<br>&#125;<br>&#125;<br>fx=<span class="hljs-built_in">find</span>(x);<br>cin&gt;&gt;g;<span class="hljs-comment">//新增x的套数与面积</span><br>ppo[fx].t+=g;<br>cin&gt;&gt;g;<br>ppo[fx].s+=g;<br>&#125;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">9999</span>;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i)==i&amp;&amp;ppo[i].p)<span class="hljs-comment">//寻找家庭的根</span><br>&#123;<br>fm[c].tpp=ppo[i].t*<span class="hljs-number">1.0</span>/ppo[i].p;<span class="hljs-comment">//写入fm节点</span><br>fm[c].spp=ppo[i].s*<span class="hljs-number">1.0</span>/ppo[i].p;<br>fm[c].p=ppo[i].p;<br>fm[c].mn=i;<br>c++;<br>&#125;<br>&#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,c);<br><span class="hljs-built_in">sort</span>(fm,fm+c,cmp);<span class="hljs-comment">//排序</span><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;c;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%04d %d %.3lf %.3lf\n&quot;</span>,fm[i].mn,fm[i].p,fm[i].tpp,fm[i].spp);<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-008-最长对称子串-25-分"><a class="markdownIt-Anchor" href="#l2-008-最长对称子串-25-分"></a> L2-008 最长对称子串 (25 分)</h2><p>哈希字符串</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>从两个方向进行字符串哈希，枚举所有区间，并比对；</p><p>代码中 ri[ i ] 存储的即为字符串前i位的哈希值；<br />le[ i ] 存储字符串后i位的哈希值；</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>,P=<span class="hljs-number">131</span>;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>ll ans=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>a=a*a%M;<br>&#125;<br><span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">makehashr</span><span class="hljs-params">(string &amp;g,ll *r,<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=len+<span class="hljs-number">1</span>;i++)<br>&#123;<br>r[i]=r[i<span class="hljs-number">-1</span>]*P+g[i];<br>r[i]%=M;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">makehashl</span><span class="hljs-params">(string &amp;g,ll *r,<span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=len+<span class="hljs-number">1</span>;i++)<br>&#123;<br>r[i]=r[i<span class="hljs-number">-1</span>]*P+g[len+<span class="hljs-number">1</span>-i];<br>r[i]%=M;<br>&#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">gethash1</span><span class="hljs-params">(ll *p,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> (p[r]+M-(p[l<span class="hljs-number">-1</span>]*<span class="hljs-built_in">qm</span>(P,r-l+<span class="hljs-number">1</span>))%M)%M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string g;<br>ll ri[<span class="hljs-number">1003</span>]=&#123;<span class="hljs-number">0</span>&#125;,le[<span class="hljs-number">1003</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">getline</span>(cin,g);<br>g=<span class="hljs-string">&quot;a&quot;</span>+g;<br>g[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(&amp;g[<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">makehashr</span>(g,ri,len);<br><span class="hljs-built_in">makehashl</span>(g,le,len);<br><span class="hljs-comment">//printf(&quot;%d\n&quot;,len);</span><br><span class="hljs-type">int</span> mi=<span class="hljs-number">1</span>;<br><span class="hljs-comment">//for(int i=0;i&lt;=len+1;i++)printf(&quot;%d %d %d %d\n&quot;,ri[i],le[i],g[i],g[len+1-i]);</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=len;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+mi;j&lt;=len;j++)<br>&#123;<br><span class="hljs-comment">//printf(&quot;%d %d %d %d\n&quot;,i,j,gethash1(ri,i,j),gethash1(le,len-j+1,len-i+1));</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">gethash1</span>(ri,i,j)==<span class="hljs-built_in">gethash1</span>(le,len-j+<span class="hljs-number">1</span>,len-i+<span class="hljs-number">1</span>))mi=<span class="hljs-built_in">max</span>(mi,j-i+<span class="hljs-number">1</span>);<br>&#125;<br>cout&lt;&lt;mi;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-009-抢红包-25-分"><a class="markdownIt-Anchor" href="#l2-009-抢红包-25-分"></a> L2-009 抢红包 (25 分)</h2><p>结构体排序</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>第一反应是用map存盈亏情况，结果发现还需要依照若干依据排序，就结构体啦；</p><p>处理好cmp函数即可；</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pp</span>&#123;<br>    <span class="hljs-type">int</span> w;<br>    <span class="hljs-type">int</span> c;<br>    <span class="hljs-type">int</span> i;<br>&#125;p[<span class="hljs-number">10004</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> pp a,<span class="hljs-type">const</span> pp b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a.w==b.w)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a.c==b.c)<br>        &#123;<br>            <span class="hljs-keyword">return</span> a.i&lt;b.i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a.c&gt;b.c;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a.w&gt;b.w;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,t,g1,g2,i;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=t;i++)<br>    &#123;<br>        p[i].i=i;<br>        <span class="hljs-type">int</span> s=<span class="hljs-number">0</span>;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">while</span>(n--)<br>        &#123;<br>            cin&gt;&gt;g2&gt;&gt;g1;<br>            s+=g1;<br>            p[g2].w+=g1;<br>            p[g2].c++;<br>        &#125;<br>        p[i].w-=s;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(p+<span class="hljs-number">1</span>,p+t+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=t;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %.2lf\n&quot;</span>,p[i].i,p[i].w*<span class="hljs-number">1.0</span>/<span class="hljs-number">100</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-010-排座位-25-分"><a class="markdownIt-Anchor" href="#l2-010-排座位-25-分"></a> L2-010 排座位 (25 分)</h2><p>并查集</p><h4 id="思路-10"><a class="markdownIt-Anchor" href="#思路-10"></a> 思路</h4><p>依照题意，只需要使用并查集来存储朋友关系即可，敌人关系用map直接存就行；</p><p>需要注意的是<code>共同的朋友</code>指在他们的<strong>朋友网</strong>中有相同的人，而不是<strong>直接朋友</strong>中有相同的人；<br />总人数很少，可以直接遍历寻找；</p><h4 id="代码-10"><a class="markdownIt-Anchor" href="#代码-10"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;fr[<span class="hljs-number">102</span>];<br><span class="hljs-type">int</span> fa[<span class="hljs-number">102</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]==x)<span class="hljs-keyword">return</span> x;<br>    fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,k,a,b,o;<br>    <span class="hljs-type">int</span> i;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)fa[i]=i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b&gt;&gt;o;<br>        <span class="hljs-keyword">if</span>(o==<span class="hljs-number">1</span>)<br>        &#123;<br>            fa[<span class="hljs-built_in">find</span>(a)]=<span class="hljs-built_in">find</span>(b);<br>            fr[a][b]=<span class="hljs-number">1</span>;<br>            fr[b][a]=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            fr[a][b]=<span class="hljs-number">-1</span>;<br>            fr[b][a]=<span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=k;i++)<br>    &#123;<br>        cin&gt;&gt;a&gt;&gt;b;<br>        <span class="hljs-keyword">if</span>(fr[a][b]==<span class="hljs-number">-1</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> j;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=n;j++)<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(j)&amp;&amp;<span class="hljs-built_in">find</span>(b)==<span class="hljs-built_in">find</span>(j))<span class="hljs-keyword">break</span>;<span class="hljs-comment">//如果ab朋友网中有相同的j</span><br>            <span class="hljs-keyword">if</span>(j==n+<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No way\n&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK but...\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fr[a][b]==<span class="hljs-number">1</span>||<span class="hljs-built_in">find</span>(a)==<span class="hljs-built_in">find</span>(b))<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No problem\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(fr[a][b]==<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-011-玩转二叉树-25-分"><a class="markdownIt-Anchor" href="#l2-011-玩转二叉树-25-分"></a> L2-011 玩转二叉树 (25 分)</h2><p>树的遍历</p><h4 id="思路-11"><a class="markdownIt-Anchor" href="#思路-11"></a> 思路</h4><p>看到这道题就想起来前面的 树的遍历 一题，那个题的大体想法是用一个队列按层序线性存树，非常麻烦，需要单独dfs，此处要求输出镜像树，那么把每一层分别用栈存即可；</p><p>同理，对于上题，每层用队列分别存储即可；</p><p>对于任意子树的中序遍历，有，在前序遍历中位置最靠前的节点为该子树的根；</p><p><strong>已知的数据特性：</strong><br />——n!=0；<br />——节点编号&lt;=999，不保证节点编号&lt;=n；</p><p>段错误了好久，都因为是想当然…</p><h4 id="代码-11"><a class="markdownIt-Anchor" href="#代码-11"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> m[<span class="hljs-number">41</span>],inf[<span class="hljs-number">1000</span>];<span class="hljs-comment">//m存储中序遍历，inf存储节点在前序遍历的位置</span><br>stack&lt;<span class="hljs-type">int</span>&gt;stk[<span class="hljs-number">40</span>];<span class="hljs-comment">//层序遍历栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bdtr</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r,<span class="hljs-type">int</span> c)</span><span class="hljs-comment">//中序遍历数组区间[l,r]，层数c</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>    <span class="hljs-type">int</span> mi=<span class="hljs-number">40</span>,mk=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)<span class="hljs-comment">//找最前</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(inf[m[i]]&lt;mi)mi=inf[m[i]],mk=i;<br>    &#125;<br>    <span class="hljs-comment">//if(mk!=-1)//防呆设计，无必要</span><br>    &#123;<br>        stk[c].<span class="hljs-built_in">push</span>(m[mk]);<br>        <span class="hljs-keyword">if</span>(mk&gt;l)<span class="hljs-built_in">bdtr</span>(l,mk<span class="hljs-number">-1</span>,c+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(mk&lt;r)<span class="hljs-built_in">bdtr</span>(mk+<span class="hljs-number">1</span>,r,c+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,g;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m[i]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g),inf[g]=i;<br>    <span class="hljs-built_in">bdtr</span>(<span class="hljs-number">1</span>,n,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(stk[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>())<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,stk[<span class="hljs-number">0</span>].<span class="hljs-built_in">top</span>()),stk[<span class="hljs-number">0</span>].<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">39</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(stk[i].<span class="hljs-built_in">empty</span>())<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">while</span>(stk[i].<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,stk[i].<span class="hljs-built_in">top</span>());<br>            stk[i].<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="l2-012关于堆的判断25分"><a class="markdownIt-Anchor" href="#l2-012关于堆的判断25分"></a> L2-012关于堆的判断（25分）</h2><p>堆，字符串</p><h4 id="思路-12"><a class="markdownIt-Anchor" href="#思路-12"></a> 思路</h4><p>关于堆的基本原理，可以参考<a href="https://blog.csdn.net/qq_46653783/article/details/113146023">这里</a>；</p><p>堆的特性决定了节点 i 的父节点是 i/2，左子节点是 i*2，右子节点是 i*2+1，由此我们就可以快速判断节点间相互关系；</p><p>之后建堆，处理字符串即可；</p><h4 id="代码-12"><a class="markdownIt-Anchor" href="#代码-12"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> hp[<span class="hljs-number">1003</span>];<br><span class="hljs-type">int</span> c=<span class="hljs-number">1</span>;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<span class="hljs-comment">//mp存节点键值对节点编号的映射</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bdhp</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> now=c;<br>    c++;<br>    hp[now]=x;<span class="hljs-comment">//x加入堆尾</span><br>    <span class="hljs-keyword">while</span>(now&gt;<span class="hljs-number">1</span>&amp;&amp;hp[now]&lt;hp[now/<span class="hljs-number">2</span>])<span class="hljs-comment">//小根堆，上移</span><br>    &#123;<br>        <span class="hljs-built_in">swap</span>(hp[now],hp[now&gt;&gt;<span class="hljs-number">1</span>]);<br>        now&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,ge,i,a,b;<br>    string g;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;ge);<br>        <span class="hljs-built_in">bdhp</span>(ge);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;c;i++)mp[hp[i]]=i;<span class="hljs-comment">//构建映射</span><br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        cin&gt;&gt;a;<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">if</span>(g==<span class="hljs-string">&quot;and&quot;</span>)<br>        &#123;<br>            cin&gt;&gt;b;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,mp[a]/<span class="hljs-number">2</span>==mp[b]/<span class="hljs-number">2</span>?<span class="hljs-string">&#x27;T&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>);<br>            cin&gt;&gt;g;<br>            cin&gt;&gt;g;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cin&gt;&gt;g;<br>            cin&gt;&gt;g;<br>            <span class="hljs-keyword">if</span>(g==<span class="hljs-string">&quot;root&quot;</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,mp[a]==<span class="hljs-number">1</span>?<span class="hljs-string">&#x27;T&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g==<span class="hljs-string">&quot;parent&quot;</span>)<br>            &#123;<br>                cin&gt;&gt;g;<br>                cin&gt;&gt;b;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,mp[b]/<span class="hljs-number">2</span>==mp[a]?<span class="hljs-string">&#x27;T&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g==<span class="hljs-string">&quot;child&quot;</span>)<br>            &#123;<br>                cin&gt;&gt;g;<br>                cin&gt;&gt;b;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c\n&quot;</span>,mp[a]/<span class="hljs-number">2</span>==mp[b]?<span class="hljs-string">&#x27;T&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021年度训练联盟热身训练赛第五场（A B C E F G H I）</title>
    <link href="/2021.01-06/2021%E5%B9%B4%E5%BA%A6%E8%AE%AD%E7%BB%83%E8%81%94%E7%9B%9F%E7%83%AD%E8%BA%AB%E8%AE%AD%E7%BB%83%E8%B5%9B%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%88A%20B%20C%20E%20F%20G%20H%20I%EF%BC%89/"/>
    <url>/2021.01-06/2021%E5%B9%B4%E5%BA%A6%E8%AE%AD%E7%BB%83%E8%81%94%E7%9B%9F%E7%83%AD%E8%BA%AB%E8%AE%AD%E7%BB%83%E8%B5%9B%E7%AC%AC%E4%BA%94%E5%9C%BA%EF%BC%88A%20B%20C%20E%20F%20G%20H%20I%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/13926?headNav=www#question">比赛链接</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-binary-seating">A Binary Seating</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-cutting-corners">B Cutting Corners</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-ducky-debugging">C Ducky Debugging</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#e-figure-skating">E Figure Skating</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#f-group-project">F Group Project</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#g-human-pyramid">G Human Pyramid</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#h-in-place-sorting">H In-place Sorting</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#i-jam-packed">I Jam-packed</a><ul><li><a href="#%E4%BA%8C%E5%88%86%E8%A7%A3%E6%B3%95">二分解法</a><ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#o1%E8%A7%A3%E6%B3%95">O(1)解法</a><ul><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>前面几道题还是比较快乐的，后面就开始日常罚坐了；</p><h2 id="a-binary-seating"><a class="markdownIt-Anchor" href="#a-binary-seating"></a> A Binary Seating</h2><p>概率</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>求离场时间的期望；</p><p>离场时间<strong>只</strong>与本考场考试用时最长的学生有关;<br />假设参加考试共<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个学生，按考试用时降序排列为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>t</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>t</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">t_1,t_2,...,t_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>;</p><p>则考试总用时为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">t_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的概率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">1/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">2</span></span></span></span>;<br />考试总用时为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">t_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的情况为一号考生未选择此考场，二号考生选择了此考场，概率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">1/4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">4</span></span></span></span>;<br />以此类推，考试总用时为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">t_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的概率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mn>8</mn></mrow><annotation encoding="application/x-tex">1/8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord">8</span></span></span></span>，考试总用时为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">t_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的概率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">1/2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span>；</p><p>所以期望为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><msub><mi>t</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">\sum_{i=1}^nt_i/2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.124374em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,a[<span class="hljs-number">45</span>];<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br><span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br><span class="hljs-type">double</span> s=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n;i&gt;=<span class="hljs-number">1</span>;i--)s+=<span class="hljs-number">1.0</span>*a[i]/<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,n-i+<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.5lf&quot;</span>,s);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-cutting-corners"><a class="markdownIt-Anchor" href="#b-cutting-corners"></a> B Cutting Corners</h2><p>几何</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>题目要求：对于给定的w与h，输出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo>+</mo><mi>h</mi><mo>−</mo><msqrt><mrow><msup><mi>w</mi><mn>2</mn></msup><mo>+</mo><msup><mi>h</mi><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">w+h-\sqrt{w^2+h^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.12661100000000003em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span>;</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> w,h;<br>cin&gt;&gt;w&gt;&gt;h;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.9lf&quot;</span>,<span class="hljs-number">1.0</span>*w+h-<span class="hljs-built_in">sqrt</span>(w*w+h*h));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-ducky-debugging"><a class="markdownIt-Anchor" href="#c-ducky-debugging"></a> C Ducky Debugging</h2><p>字符串</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>~~~</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string c;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">getline</span>(cin,c);<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(c.<span class="hljs-built_in">c_str</span>(),<span class="hljs-string">&quot;I quacked the code!&quot;</span>))<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[c.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;.&#x27;</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*Nod*\n&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c[c.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;?&#x27;</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Quack!\n&quot;</span>);<br>&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-figure-skating"><a class="markdownIt-Anchor" href="#e-figure-skating"></a> E Figure Skating</h2><p>字符串</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>map记录字符串对初始位置的映射，第二轮循环中比较即可；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>map&lt;string,<span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string g;<br><span class="hljs-type">int</span> n;<br>cin&gt;&gt;n;<br>    <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">getline</span>(cin,g);<br>mp[g]=i;<br>&#125;<br><span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;<br>string mg;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">getline</span>(cin,g);<br><span class="hljs-keyword">if</span>(mp[g]-i&gt;m)<br>&#123;<br>m=mp[g]-i;<br>mg=g;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(m)<br>&#123;<br>cout&lt;&lt;mg;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;suspicious&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-group-project"><a class="markdownIt-Anchor" href="#f-group-project"></a> F Group Project</h2><p>并查集扩展域</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>用并查集及扩展域存储同类关系和异类关系；</p><p><strong>介于数据并没有保证可以用唯一方法分出两个班，这里用并查集产生的结果只是一种可能的区分方案，但与结果最大的分配方案通过下面的特判后结果相同</strong></p><p>有一种情况需要特判：<br />如果两班均是奇数个人，且有一班中某人的敌人数小于另一班人数，则说明此人可以与另一班某同学组组；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>vector&lt;<span class="hljs-type">int</span>&gt; vec,tn[<span class="hljs-number">100005</span>];<span class="hljs-comment">//vec存一班的同学编号，tn[i]存储i号同学的敌人</span><br><span class="hljs-type">int</span> fa[<span class="hljs-number">200005</span>];<span class="hljs-comment">//扩展域并查集</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//此题中，find(x)的返回值为1或0</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(fa[x]!=x)<span class="hljs-keyword">return</span>  fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> a,b;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)fa[i]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br><span class="hljs-keyword">if</span>(a&gt;b)<span class="hljs-built_in">swap</span>(a,b);<br>tn[a].<span class="hljs-built_in">push_back</span>(b);<br>tn[b].<span class="hljs-built_in">push_back</span>(a);<br>fa[b]=a+n;<br>fa[b+n]=a;<br>&#125;<br><span class="hljs-type">int</span> s,l;s=l=<span class="hljs-number">0</span>;<span class="hljs-comment">//l与s存储两班人数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(i))l++;<br><span class="hljs-keyword">else</span> s++,vec.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><span class="hljs-keyword">if</span>(s&amp;<span class="hljs-number">1</span>&amp;&amp;l&amp;<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;vec.<span class="hljs-built_in">size</span>();i++)<br><span class="hljs-keyword">if</span>(tn[vec[i]].<span class="hljs-built_in">size</span>()!=l)&#123;s--,l++;<span class="hljs-keyword">break</span>;&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,s/<span class="hljs-number">2</span>+l/<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-human-pyramid"><a class="markdownIt-Anchor" href="#g-human-pyramid"></a> G Human Pyramid</h2><p>DP</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>感觉是dp题，但是用了好几个dp方程都没有找到合适的解法，最后参考了<a href="https://blog.csdn.net/ljw0925/article/details/115601582">这里</a>；</p><p>我们将整个金字塔向左推至左对齐后，即可得每一名S，其正下与右下均为S；<br />也就是说如果此时的从左到右第 p 列至少有 x 名S的话，第 p+1 列至少有x-1名；</p><p>建立dp方程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mi>k</mi><mo>&lt;</mo><mo>=</mo><msqrt><mrow><mn>2</mn><mo>∗</mo><mi>j</mi></mrow></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a[i][j][k]=a[i][j][k+1]+a[i-1][j-k][k-1](k&lt;=\sqrt{2*j})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.24em;vertical-align:-0.27358499999999997em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.966415em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.9264150000000004em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z M1001 80H40000v40H1012z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27358499999999997em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>此处 i 为金字塔宽度，一共使用 j 名S，最左列至少有 k 名S；<br />第一项为 左列至少有 k 名s时，包含左列至少有 k+1 名S的情况；<br />第二项为 考虑次左列人数至少为 最左列人数-1 的情况<br />（注：最大左列人数可以近似为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mrow><mn>2</mn><mo>∗</mo><mi>j</mi></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{2*j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.22245999999999988em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8175400000000002em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span><span style="top:-2.77754em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.22245999999999988em;"><span></span></span></span></span></span></span></span></span>）；</p><p>最后特殊处理，避免k-1&lt;0即可；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>ll a[<span class="hljs-number">102</span>][<span class="hljs-number">5053</span>][<span class="hljs-number">102</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,r,i,j,k,l;<br>cin&gt;&gt;n&gt;&gt;r;<br>a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=r;j++)<br>&#123;<br>            <span class="hljs-type">int</span> sq=<span class="hljs-built_in">sqrt</span>(j&lt;&lt;<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span>(k=sq;k&gt;=<span class="hljs-number">0</span>;k--)<br>&#123;<br>a[i][j][k]=a[i][j][k+<span class="hljs-number">1</span>]+a[i<span class="hljs-number">-1</span>][j-k][<span class="hljs-built_in">max</span>(k<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>)];<br>a[i][j][k]%=M;<br><span class="hljs-comment">//printf(&quot;a[%d][%d][%d]=%lld\n&quot;,i,j,k,a[i][j][k]);</span><br>&#125;<br>&#125;<br>&#125;<br>cout&lt;&lt;a[n][r][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-in-place-sorting"><a class="markdownIt-Anchor" href="#h-in-place-sorting"></a> H In-place Sorting</h2><p>贪心</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>我们可以制定一下贪心策略：</p><p>对于第一个数，将所有9变为6，使其尽可能小；<br />对于其余数，我们先把其所有6均变为9：<br />——如果此时此数仍小于上数，则排序失败；<br />——如果此时此数恰好等于上数，则直接处理下一个数；<br />——如果此时此数大于上数，则从高位（1e18）到低位（1e0），将所有能转换为6的9（转换为6后此数仍大于上数的9）转换为6；<br />（如果从低位到高位，则可能导致某些本可以转换为6的较高位无法转换，详见样例二）</p><p>注：pow返回值类型为double，与long long转换可能会出现问题；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>map&lt;string,<span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ll n,m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10004</span>][<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>ll g,num[<span class="hljs-number">10004</span>],ten[<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">18</span>;i++)ten[i]=<span class="hljs-number">10</span>*ten[i<span class="hljs-number">-1</span>];<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br>cin&gt;&gt;g;<br>num[i]=g;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">18</span>;g/=<span class="hljs-number">10</span>,j++)<br>a[i][j]=g%<span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">18</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>&#123;<br><span class="hljs-keyword">if</span>(a[<span class="hljs-number">1</span>][i]==<span class="hljs-number">9</span>)a[<span class="hljs-number">1</span>][i]=<span class="hljs-number">6</span>,num[<span class="hljs-number">1</span>]-=<span class="hljs-number">3</span>*ten[i];<br>&#125;<br><span class="hljs-type">int</span> f=<span class="hljs-number">1</span>,b=<span class="hljs-number">0</span>,s;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n&amp;&amp;f;i++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">18</span>;j++)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">6</span>)<br>&#123;<br>num[i]+=<span class="hljs-number">3</span>*ten[j];<br>a[i][j]=<span class="hljs-number">9</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(num[i]==num[i<span class="hljs-number">-1</span>])<span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num[i]&lt;num[i<span class="hljs-number">-1</span>])f=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">18</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i][j]==<span class="hljs-number">9</span>&amp;&amp;num[i]<span class="hljs-number">-3</span>*ten[j]&gt;=num[i<span class="hljs-number">-1</span>])<br>&#123;<br>num[i]-=<span class="hljs-number">3</span>*ten[j];<br>a[i][j]=<span class="hljs-number">6</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> pf=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(f)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;possible\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,num[i]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;impossible&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-jam-packed"><a class="markdownIt-Anchor" href="#i-jam-packed"></a> I Jam-packed</h2><p>数学</p><h3 id="二分解法"><a class="markdownIt-Anchor" href="#二分解法"></a> 二分解法</h3><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>对于二分出的mid，如果每箱装mid个，剩余的可以装入除一个箱子外（该箱子装mid个）其余每一个箱子的剩余部分，则说明答案大于等于mid；</p><p><em>此处感谢大佬 qq_30106825 的提醒，错误已更正</em></p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ll n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br>ll l=<span class="hljs-number">1</span>,r=m,mid;<br><span class="hljs-keyword">while</span>(l&lt;r)<br>    &#123;<br>        mid=l+r+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(n%mid&lt;=(m-mid)*(n/mid))l=mid;<br>        <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="o1解法"><a class="markdownIt-Anchor" href="#o1解法"></a> O(1)解法</h3><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>如果n能被m整除，则可以每箱装m个；<br />否则，则需要n/m+1个箱子，如果我们将瓶子浮点化，则每一个箱子平均装n/(⌊n/m⌋+1)（浮点除法）个瓶子，而瓶子数量是离散的，则n/(n/m+1)（整数除法）即为装瓶数最小的箱子的装瓶数；</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>map&lt;string,<span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>ll n,m;<br>cin&gt;&gt;n&gt;&gt;m;<br><span class="hljs-keyword">if</span>(n%m==<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,m);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,n/(n/m+<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 压缩编码 一题的思路+解法（区间DP）</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E8%A7%A3%E6%B3%95%EF%BC%88%E5%8C%BA%E9%97%B4DP%EF%BC%89/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E8%A7%A3%E6%B3%95%EF%BC%88%E5%8C%BA%E9%97%B4DP%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.acwing.com/problem/content/3243/">Acwing.3240 压缩编码</a></p><blockquote><p>题目描述</p><blockquote><p>给定一段文字，已知单词 a1,a2,…,an 出现的频率分别 t1,t2,…,tn。<br />可以用 01 串给这些单词编码，即将每个单词与一个 01 串对应，使得任何一个单词的编码（对应的 01 串）不是另一个单词编码的前缀，这种编码称为前缀码。<br />使用前缀码编码一段文字是指将这段文字中的每个单词依次对应到其编码。<br />一段文字经过前缀编码后的长度为：<br />L=a1 的编码长度 ×t1+a2 的编码长度 ×t2+…+an 的编码长度 ×tn。<br />定义一个前缀编码为字典序编码，指对于 1≤i&lt;n，ai 的编码（对应的 01 串）的字典序在 ai+1 编码之前，即 a1,a2,…,an 的编码是按字典序升序排列的。<br />例如，文字 E A E C D E B C C E C B D B E 中， 5 个单词 A、B、C、D、E 出现的频率分别为 1,3,4,2,5，则一种可行的编码方案是 A:000, B:001, C:01, D:10, E:11，对应的编码后的 01 串为 1100011011011001010111010011000111，对应的长度 L 为 3×1+3×3+2×4+2×2+2×5=34。<br />在这个例子中，如果使用哈夫曼(Huffman)编码，对应的编码方案是 A:000, B:01, C:10, D:001, E:11，虽然最终文字编码后的总长度只有 33，但是这个编码不满足字典序编码的性质，比如 C 的编码的字典序不在 D 的编码之前。<br />在这个例子中，有些人可能会想的另一个字典序编码是 A:000, B:001, C:010, D:011, E:1，编码后的文字长度为 35。<br />请找出一个字典序编码，使得文字经过编码后的长度 L 最小。<br />在输出时，你只需要输出最小的长度 L，而不需要输出具体的方案。<br />在上面的例子中，最小的长度 L 为 34。</p></blockquote><p>输入描述</p><blockquote><p>输入的第一行包含一个整数 n，表示单词的数量。<br />第二行包含 n 个整数，用空格分隔，分别表示 a1,a2,…,an 出现的频率，即 t1,t2,…,tn。<br />请注意 a1,a2,…,an 具体是什么单词并不影响本题的解，所以没有输入 a1,a2,…,an。</p></blockquote><p>输出描述</p><blockquote><p>输出一个整数，表示文字经过编码后的长度 L 的最小值。</p></blockquote><p>数据范围</p><blockquote><p>对于 30% 的评测用例，1&lt;n≤10，1≤ti≤20；<br />对于 60% 的评测用例，1&lt;n≤100，1≤ti≤100；<br />对于 100% 的评测用例，1&lt;n≤1000，1≤ti≤10000。</p></blockquote><p>输入样例1</p><blockquote><p>5<br />1 3 4 2 5</p></blockquote><p>输出样例1</p><blockquote><p>34</p></blockquote><p>时空限制</p><blockquote><p>3s / 256MB</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>参考了<a href="https://www.acwing.com/solution/content/36694/">大佬的题解</a>；<br />关于哈夫曼树可以参考<a href="https://blog.csdn.net/qq_29519041/article/details/81428934">这里</a>。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>若使用哈夫曼树，则<br /><img src="https://s2.loli.net/2022/08/02/OKdm6qYPMGRElrj.png" alt="在这里插入图片描述" /><br />（图源题解链）<br />若使用字典序升序编码，则<br /><img src="https://s2.loli.net/2022/08/02/Yb8csGEfxSIH4uT.png" alt="在这里插入图片描述" /><br />（图源题解链）<br />前者每次合并代价最小的两节点，而后者由于字典序的要求，每次只能合并相邻且代价最小的两节点。</p><p>这样我们便可以使用区间DP来求解最小值；</p><p>每次合并，合并后编、码总长度即增加了合并量；</p><p>建立区间dp方程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>r</mi><mo stretchy="false">]</mo><mo>+</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></munderover><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>k</mi><mo>∈</mo><mo stretchy="false">[</mo><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[l][r]=min(dp[l][k]+dp[k+1][r]+\sum_{i=l}^ra[i]),(k\in[l,r])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.9535100000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>对于求和项，我们可以用前缀和来解决；</p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，时间限制3s，所以问题不大。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,i,j,a[<span class="hljs-number">1003</span>],root=<span class="hljs-number">0</span>,dp[<span class="hljs-number">1003</span>][<span class="hljs-number">1003</span>];<br>stack&lt;<span class="hljs-type">int</span>&gt;ls;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]),a[i]+=a[i<span class="hljs-number">-1</span>];<span class="hljs-comment">//接收，构建前缀和</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; ++len)<span class="hljs-comment">//遍历区间长</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> l = <span class="hljs-number">1</span>; l + len - <span class="hljs-number">1</span> &lt;= n; ++l)<span class="hljs-comment">//遍历左端点</span><br>&#123;<br>            <span class="hljs-type">int</span> r = l + len - <span class="hljs-number">1</span>;<span class="hljs-comment">//计算右端点</span><br>            dp[l][r] = <span class="hljs-number">1e8</span>;<span class="hljs-comment">//初始化</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l; k &lt;= r; ++k)<span class="hljs-comment">//遍历断点</span><br>&#123;<br>                dp[l][r] = <span class="hljs-built_in">min</span>(dp[l][r], dp[l][k] + dp[k + <span class="hljs-number">1</span>][r] + a[r] - a[l - <span class="hljs-number">1</span>]);<span class="hljs-comment">//更新min</span><br>            &#125;<br>    &#125;<br>cout&lt;&lt;dp[<span class="hljs-number">1</span>][n];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 星空之夜 一题的思路+代码（连通块判重）</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E6%98%9F%E7%A9%BA%E4%B9%8B%E5%A4%9C%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81%EF%BC%88%E8%BF%9E%E9%80%9A%E5%9D%97%E5%88%A4%E9%87%8D%EF%BC%89/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E6%98%9F%E7%A9%BA%E4%B9%8B%E5%A4%9C%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81%EF%BC%88%E8%BF%9E%E9%80%9A%E5%9D%97%E5%88%A4%E9%87%8D%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.acwing.com/problem/content/1404/">Acwing.1402 星空之夜</a></p><blockquote><p>题目描述</p><blockquote><p>夜空深处，闪亮的星星以星群的形式出现在人们眼中，形态万千。<br />一个星群是指一组非空的在水平，垂直或对角线方向相邻的星星的集合。<br />一个星群不能是一个更大星群的一部分。<br />星群可能是相似的。<br />如果两个星群的形状、包含星星的数目相同，那么无论它们的朝向如何，都认为它们是相似的。<br />通常星群可能有 8 种朝向，如下图所示：<br /><img src="https://img-blog.csdnimg.cn/img_convert/f09a5db94d2a19bcc14ba95ae3fa58d8.gif" alt="在这里插入图片描述" /><br />现在，我们用一个二维 01 矩阵来表示夜空，如果一个位置上的数字是 1，那么说明这个位置上有一个星星，否则这个位置上的数字应该是 0。<br />给定一个夜空二维矩阵，请你将其中的所有星群用小写字母进行标记，标记时相似星群用同一字母，不相似星群用不同字母。<br />标注星群就是指将星群中所有的 1 替换为小写字母。</p></blockquote><p>输入描述</p><blockquote><p>第一行包含一个整数 W，表示矩阵宽度。<br />第二行包含一个整数 H，表示矩阵高度。<br />接下来 H 行，每行包含一个长度为 W 的 01 序列，用来描述整个夜空矩阵。</p></blockquote><p>输出描述</p><blockquote><p>输出标记完所有星群后的二维矩阵。<br />用小写字母标记星群的方法很多，我们将整个输出读取为一个字符串，能够使得这个字符串字典序最小的标记方式，就是我们想要的标记方式。<br />输出这个标记方式标出的最终二维矩阵。</p></blockquote><p>数据范围</p><blockquote><p>0≤W,H≤100,<br />0≤ 星群数量 ≤500,<br />0≤ 不相似星群数量 ≤26,<br />1≤ 星群中星星的数量 ≤160</p></blockquote><p>输入样例1</p><blockquote><p>23<br />15<br />10001000000000010000000<br />01111100011111000101101<br />01000000010001000111111<br />00000000010101000101111<br />00000111010001000000000<br />00001001011111000000000<br />10000001000000000000000<br />00101000000111110010000<br />00001000000100010011111<br />00000001110101010100010<br />00000100110100010000000<br />00010001110111110000000<br />00100001110000000100000<br />00001000100001000100101<br />00000001110001000111000</p></blockquote><p>输出样例1</p><blockquote><p>a000a0000000000b0000000<br />0aaaaa000ccccc000d0dd0d<br />0a0000000c000c000dddddd<br />000000000c0b0c000d0dddd<br />00000eee0c000c000000000<br />0000e00e0ccccc000000000<br />b000000e000000000000000<br />00b0f000000ccccc00a0000<br />0000f000000c000c00aaaaa<br />0000000ddd0c0b0c0a000a0<br />00000b00dd0c000c0000000<br />000g000ddd0ccccc0000000<br />00g0000ddd0000000e00000<br />0000b000d0000f000e00e0b<br />0000000ddd000f000eee000</p></blockquote><p>样例解释</p><blockquote><p>样例对应的星空图如下：<br /><img src="https://img-blog.csdnimg.cn/img_convert/29d2a3c0064504156a4ac456f2f09ec4.gif" alt="在这里插入图片描述" /><br />答案对应的标记后星空图如下：<br /><img src="https://img-blog.csdnimg.cn/img_convert/ffd194830ff946c37e8d9c5bbc63580c.gif" alt="在这里插入图片描述" /></p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p><a href="https://blog.csdn.net/qq_39354847/article/details/113359634">sl大佬的总结</a></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>连通块判重的主要目的是将连通块的形状转换成哈希值，在这里，我们选择的策略为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>a</mi><mi>s</mi><mi>h</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msqrt><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>j</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mi mathvariant="normal">（</mi><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>y</mi><mi>j</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">hash=\sum^n_{i=1}\sum^n_{j=1}\sqrt{(x_i-x_j)^2+（y_i-y_j)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0651740000000007em;vertical-align:-1.4137769999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000007em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.265821em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord cjk_fallback">（</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.225821em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10zM1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.574179em;"><span></span></span></span></span></span></span></span></span></span></p><p>即同一连通块内的所有点 与其余所有点的 几何距离之和；</p><p>再通过搭配使用vector（而不是queue）的bfs实现当前连通块所有坐标点的存储。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>,N=<span class="hljs-number">502</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>],w,h,di[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;,dj[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">double</span> alp[<span class="hljs-number">27</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; x)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt;vec;<span class="hljs-comment">//存储所有点</span><br>    vec.<span class="hljs-built_in">push_back</span>(x);<br>    a[x.first][x.second]=<span class="hljs-string">&#x27;0&#x27;</span>;<span class="hljs-comment">//加入后打标记</span><br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j;<span class="hljs-comment">//i是标记目前遍历到vec的第几项的指针</span><br>    <span class="hljs-keyword">while</span>(i!=vec.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; now;<br>        now=vec[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">8</span>;k++)<span class="hljs-comment">//8个方向</span><br>        &#123;<br>            <span class="hljs-type">int</span> ni=now.first+di[k],nj=now.second+dj[k];<br>            <span class="hljs-keyword">if</span>(ni&gt;=<span class="hljs-number">0</span>&amp;&amp;ni&lt;h&amp;&amp;nj&gt;=<span class="hljs-number">0</span>&amp;&amp;nj&lt;w&amp;&amp;a[ni][nj]-<span class="hljs-string">&#x27;0&#x27;</span>==<span class="hljs-number">1</span>)<span class="hljs-comment">//合法且可行</span><br>                vec.<span class="hljs-built_in">push_back</span>(&#123;ni,nj&#125;),a[ni][nj]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        i++;<br>    &#125;<br>    <span class="hljs-type">double</span> all=<span class="hljs-number">0</span>;<span class="hljs-comment">//all存储哈希值</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;vec.<span class="hljs-built_in">size</span>();i++)<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;vec.<span class="hljs-built_in">size</span>();j++)<br>        all+=<span class="hljs-built_in">sqrt</span>((<span class="hljs-type">double</span>)(vec[i].first-vec[j].first)*(vec[i].first-vec[j].first)<br>            +(<span class="hljs-type">double</span>)(vec[i].second-vec[j].second)*(vec[i].second-vec[j].second));<br>    all+=<span class="hljs-number">13</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    如果这里没有+=13，若哈希值为0，匹配后，后序连通块则无法区分该字母是新字母还是已匹配的字母；</span><br><span class="hljs-comment">    理论上+=1也可以，仅作为与0的区别</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">//printf(&quot;%lf\n&quot;,all);</span><br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++)<span class="hljs-comment">//寻找匹配的字母，如果没有，返回的即是下一个空字母</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(alp[j]<span class="hljs-number">-0</span>)&lt;=<span class="hljs-number">0.00001</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(alp[j]-all)&lt;=<span class="hljs-number">0.00001</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    alp[j]=all;<span class="hljs-comment">//把字母标记上哈希值</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;vec.<span class="hljs-built_in">size</span>();i++)a[vec[i].first][vec[i].second]=<span class="hljs-string">&#x27;a&#x27;</span>+j;<span class="hljs-comment">//刷字符串</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;w&gt;&gt;h;<br>    <span class="hljs-type">int</span> i,j;<br>    string g;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;h;i++)<br>    &#123;<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;w;j++)a[i][j]=g[j];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;h;i++)<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;w;j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i][j]-<span class="hljs-string">&#x27;0&#x27;</span>==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">bfs</span>(&#123;i,j&#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;h;i++)<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;w;j++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c%s&quot;</span>,a[i][j],(j==w<span class="hljs-number">-1</span>)?<span class="hljs-string">&quot;\n&quot;</span>:<span class="hljs-string">&quot;\0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>图与树</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 牛异或 一题的思路+代码（01字典树的构建与查询）</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%89%9B%E5%BC%82%E6%88%96%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81%EF%BC%8801%E5%AD%97%E5%85%B8%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E4%B8%8E%E6%9F%A5%E8%AF%A2%EF%BC%89/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%89%9B%E5%BC%82%E6%88%96%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81%EF%BC%8801%E5%AD%97%E5%85%B8%E6%A0%91%E7%9A%84%E6%9E%84%E5%BB%BA%E4%B8%8E%E6%9F%A5%E8%AF%A2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.acwing.com/problem/content/description/1416/">Acwing 1414.牛异或</a>（usaco training 6.1）</p><blockquote><p>题目描述</p><blockquote><p>农夫约翰在给他的奶牛们喂食时遇到了一个问题。<br />他共有 N 头奶牛，编号 1∼N。<br />每次喂食前，这 N 头奶牛会按照 1∼N 的顺序站成一排。<br />此外，每头奶牛都被分配了一个可能不唯一的整数。<br />那么所有被分配的整数就形成了一个长度为 N 的整数序列。<br />请你在该整数序列中找出一个连续的非空子序列，使得子序列中元素的异或和能够最大。<br />如果存在多个这样的序列，那么选择序列末端整数对应的奶牛编号更小的那个序列。<br />如果仍然存在多个可选的序列，那么选择长度最短的那个序列。</p></blockquote><p>输入描述</p><blockquote><p>第一行包含整数 N。<br />第 2∼N+1 行，每行包含一个整数，其中第 i 行的整数表示编号为 i−1 的牛被分配的整数值。</p></blockquote><p>输出描述</p><blockquote><p>输出三个整数，分别表示最大的异或和，所选序列首端整数对应的奶牛编号，所选序列末端整数对应的奶牛编号。</p></blockquote><p>数据范围</p><blockquote><p>1≤N≤10<sup>5</sup> ，<br />分配给奶牛的整数的范围是 [0,2<sup>21</sup>−1]。</p></blockquote><p>输入样例1</p><blockquote><p>5<br />1<br />0<br />5<br />4<br />2</p></blockquote><p>输出样例1</p><blockquote><p>6 4 5</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>关于字典树，网上的介绍已经很详细了（可以参照<a href="https://blog.csdn.net/qq_41117236/article/details/98619136">这里</a>），我在这里补充一点，也是自己遇到过的困难：<br />对于具体的存储过程，实际上是将树状结构通过“路标”存储为线性结构；<br /><img src="https://img-blog.csdnimg.cn/20210401094957816.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Rhbl9ZdXU=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><br />（图源上链）<br /><img src="https://s2.loli.net/2022/08/02/XUmsfryAgMpvKdF.png" alt="在这里插入图片描述" /></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>由于异或运算有着 a^b^a=b 的性质，所以我们可以使用类似于前缀和的结构快速获取连续区间的异或值。</p><p>如果对于每一个右端点遍历左端点，时间复杂度即为 O(n<sup>2</sup>)，会TLE；</p><p>所以我们需要使用01字典树存储前面 i 个前缀，将每一个新的前缀作为右端点，搜索异或值最大的左端点，并更新答案，时间复杂度为 O(nlog2(21))；</p><p>值得提出的是，在这道题中，每一个节点代表的具体值不需要在其节点内部特殊记录。由于指向每一个节点的节点有且只有一个，该节点的值即为指向其的“路标”对应的值。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录节点开到了哪里</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">trietree</span><br>&#123;<br>    <span class="hljs-type">int</span> son[<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> end=<span class="hljs-number">-1</span>;<br>&#125;tte[<span class="hljs-number">800005</span>];<span class="hljs-comment">//节点数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">btre</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> ni)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,index=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">21</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-type">int</span> n=(x&gt;&gt;i)&amp;(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(tte[index].son[n])<span class="hljs-comment">//如果此枝被定义过</span><br>        &#123;<br>            index=tte[index].son[n];<span class="hljs-comment">//顺至此枝</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//如果此枝未被定义</span><br>        &#123;<br>            tte[index].son[n]=++idx;<span class="hljs-comment">//定义</span><br>            index=tte[index].son[n];<span class="hljs-comment">//顺至此枝</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(!i)tte[index].end=ni;<span class="hljs-comment">//给末尾覆盖标记</span><br>    &#125;<br>&#125;<br><span class="hljs-function">pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; <span class="hljs-title">checktree</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,ans=<span class="hljs-number">0</span>,index=<span class="hljs-number">0</span>,end=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">21</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-type">int</span> n=(x&gt;&gt;i)&amp;(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(tte[index].son[!n])<span class="hljs-comment">//如果反向枝被定义过</span><br>        &#123;<br>            ans+=(<span class="hljs-number">1</span>&lt;&lt;i);<span class="hljs-comment">//printf(&quot;1&quot;);//异或值更新</span><br>            index=tte[index].son[!n];<span class="hljs-comment">//顺至反向枝</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> index=tte[index].son[n];<span class="hljs-comment">//printf(&quot;0&quot;);//如果反向枝没被定义过，异或值当为即为0，不需要特殊更新，顺至同向枝</span><br>    &#125;<br>    end=tte[index].end;<span class="hljs-comment">//获取对应编号</span><br>    <span class="hljs-keyword">return</span> &#123;ans,end&#125;;<span class="hljs-comment">//返回&#123;异或值，起始编号&#125;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i,six=<span class="hljs-number">0</span>,g;<span class="hljs-comment">//a[100005]=&#123;0&#125;;</span><br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">btre</span>(six,<span class="hljs-number">0</span>);<span class="hljs-comment">//对前缀0建树</span><br>    <span class="hljs-type">int</span> bgn=<span class="hljs-number">1</span>,end=<span class="hljs-number">1</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g);<br>        six^=g;<span class="hljs-comment">//获取异或前缀值</span><br>        pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; z=<span class="hljs-built_in">checktree</span>(six);<br>        <span class="hljs-built_in">btre</span>(six,i);<span class="hljs-comment">//更新树</span><br>        <span class="hljs-keyword">if</span>(z.first&gt;ans)<br>        &#123;<br>            ans=z.first,bgn=z.second+<span class="hljs-number">1</span>,end=i;<span class="hljs-comment">//更新</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,ans,bgn,end);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>字典树需要注意的细节蛮多的</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>图与树</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 幂次方 一题的思路+代码（递归）</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E5%B9%82%E6%AC%A1%E6%96%B9%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81%EF%BC%88%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E5%B9%82%E6%AC%A1%E6%96%B9%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81%EF%BC%88%E9%80%92%E5%BD%92%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.luogu.com.cn/problem/P1010">洛谷 P1010 [NOIP1998 普及组] 幂次方</a></p><blockquote><p>题目描述</p><blockquote><p>任何一个正整数都可以用2的幂次方表示。例如<br />137=2<sup>7</sup>+2<sup>3</sup>+2<sup>0</sup><br />由此可知，137可表示为：<br />2(7)+2(3)+2(0)<br />而7又可以表示为：2(2)+2+2(0)<br />3可以表示为：2+2(0)<br />因此137最终表示为：<br />2(2(2)+2+2(0))+2(2+2(0))+2(0)</p></blockquote><p>输入描述</p><blockquote><p>一个正整数n(n≤20000)。</p></blockquote><p>输出描述</p><blockquote><p>符合约定的n的0,2表示(在表示中不能有空格)</p></blockquote><p>输入样例1</p><blockquote><p>1315</p></blockquote><p>输出样例1</p><blockquote><p>2(2(2+2(0))+2)+2(2(2+2(0)))+2(2(2)+2(0))+2+2(0)</p></blockquote><p>输入样例2</p><blockquote><p>137</p></blockquote><p>输出样例2</p><blockquote><p>2(2(2)+2+2(0))+2(2+2(0))+2(0)</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>\</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题要用递归来处理：</p><p>对于每一个大于2的数，都需要通过二进制将其拆为二的幂次和，对于每一个幂次再进行递归处理；</p><p>通过构建 tr[i] 来存储 i 的表达式；</p><p>通过处理二进制数和构建幂次栈来按顺序存储该数内含有2的哪些幂次，方便接下来的递归与构建字符串。</p><p>（对于<code>(13)D,(1101)B</code>，其幂次栈即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">{</mo><mn>3</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\{3,2,0\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">}</span></span></span></span>，代表<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>13</mn><mo>=</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><msup><mn>2</mn><mn>1</mn></msup></mrow><annotation encoding="application/x-tex">13=2^3+2^2+2^1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span> ）</p><p>还有一部分内容写在注释里了，方便理解。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>string tr[<span class="hljs-number">20004</span>];<span class="hljs-comment">//tr[i]存储i的表达式</span><br><br><span class="hljs-function">string <span class="hljs-title">getst</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(tr[n][<span class="hljs-number">0</span>])<span class="hljs-keyword">return</span> tr[n];<span class="hljs-comment">//如果构建过串，直接输出</span><br>    stack&lt;<span class="hljs-type">int</span>&gt;stk;<span class="hljs-comment">//构建幂次栈</span><br>    <span class="hljs-type">int</span> c=<span class="hljs-number">0</span>,z=n;<span class="hljs-comment">//z为n的一个拷贝，用于二进制处理；c记录处理到的二进制位数</span><br>    <span class="hljs-keyword">while</span>(z)<span class="hljs-comment">//构建幂次栈</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(z&amp;<span class="hljs-number">1</span>)stk.<span class="hljs-built_in">push</span>(c);<br>        c++;<br>        z&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(!stk.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> z=stk.<span class="hljs-built_in">top</span>();<br>        stk.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span>(z!=<span class="hljs-number">1</span>)<span class="hljs-comment">//对于一般位，进行递归处理</span><br>        &#123;<br>            tr[n]+=<span class="hljs-string">&quot;2(&quot;</span>;<br>            tr[n]+=<span class="hljs-built_in">getst</span>(z);<span class="hljs-comment">//递归</span><br>            tr[n]+=<span class="hljs-string">&#x27;)&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> tr[n]+=<span class="hljs-string">&#x27;2&#x27;</span>;<span class="hljs-comment">//如果n的二进制第1位为1，此时z=1，对字符串的贡献仅为‘2’</span><br>        <span class="hljs-keyword">if</span>(!stk.<span class="hljs-built_in">empty</span>())tr[n]+=<span class="hljs-string">&#x27;+&#x27;</span>;<span class="hljs-comment">//如果不是最右位，就添一个‘+’</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> tr[n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    tr[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;0&#x27;</span>,tr[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;1&quot;</span>,tr[<span class="hljs-number">2</span>]=<span class="hljs-string">&quot;2&quot;</span>,tr[<span class="hljs-number">4</span>]=<span class="hljs-string">&quot;2(2)&quot;</span>;<span class="hljs-comment">//初始化</span><br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    cout&lt;&lt;<span class="hljs-built_in">getst</span>(n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>初始化在函数外会RTE！</strong></p><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 表达式求值 一类题的代码</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%20%E4%B8%80%E7%B1%BB%E9%A2%98%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%20%E4%B8%80%E7%B1%BB%E9%A2%98%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F">中缀表达式</a><br />*<ul><li><a href="#%E6%B3%A8">注</a></li><li><a href="#%E4%BB%A3%E7%A0%811%E9%80%92%E5%BD%92">代码1：递归</a></li><li><a href="#%E4%BB%A3%E7%A0%812%E6%A0%88">代码2：栈</a></li></ul></li><li><a href="#%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F">后缀表达式</a><br />*<ul><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>这篇主要是为自己做的代码存储，方便查阅，有时间的话再码题解。</p><h2 id="中缀表达式"><a class="markdownIt-Anchor" href="#中缀表达式"></a> 中缀表达式</h2><p>题目来源：<a href="https://www.acwing.com/problem/content/3305/">Acwing 3302.表达式求值</a></p><blockquote><p>题目描述</p><blockquote><p>给定一个表达式，其中运算符仅包含 +,-,*,/（加 减 乘 整除），可能包含括号，请你求出表达式的最终值。</p></blockquote><p>输入描述</p><blockquote><p>共一行，为给定表达式。</p></blockquote><p>输出描述</p><blockquote><p>共一行，为给定表达式的结果。</p></blockquote><p>数据范围、约定与提示</p><blockquote><p>**表达式的长度不超过 10<sup>5</sup>。<br />**数据保证给定的表达式合法。<br />**题目保证符号 ’ - ’ 只作为减号出现，不会作为负号出现，例如，-1+2,(2+2)*(-(1+1)+2) 之类表达式均不会出现。<br />**题目保证表达式中所有数字均为正整数。<br />**题目保证表达式在中间计算过程以及结果中，均不超过 2<sup>31</sup>−1。<br />**题目中的整除是指向 0 取整，也就是说对于大于 0 的结果向下取整，例如 5/3=1，对于小于 0 的结果向上取整，例如 5/(1−4)=−1。<br />**C++和Java中的整除默认是向零取整；Python中的整除//默认向下取整，因此Python的eval()函数中的整除也是向下取整，在本题中不能直接使用。</p></blockquote><p>输入样例1</p><blockquote><p>(2+2)*(1+1)</p></blockquote><p>输出样例1</p><blockquote><p>8</p></blockquote></blockquote><h4 id="注"><a class="markdownIt-Anchor" href="#注"></a> 注</h4><p>Acwing中保证<code>-</code>只做减号不做负号，下面代码经处理、测试，<code>-</code>做负号也可以处理；<br />也就是说，四则运算（加、减、乘、整除）内，此代码均可以处理；</p><h4 id="代码1递归"><a class="markdownIt-Anchor" href="#代码1递归"></a> 代码1：递归</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>string g;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findnext</span><span class="hljs-params">(string &amp;g,<span class="hljs-type">int</span> l)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> r;<br>    <span class="hljs-keyword">if</span>(g[l]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;g[l]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(r=l+<span class="hljs-number">1</span>;g[r]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;g[r]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>;r++);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-type">int</span> f=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(r=l+<span class="hljs-number">1</span>;f;r++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(g[r]==<span class="hljs-string">&#x27;(&#x27;</span>)f++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[r]==<span class="hljs-string">&#x27;)&#x27;</span>)f--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ennum</span><span class="hljs-params">(string &amp;g,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l;i&lt;=r;i++)<br>    &#123;<br>        ans*=<span class="hljs-number">10</span>,ans+=g[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;ans&lt;&lt;endl;</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">cal</span><span class="hljs-params">(string &amp;g,<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll a=<span class="hljs-number">0</span>,b=<span class="hljs-number">1</span>,i,j,z;<br>    <span class="hljs-keyword">if</span>(g[l]==<span class="hljs-string">&#x27;-&#x27;</span>)b=<span class="hljs-number">-1</span>,l++;<br>    z=<span class="hljs-built_in">findnext</span>(g,l);<br>    <span class="hljs-keyword">if</span>(g[l]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;g[l]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)b*=<span class="hljs-built_in">ennum</span>(g,l,z);<br>    <span class="hljs-keyword">else</span> b*=<span class="hljs-built_in">cal</span>(g,l+<span class="hljs-number">1</span>,z);<br>    <span class="hljs-keyword">for</span>(i=z+<span class="hljs-number">1</span>;i&lt;=r;)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;*&#x27;</span>)<br>        &#123;<br>            i++;<br>            z=<span class="hljs-built_in">findnext</span>(g,i);<br>            b*=<span class="hljs-built_in">cal</span>(g,i,z);<br>            i=z+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;/&#x27;</span>)<br>        &#123;<br>            i++;<br>            z=<span class="hljs-built_in">findnext</span>(g,i);<br>            b/=<span class="hljs-built_in">cal</span>(g,i,z);<br>            i=z+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;+&#x27;</span>)<br>        &#123;<br>            i++;<br>            a+=b;<br>            z=<span class="hljs-built_in">findnext</span>(g,i);<br>            b=<span class="hljs-built_in">cal</span>(g,i,z);<br>            i=z+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>        &#123;<br>            i++;<br>            a+=b;<br>            z=<span class="hljs-built_in">findnext</span>(g,i);<br>            b=-<span class="hljs-built_in">cal</span>(g,i,z);<br>            i=z+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;g;<br>    ll ans=<span class="hljs-built_in">cal</span>(g,<span class="hljs-number">0</span>,g.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="代码2栈"><a class="markdownIt-Anchor" href="#代码2栈"></a> 代码2：栈</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">10</span>;<br>stack&lt;<span class="hljs-type">int</span>&gt; num;<br>stack&lt;<span class="hljs-type">char</span>&gt; op;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">eval</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">auto</span> b=num.<span class="hljs-built_in">top</span>();num.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">auto</span> a=num.<span class="hljs-built_in">top</span>();num.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">auto</span> c=op.<span class="hljs-built_in">top</span>();op.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;+&#x27;</span>)x=a+b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;-&#x27;</span>)x=a-b;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;*&#x27;</span>)x=a*b;<br>    <span class="hljs-keyword">else</span> x=a/b;<br>    num.<span class="hljs-built_in">push</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt;pr&#123;&#123;<span class="hljs-string">&#x27;+&#x27;</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-number">2</span>&#125;&#125;;<span class="hljs-comment">//运算符优先级</span><br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-keyword">auto</span> c=s[i];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(c))<span class="hljs-comment">//转数字</span><br>        &#123;<br>            <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,j=i;<br>            <span class="hljs-keyword">while</span>(j&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;<span class="hljs-built_in">isdigit</span>(s[j]))<br>                x=x*<span class="hljs-number">10</span>+s[j++]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            i=j<span class="hljs-number">-1</span>;<br>            num.<span class="hljs-built_in">push</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;(&#x27;</span>)op.<span class="hljs-built_in">push</span>(c);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&#x27;)&#x27;</span>)<span class="hljs-comment">//括号直接算</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(op.<span class="hljs-built_in">top</span>()!=<span class="hljs-string">&#x27;(&#x27;</span>)<span class="hljs-built_in">eval</span>();<br>            op.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(op.<span class="hljs-built_in">size</span>()&amp;&amp;pr[op.<span class="hljs-built_in">top</span>()]&gt;=pr[c])<span class="hljs-built_in">eval</span>();<span class="hljs-comment">//如果当前优先级比前面的低就算</span><br>            op.<span class="hljs-built_in">push</span>(c);<span class="hljs-comment">//操作符入栈</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(op.<span class="hljs-built_in">size</span>())<span class="hljs-built_in">eval</span>();<span class="hljs-comment">//剩余计算</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,num.<span class="hljs-built_in">top</span>());<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="后缀表达式"><a class="markdownIt-Anchor" href="#后缀表达式"></a> 后缀表达式</h2><p>题目来源：<a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">力扣 150.逆波兰表达式求值</a></p><blockquote><p>题目描述</p><blockquote><p>根据 逆波兰表示法，求表达式的值。<br />有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p></blockquote><p>说明、提示与介绍</p><blockquote><ul><li>整数除法只保留整数部分。</li><li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li><li>1 &lt;= tokens.length &lt;= 104</li><li>tokens[i] 要么是一个算符（&quot;+&quot;、&quot;-&quot;、&quot;*&quot; 或 “/”），要么是一个在范围 [-200, 200] 内的整数</li><li>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。<br />平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。<br />该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。</li><li>逆波兰表达式主要有以下两个优点：<br />去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。<br />适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li></ul></blockquote><p>样例1</p><blockquote><p>输入：tokens = [“2”,“1”,&quot;+&quot;,“3”,&quot;*&quot;]<br />输出：9<br />解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</p></blockquote><p>样例2</p><blockquote><p>输入：tokens = [“4”,“13”,“5”,&quot;/&quot;,&quot;+&quot;]<br />输出：6<br />解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6</p></blockquote><p>样例3</p><blockquote><p>输入：tokens = [“10”,“6”,“9”,“3”,&quot;+&quot;,&quot;-11&quot;,&quot;<em>&quot;,&quot;/&quot;,&quot;</em>&quot;,“17”,&quot;+&quot;,“5”,&quot;+&quot;]<br />输出：22<br />解释：<br />该算式转化为常见的中缀算术表达式为：<br />((10 * (6 / ((9 + 3) * -11))) + 17) + 5<br />= ((10 * (6 / (12 * -11))) + 17) + 5<br />= ((10 * (6 / -132)) + 17) + 5<br />= ((10 * 0) + 17) + 5<br />= (0 + 17) + 5<br />= 17 + 5<br />= 22</p></blockquote></blockquote><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>    stack&lt;<span class="hljs-type">int</span>&gt; stk;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ennum</span><span class="hljs-params">(string &amp;g)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>,k=<span class="hljs-number">1</span>,i=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;-&#x27;</span>)k=<span class="hljs-number">-1</span>,i++;<br>        <span class="hljs-keyword">for</span>(;g[i];i++)<br>        &#123;<br>            ans*=<span class="hljs-number">10</span>;<br>            ans+=g[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans*k;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;tokens.<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(tokens[i][tokens[i].<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;tokens[i][tokens[i].<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>            stk.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">ennum</span>(tokens[i]));<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> a,b;<br>            a=stk.<span class="hljs-built_in">top</span>();<br>            stk.<span class="hljs-built_in">pop</span>();<br>            b=stk.<span class="hljs-built_in">top</span>();<br>            stk.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(tokens[i][<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;+&#x27;</span>)stk.<span class="hljs-built_in">push</span>(b+a);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tokens[i][<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)stk.<span class="hljs-built_in">push</span>(b-a);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tokens[i][<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;*&#x27;</span>)stk.<span class="hljs-built_in">push</span>(b*a);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tokens[i][<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;/&#x27;</span>)stk.<span class="hljs-built_in">push</span>(b/a);<br>        &#125;<br>        <span class="hljs-comment">//printf(&quot;%d\n&quot;,stk.top());</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> stk.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>如有发现bug，欢迎评论区反馈，将尽快处理。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021年东北林业大学蓝桥杯选拔赛（软件类）（A B C D F G H）</title>
    <link href="/2021.01-06/2021%E5%B9%B4%E4%B8%9C%E5%8C%97%E6%9E%97%E4%B8%9A%E5%A4%A7%E5%AD%A6%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%80%89%E6%8B%94%E8%B5%9B%EF%BC%88%E8%BD%AF%E4%BB%B6%E7%B1%BB%EF%BC%89%EF%BC%88A%20B%20C%20D%20F%20G%20H%EF%BC%89/"/>
    <url>/2021.01-06/2021%E5%B9%B4%E4%B8%9C%E5%8C%97%E6%9E%97%E4%B8%9A%E5%A4%A7%E5%AD%A6%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%80%89%E6%8B%94%E8%B5%9B%EF%BC%88%E8%BD%AF%E4%BB%B6%E7%B1%BB%EF%BC%89%EF%BC%88A%20B%20C%20D%20F%20G%20H%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="http://acm.nefu.edu.cn/contestShow.php">这里</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-%E8%82%A1%E7%A5%9E">A 股神</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-%E9%85%92%E9%A6%86%E5%86%B3%E6%96%97">B 酒馆决斗</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-%E6%B1%82-k-%E6%95%B4%E9%99%A4%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0%E5%92%8C">C 求 k 整除最大元素和</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E5%8F%96%E5%BF%AB%E9%80%92">D 取快递</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E4%BB%A4">数组与指令</a><br />*<ul><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0">题目描述</a></li></ul></li><li><a href="#f-%E5%B9%B8%E8%BF%90%E6%95%B0%E5%AD%97">F 幸运数字</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#g-%E6%9C%89%E9%99%90%E5%B0%8F%E6%95%B0">G 有限小数</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#h-%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C">H 子数组和</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>E的知识点好像需要补，赛时想到的都爆TLE</p><h2 id="a-股神"><a class="markdownIt-Anchor" href="#a-股神"></a> A 股神</h2><p>贪心 / DP</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>朴素的贪心思想：</p><p>次日若比此日股价高，且没有买入，则所有金币买入；<br />次日若比此日股价低，且有买入，则全部卖出；</p><p>注意输出时转换成金币输出；<br />注意浮点误差；<br />注意第0天也可以进行买入操作。</p><p>DP方法可以参考<a href="https://blog.csdn.net/RealKing_sblog/article/details/114769117">ph大佬的题解</a>。</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> gp[<span class="hljs-number">502</span>],w=<span class="hljs-number">1</span>,g=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> n,i;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,&amp;gp[i]);<br>    gp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//第0天股价</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(g==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(gp[i+<span class="hljs-number">1</span>]&gt;gp[i])<br>            &#123;<br>                g=w/gp[i];<br>                w=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(gp[i+<span class="hljs-number">1</span>]&lt;gp[i])<br>            &#123;<br>                w=g*gp[i];<br>                g=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(g&gt;<span class="hljs-number">0</span>)w+=g*gp[n];<span class="hljs-comment">//转换为金币，防浮点误差</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf&quot;</span>,w);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="b-酒馆决斗"><a class="markdownIt-Anchor" href="#b-酒馆决斗"></a> B 酒馆决斗</h2><p>模拟</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>排序后进行模拟，注意每次出招都有可能造成对方减员，而不是每回合；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">qd</span><br>&#123;<span class="hljs-type">int</span> a,b;&#125;qua[<span class="hljs-number">100005</span>],shp[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(qd x,qd y)</span><span class="hljs-comment">//排序</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x.a==y.a)<span class="hljs-keyword">return</span> x.b&gt;y.b;<br>    <span class="hljs-keyword">return</span> x.a&gt;y.a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,i,j;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;qua[i].a,&amp;qua[i].b);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;shp[i].a,&amp;shp[i].b);<br>    <span class="hljs-built_in">sort</span>(qua+<span class="hljs-number">1</span>,qua+<span class="hljs-number">1</span>+n,cmp);<br>    <span class="hljs-built_in">sort</span>(shp+<span class="hljs-number">1</span>,shp+<span class="hljs-number">1</span>+m,cmp);<br>    i=j=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;i&lt;=n&amp;&amp;j&lt;=m;)<br>    &#123;<br>        shp[j].b-=qua[i].a;<br>        <span class="hljs-keyword">if</span>(shp[j].b&lt;=<span class="hljs-number">0</span>)j++;<br>        <span class="hljs-keyword">if</span>(j&gt;m)<span class="hljs-keyword">break</span>;<br>        qua[i].b-=shp[j].a;<br>        <span class="hljs-keyword">if</span>(qua[i].b&lt;=<span class="hljs-number">0</span>)i++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i&lt;=n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Quasrain&quot;</span>);<span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SHP&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; wins, left &quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">max</span>(m-j+<span class="hljs-number">1</span>,n-i+<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="c-求-k-整除最大元素和"><a class="markdownIt-Anchor" href="#c-求-k-整除最大元素和"></a> C 求 k 整除最大元素和</h2><p>DP</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>建立dp方程<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>j</mi><mo>−</mo><mi>g</mi><mi mathvariant="normal">%</mi><mi>k</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>k</mi><mo stretchy="false">]</mo><mo>+</mo><mi>g</mi><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][j]=max(dp[i-1][(j-g\%k+k)\%k]+g,dp[i-1][j])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">%</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>代表有前 i 个数时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">mod( k) = j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> 时的最大和；</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>j</mi><mo>−</mo><mi>g</mi><mi mathvariant="normal">%</mi><mi>k</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[(j-g\%k+k)\%k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">%</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>是为了防止计算后的余数变负或溢出；</p><p>赛时没找到简单的压缩至一维dp的方法（实际上应该有），而开[102][100005]会MLE；<br />因为处理 [i] 时只需要 [i] 与 [i-1] 行数数据；<br />所以通过开 [2][100005] ，并在 [1] 每一行处理完后，将数据更新[0]内，以节省内存；</p><p>数据最大和为1e14，可以放心大胆地用 ll 进行dp；</p><p>注意dp初始值的设定。</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">19260817</span>,N=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><br>ll dp[<span class="hljs-number">2</span>][<span class="hljs-number">102</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k,i,j,g;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;k;i++)dp[<span class="hljs-number">0</span>][i]=<span class="hljs-number">-1e14</span><span class="hljs-number">-1</span>;<span class="hljs-comment">//初值</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g);<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;k;j++)<br>        &#123;<br>            dp[<span class="hljs-number">1</span>][j]=<span class="hljs-built_in">max</span>(dp[<span class="hljs-number">0</span>][(j-g%k+k)%k]+g,dp[<span class="hljs-number">0</span>][j]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;k;j++)<span class="hljs-comment">//更新数据至dp[0]</span><br>        &#123;<br>            dp[<span class="hljs-number">0</span>][j]=dp[<span class="hljs-number">1</span>][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,(dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])&gt;<span class="hljs-number">0</span>?dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]%M:<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-取快递"><a class="markdownIt-Anchor" href="#d-取快递"></a> D 取快递</h2><p>贪心</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>以a为排序依据，降序排列；</p><p>从用时最长的开始，直至超能力时间和大于该快递用时，或该快递的超能力用时大于标准用时时，跳出贪心；</p><p>跳出后比较标准用时与超能力用时和的最大值输出。</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">qd</span><br>&#123;<span class="hljs-type">int</span> a,b;&#125;qdb[<span class="hljs-number">100005</span>];<span class="hljs-comment">//快递表</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(qd x,qd y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x.a==x.b)<span class="hljs-keyword">return</span> x.b&lt;y.b;<br>    <span class="hljs-keyword">return</span> x.a&lt;y.a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i,j,tb=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;qdb[i].a,&amp;qdb[i].b);<br>    <span class="hljs-built_in">sort</span>(qdb+<span class="hljs-number">1</span>,qdb+<span class="hljs-number">1</span>+n,cmp);<br>    <span class="hljs-keyword">for</span>(i=n;i&gt;=<span class="hljs-number">1</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(qdb[i].b&gt;qdb[i].a)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//此快递超能力用时大于标准用时</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(tb+qdb[i].b&lt;=qdb[i].a)tb+=qdb[i].b;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<span class="hljs-comment">//超能力取此快递前超能力用时和大于此快递标准用时</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(tb&gt;=qdb[i].a)<span class="hljs-keyword">break</span>;<span class="hljs-comment">//超能力取此快递后超能力用时和大于此快递标准用时</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-built_in">max</span>(tb,qdb[i].a));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组与指令"><a class="markdownIt-Anchor" href="#数组与指令"></a> <a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=2262">数组与指令</a></h2><p>原题被删除了，在这里大概描述一下：</p><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>有一长度为n的数组，初始值全为0，现对其进行m此操作：<br />每次操作遵循<code>op a b</code>的输入形式</p><p>若op为1，则对第a位的数加b；<br />若op为2，则输出数组[a,b]区间上的非零数个数；<br />若op为3，则输出数组[a,b]区间上数字之和；</p><p>输入共m+1行，第一行输入n,m；<br />接下来m行输入m次操作；</p><p>对于每一次操作2或操作3，输出一行答案；</p><p>数据范围：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>n</mi><mo>&lt;</mo><mo>=</mo><mn>1</mn><mi>e</mi><mn>9</mn></mrow><annotation encoding="application/x-tex">1&lt;=n&lt;=1e9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">9</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>m</mi><mo>&lt;</mo><mo>=</mo><mn>1</mn><mi>e</mi><mn>5</mn></mrow><annotation encoding="application/x-tex">1&lt;=m&lt;=1e5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">5</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>p</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">op\in\{1,2,3\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">}</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>&lt;</mo><mo>=</mo><mi>a</mi><mo>&lt;</mo><mo>=</mo><mi>b</mi><mo>&lt;</mo><mo>=</mo><mn>1</mn><mi>e</mi><mn>9</mn></mrow><annotation encoding="application/x-tex">1&lt;=a&lt;=b&lt;=1e9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">9</span></span></span></span></p><p>大概是这个样的，目前还没什么好想法。</p><h2 id="f-幸运数字"><a class="markdownIt-Anchor" href="#f-幸运数字"></a> F 幸运数字</h2><p>暴力模拟</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>暴力模拟即可。</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m,i,j,ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        j=i;<br>        <span class="hljs-keyword">while</span>(j)<br>        &#123;<br>            sum+=j%<span class="hljs-number">10</span>;<br>            j/=<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i%sum==<span class="hljs-number">1</span>)ans++;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="g-有限小数"><a class="markdownIt-Anchor" href="#g-有限小数"></a> G 有限小数</h2><p>进制转换</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>可以参考<a href="https://blog.csdn.net/hacker_zrq/article/details/112004008">浮点数进制转换</a>；</p><p>我先将获得的A进制数转换为10进制，再进行处理，方便操作与理解。</p><p>对于进制转换，我们可以不关心转换成的B进制数具体是什么，只关心是否有剩余；</p><p>所以我们就可以暴力地进行足够多位的转换，直接看结果是否有剩余即可。</p><p>关于进一步优化可以参考<a href="https://blog.csdn.net/RealKing_sblog/article/details/114769117">ph大佬的题解</a>。<br />PS:ph大佬在进制转换的字符串遍历方向错了的情况下依然过掉了9/10，%%%。</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">19260817</span>,N=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-function">ll <span class="hljs-title">ctoten</span><span class="hljs-params">(string&amp; n,ll a)</span><span class="hljs-comment">//change to ten</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//cout&lt;&lt;n&lt;&lt;endl;</span><br>    ll ans=<span class="hljs-number">0</span>,ma=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        ans+=(n[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;n[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)?(n[i]-<span class="hljs-string">&#x27;0&#x27;</span>)*ma:(n[i]-<span class="hljs-string">&#x27;A&#x27;</span>+<span class="hljs-number">10</span>)*ma;<br>        ma*=a;<br>    &#125;<br>    <span class="hljs-comment">//printf(&quot;%lld\n&quot;,ans);</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll a,b,nu,nd,i;<span class="hljs-comment">//numberup,numberdown</span><br>    string up,down;<br>    cin&gt;&gt;up&gt;&gt;down&gt;&gt;a&gt;&gt;b;<br>    nu=<span class="hljs-built_in">ctoten</span>(up,a);<br>    nd=<span class="hljs-built_in">ctoten</span>(down,a);<br>    <span class="hljs-keyword">if</span>(nu&gt;=nd)nu-=nd;<br>    <span class="hljs-comment">//printf(&quot;%lld %lld\n&quot;,nu,nd);</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10000000</span>;i++)<span class="hljs-comment">//1e7位</span><br>    &#123;<br>        nu*=b;<br>        nu%=nd;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!nu)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes&quot;</span>);<span class="hljs-comment">//分子为0即无剩余</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-子数组和"><a class="markdownIt-Anchor" href="#h-子数组和"></a> H 子数组和</h2><p>滑窗</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>从右界累加至和不小于 k ，再从左界累减至不大于k；</p><p>若此时和值为k，则输出左右界；<br />否则即再执行上面的操作；</p><p>若遍历完都没有和为k的情况，则输出-1；</p><p>注意处理边界。</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF=<span class="hljs-number">0x3f3f3f3f</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n,a[<span class="hljs-number">1003</span>],k,i,j,sum;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]);<br>    i=<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(;i&lt;=n&amp;&amp;j&lt;=n;)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(sum&lt;k&amp;&amp;j&lt;=n)j++,sum+=a[j];<span class="hljs-comment">//移动右界</span><br>        <span class="hljs-keyword">while</span>(sum&gt;k&amp;&amp;i&lt;=n)sum-=a[i],i++;<span class="hljs-comment">//移动左界</span><br>        <span class="hljs-keyword">if</span>(sum==k)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j==n+<span class="hljs-number">1</span>||i==n+<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<span class="hljs-comment">//边界溢出则无子数组满足条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld&quot;</span>,i,j);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>码字较急，难免有疏漏与错误，欢迎评论区讨论与反馈。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021牛客寒假算法基础集训营6（全题解）</title>
    <link href="/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A56%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/"/>
    <url>/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A56%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/9986#question">这里</a></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>个人能力有限，有的题目实在知识点欠缺太多，这里是大佬的<a href="https://ac.nowcoder.com/discuss/599236">题解</a>。<br />这一场总的来说友好极了，就是自己的基础数据总算错，自然也就推了个寂寞。</p><h2 id="a-回文括号序列计数"><a class="markdownIt-Anchor" href="#a-回文括号序列计数"></a> A 回文括号序列计数</h2><p>回文序列，<s>阅读理解</s></p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>对于任意一个左半串，比如说<code>&quot;()()(&quot;</code>，其回文右半串为<code>&quot;()()(&quot;</code>，而不是<code>&quot;)()()&quot;</code>；<br />回文对称中是<strong>左右对调</strong>，而不是<em>左右对称</em>。</p><p>所以只有空串是合法的回文括号序列。</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(n==<span class="hljs-number">0</span>)?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><s>阅读理解</s></p><h2 id="b-系数"><a class="markdownIt-Anchor" href="#b-系数"></a> B 系数</h2><p>lucas定理（可以参照<a href="https://blog.csdn.net/weixin_43355034/article/details/97623242">这里</a>与<a href="https://www.zybuluo.com/ArrowLLL/note/713754">这里</a>）</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mi mathvariant="normal">%</mi><mn>3</mn><mo>=</mo><mo stretchy="false">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>3</mn><mo>∗</mo><mi>x</mi><mo>+</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>n</mi></msup><mi mathvariant="normal">%</mi><mn>3</mn><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mn>2</mn><mi>n</mi></mrow></msup><mi mathvariant="normal">%</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">(x^2+x+1)^n\%3=(x^2-3*x+x+1)^n\%3=(x+1)^{2n}\%3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord">3</span></span></span></span></p><p>故答案即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mi>C</mi><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo separator="true">,</mo><mi>k</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">(-1)^kC(2n,k)\%3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord">%</span><span class="mord">3</span></span></span></span></p><p>由于 1e15 的数据量和逆元的互质要求，正向计算很困难，所以使用lucas定理进行计算。</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">3</span>;<br><br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>        a=a*a%M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">C</span><span class="hljs-params">(ll a, ll b, ll mod)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt; b)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    ll up = <span class="hljs-number">1</span>, down = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = a,j = <span class="hljs-number">1</span>;j &lt;= b;i--,j++)&#123;<br>        up = up*i%mod;<br>        down = down*j%mod;<br>    &#125;<br>    <span class="hljs-keyword">return</span> up*<span class="hljs-built_in">qm</span>(down, mod - <span class="hljs-number">2</span>)%mod;<br>&#125;<br><br><span class="hljs-function">ll <span class="hljs-title">lucas</span><span class="hljs-params">(ll a, ll b, ll mod)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(a &lt; mod &amp;&amp; b &lt; mod)<span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a, b, mod);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">C</span>(a%mod,b%mod,mod)*<span class="hljs-built_in">lucas</span>(a/mod,b/mod,mod)%mod;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>    ll n,k;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(k % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>)ans = <span class="hljs-number">-1</span>;<br>    ans = ans * <span class="hljs-built_in">lucas</span>(<span class="hljs-number">2</span>*n,k,M);<br>    ans = (ans + <span class="hljs-number">3</span>*M)%M;<span class="hljs-comment">//防负</span><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="c-末三位"><a class="markdownIt-Anchor" href="#c-末三位"></a> C 末三位</h2><p>快速幂or找规律</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>读到题第一反应就是快速幂板子啦~<br />事实上确实能过；</p><p>但是也可以直接找规律做：<br />对于n=0,1,2,3,4,5,6,7…<br />应输出 001,005,025,125,625,125,625…<br />所以就是从 n=3 开始两个一循环，特判 n=0,1,2 即可。</p><p>下面代码是快速幂的。</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp">include&lt;bits/stdc++.h&gt;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1000</span>;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>        a=a*a%M;<br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans%M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n,a;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;n))<br>    &#123;<br>        a=<span class="hljs-built_in">qm</span>(<span class="hljs-number">5</span>,n);<br>        <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">10</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;00%lld\n&quot;</span>,a);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">100</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0%lld\n&quot;</span>,a);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,a);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-划数"><a class="markdownIt-Anchor" href="#d-划数"></a> D 划数</h2><p>取模运算性质</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>由于 cnt&gt;=11 ，可知剩下的数一定是初始数；</p><p>既然需要求剩下的另一个数，根据取模运算性质，即是求其余所有初始数之和对11的模；<br />至于实现上，个人是 全部求和 取模 之后减去剩余数 处理后 再取模；</p><p>注意要特判 n==2 ，此时另一个初始数有可能大于等于11，不能按上面方法做，摘出来即可。</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,cnt;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(n!=<span class="hljs-number">2</span>)&#123;<br>        ll md=<span class="hljs-number">0</span>,g,i;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;cnt);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;g);<br>            md+=g;<br>            md%=<span class="hljs-number">11</span>;<br>        &#125;<br>        md-=cnt;<br>        <span class="hljs-keyword">while</span>(md&lt;<span class="hljs-number">0</span>)md+=<span class="hljs-number">11</span>;<br>        md%=<span class="hljs-number">11</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,md);&#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-type">int</span> a,b;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;cnt);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>            <span class="hljs-keyword">if</span>(a==cnt)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,b);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-网格"><a class="markdownIt-Anchor" href="#e-网格"></a> E 网格</h2><p>dp</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>水平方向与竖直方向对答案的贡献是独立的，下面用水平方向说明具体dp过程。</p><p>用 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>d</mi><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mi>d</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">}</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][d](d\in\{0,1\})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">}</span><span class="mclose">)</span></span></span></span>表示该行遍历至第 i 个时，选择d方向（1为右，0为左）时，对答案的最大贡献度；</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][1]=max(dp[i-1][1],dp[i-1][0])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span>，即第 i 位选择向右时，不会产生贡献增量，继承第 i - 1 位两个方向中最大值即可；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>w</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mover accent="true"><mrow></mrow><mo>^</mo></mover><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][0]=max(dp[i-1][0],dp[i-1][1]+w(a[i][j]\hat{}a[i-1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>，即第 i 位选择向左时，第 i - 1 位选择向右才能产生增量，选择存入 <strong>i - 1 位向右的最大值与增量之和</strong>与 <strong>i - 1 位选择向左的最大值</strong> 的最大值即可；</p><p>分别dp水平和垂直方向，每行/列加入答案。</p><p>注意运算优先级！</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> bit[<span class="hljs-number">1050</span>],n,m,i,j,dp[<span class="hljs-number">1003</span>][<span class="hljs-number">2</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a[<span class="hljs-number">1003</span>][<span class="hljs-number">1003</span>];<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1024</span>;i++)<br>    &#123;<br>        bit[i]=i;<br>        j=i;<br>        <span class="hljs-keyword">for</span>(;j;j&gt;&gt;=<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span>(j&amp;<span class="hljs-number">1</span>)bit[i]++;<br>    &#125;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i][j]);<br>    <span class="hljs-comment">//dp begin</span><br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">2</span>;j&lt;=m;j++)<br>        &#123;<br>            dp[j][<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(dp[j<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>],dp[j<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]);<br>            dp[j][<span class="hljs-number">0</span>]=<span class="hljs-built_in">max</span>(dp[j<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],dp[j<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+bit[a[i][j]^a[i][j<span class="hljs-number">-1</span>]]);<br>        &#125;<br>        ans+=<span class="hljs-built_in">max</span>(dp[m][<span class="hljs-number">1</span>],dp[m][<span class="hljs-number">0</span>]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>        &#123;<br>            dp[i][<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]);<br>            dp[i][<span class="hljs-number">0</span>]=<span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]+bit[a[i][j]^a[i<span class="hljs-number">-1</span>][j]]);<br>        &#125;<br>        ans+=<span class="hljs-built_in">max</span>(dp[n][<span class="hljs-number">1</span>],dp[n][<span class="hljs-number">0</span>]);<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="f组合数问题"><a class="markdownIt-Anchor" href="#f组合数问题"></a> F组合数问题</h2><p>数学</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p><s>手算</s>计算器可得<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(4)=2;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">;</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>8</mn><mo stretchy="false">)</mo><mo>=</mo><mn>72</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(8)=72;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">7</span><span class="mord">2</span><span class="mpunct">;</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>12</mn><mo stretchy="false">)</mo><mo>=</mo><mn>992</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(12)=992;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">9</span><span class="mord">9</span><span class="mord">2</span><span class="mpunct">;</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>16</mn><mo stretchy="false">)</mo><mo>=</mo><mn>16512</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(16)=16512;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">5</span><span class="mord">1</span><span class="mord">2</span><span class="mpunct">;</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>20</mn><mo stretchy="false">)</mo><mo>=</mo><mn>261632</mn><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(20)=261632;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">2</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord">6</span><span class="mord">1</span><span class="mord">6</span><span class="mord">3</span><span class="mord">2</span><span class="mpunct">;</span></span></span></span><br />经过找规律，得出<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mn>2</mn></msup><mo>−</mo><msup><mn>2</mn><mn>1</mn></msup><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(4)=2^2-2^1;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">;</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>8</mn><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mn>6</mn></msup><mo>+</mo><msup><mn>2</mn><mn>3</mn></msup><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(8)=2^6+2^3;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mpunct">;</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>12</mn><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup><mo>−</mo><msup><mn>2</mn><mn>5</mn></msup><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(12)=2^{10}-2^5;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">;</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>16</mn><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mn>14</mn></msup><mo>+</mo><msup><mn>2</mn><mn>7</mn></msup><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(16)=2^{14}+2^7;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">6</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mpunct">;</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mi>u</mi><mi>m</mi><mo stretchy="false">(</mo><mn>20</mn><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mn>18</mn></msup><mo>−</mo><msup><mn>2</mn><mn>9</mn></msup><mo separator="true">;</mo></mrow><annotation encoding="application/x-tex">Sum(20)=2^{18}-2^{9};</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">2</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">8</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span><span class="mpunct">;</span></span></span></span><br />规律已经找出来了，这个规律的代码可以过，接下来是得到的证明：</p><p>由于<a href="https://baike.baidu.com/item/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86/7134359?fr=aladdin">二项式定理</a>，我们可以如下表示：<br /><img src="https://img-blog.csdnimg.cn/20210224233909558.png" alt="![在这里插入图片描述](https://img-blog.csdnimg.cn/20210224233814350.png" /><br />（<em>截自文首链题解</em>）<br />由于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>i</mi><msup><mo stretchy="false">)</mo><mn>4</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>i</mi><msup><mo stretchy="false">)</mo><mn>4</mn></msup><mo>=</mo><mo>−</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">(1+i)^4=(1-i)^4=-4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">4</span></span></span></span>，所以原式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mfrac><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>+</mo><mn>2</mn><mo stretchy="false">(</mo><mo>−</mo><mn>4</mn><msup><mo stretchy="false">)</mo><mfrac><mi>n</mi><mn>4</mn></mfrac></msup></mrow><mn>4</mn></mfrac><mo>=</mo><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msup><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mfrac><mi>n</mi><mn>4</mn></mfrac></msup><msup><mn>2</mn><mfrac><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow><mn>2</mn></mfrac></msup></mrow><annotation encoding="application/x-tex">=\frac {2^n+2(-4)^{\frac{n}{4}}} {4}=2^{n-2}+(-1)^{\frac {n} {4}}2^{\frac{n-2}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.580205em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.235205em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mopen mtight">(</span><span class="mord mtight">−</span><span class="mord mtight">4</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0717214285714287em;"><span style="top:-3.48775em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size1 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8175600000000001em;"><span style="top:-2.468em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mtight">4</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.387em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.532em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size1 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.20402em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.84708em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9540200000000001em;"><span style="top:-3.363em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142857em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">998244353</span>;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=(ans%M)*(a%M)%M;<br>        a=a*a%M;<br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans%M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n,ans;<br>    cin&gt;&gt;n;<br>    ans=<span class="hljs-built_in">qm</span>(<span class="hljs-number">2</span>,n<span class="hljs-number">-2</span>&gt;&gt;<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>((n/<span class="hljs-number">4</span>)&amp;<span class="hljs-number">1</span>)ans=M-ans;<br>    ans+=<span class="hljs-built_in">qm</span>(<span class="hljs-number">2</span>,n<span class="hljs-number">-2</span>);<br>    ans%=M;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="g-机器人"><a class="markdownIt-Anchor" href="#g-机器人"></a> G 机器人</h2><p>排序问题，高精度（或__int128）</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>首先所有系数均大于0；</p><p>我们可以把机器人的排序问题转化成从初始状态的有限次相邻对换；</p><p>接下来我们要判断对换的条件：</p><p>假设现有两机器人 i , i + 1 ，传入数据为 X ；<br />则对换前的传出数据<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mi>X</mi><mo>+</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><msub><mi>b</mi><mi>i</mi></msub><mo>+</mo><msub><mi>b</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">X_{old}=a_ia_{i+1}X+a_{i+1}b_i+b_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>;<br />对换后的传出数据<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mi>X</mi><mo>+</mo><msub><mi>a</mi><mi>i</mi></msub><msub><mi>b</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">X_{new}=a_ia_{i+1}X+a_{i}b_{i+1}+b_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>;</p><p>若使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mrow><mi>n</mi><mi>e</mi><mi>w</mi></mrow></msub><mo>&gt;</mo><msub><mi>X</mi><mrow><mi>o</mi><mi>l</mi><mi>d</mi></mrow></msub></mrow><annotation encoding="application/x-tex">X_{new}&gt;X_{old}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则需满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><mn>1</mn></mrow><msub><mi>b</mi><mn>1</mn></msub></mfrac><mo>&gt;</mo><mfrac><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><mn>1</mn></mrow><msub><mi>b</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mfrac></mrow><annotation encoding="application/x-tex">\frac{a_i-1}{b_1}&gt;\frac{a_{i+1}-1}{b_{i+1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3063079999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8612079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3896380000000002em;vertical-align:-0.486765em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.902873em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32808571428571426em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.20252142857142857em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.451765em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32808571428571426em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.20252142857142857em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.486765em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>;<br />即所有机器人应按照<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><mn>1</mn></mrow><msub><mi>b</mi><mn>1</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">\frac{a_i-1}{b_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3063079999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8612079999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>升序排列。</p><p>由于答案上限在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><msup><mn>1</mn><mn>20</mn></msup><mo>≈</mo><mn>2.7</mn><mi>e</mi><mn>26</mn></mrow><annotation encoding="application/x-tex">21^{20}≈2.7e26</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">7</span><span class="mord mathdefault">e</span><span class="mord">2</span><span class="mord">6</span></span></span></span> 左右，所以要高精度处理。</p><p>类似于这道题 <a href="https://blog.csdn.net/Tan_Yuu/article/details/113664161">耍杂技的牛</a></p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><p>下面的是高精度的，上面的直接用__int128了，大整数真香</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">998244353</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(__int128 x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        x = -x;<br>        <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x &gt; <span class="hljs-number">9</span>) <span class="hljs-built_in">print</span>(x/<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x%<span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">r</span><br>&#123;<br>    <span class="hljs-type">int</span> a,b;<br>&#125;rob[<span class="hljs-number">22</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(r a,r b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (a.a*<span class="hljs-number">1.0</span><span class="hljs-number">-1</span>)/a.b&lt;(b.a*<span class="hljs-number">1.0</span><span class="hljs-number">-1</span>)/b.b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,x,a,b,i;<br>    cin&gt;&gt;n&gt;&gt;x;<br>    __int128 ans=x;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;rob[i].a,&amp;rob[i].b);<br>    <span class="hljs-built_in">sort</span>(rob+<span class="hljs-number">1</span>,rob+n+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    ans=ans*rob[i].a+rob[i].b;<br>    <span class="hljs-built_in">print</span>(ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">998244353</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; ans;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mul</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;mid;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>() || t; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i &lt; A.<span class="hljs-built_in">size</span>()) t += A[i] * b;<br>        mid.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t = t / <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (mid.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; mid.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>)mid.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> mid;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">r</span><br>&#123;<br>    <span class="hljs-type">int</span> a,b;<br>&#125;rob[<span class="hljs-number">22</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(r a,r b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (a.a*<span class="hljs-number">1.0</span><span class="hljs-number">-1</span>)/a.b&lt;(b.a*<span class="hljs-number">1.0</span><span class="hljs-number">-1</span>)/b.b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,x,a,b,i;<br>    cin&gt;&gt;n&gt;&gt;x;<br>    ans.<span class="hljs-built_in">push_back</span>(x);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;rob[i].a,&amp;rob[i].b);<br>    <span class="hljs-built_in">sort</span>(rob+<span class="hljs-number">1</span>,rob+n+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>    ans=<span class="hljs-built_in">mul</span>(ans,rob[i].a);<br>    ans[<span class="hljs-number">0</span>]+=rob[i].b;<br>   &#125;<br>    ans=<span class="hljs-built_in">mul</span>(ans,<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-type">int</span>&gt;::iterator it=ans.<span class="hljs-built_in">begin</span>();it!=ans.<span class="hljs-built_in">end</span>();it++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,*it);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-动态最小生成树"><a class="markdownIt-Anchor" href="#h-动态最小生成树"></a> H 动态最小生成树</h2><p>贪心，并查集</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>由于数据比较水，按天空之城的代码直接改就行，暴力过；</p><p>注意要保证初始路的顺序，摘取和排序可以用另一个组解决。</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><p>天空之城的注释还没删/</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> fa[<span class="hljs-number">2002</span>],cnt[<span class="hljs-number">2002</span>];<span class="hljs-comment">//fa存该城所在集合的根节点（城市），cnt存以该城为根的集合城市数</span><br>ll len[<span class="hljs-number">2002</span>];<span class="hljs-comment">//len存以该城为根的集合内部的连通代价</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">road</span><br>&#123;<br>    <span class="hljs-type">int</span> fr,to;<br>    ll lrd;<br>&#125; rod[<span class="hljs-number">30004</span>],z[<span class="hljs-number">30004</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(road a,road b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.lrd&lt;b.lrd;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]!=x)fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,q,i,g1,g2;<br>    ll glen;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;q);<br>    &#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=m; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%lld&quot;</span>,&amp;g1,&amp;g2,&amp;glen);<br>            rod[i].fr=g1,rod[i].to=g2,rod[i].lrd=glen;<span class="hljs-comment">//存路</span><br>        &#125;<br>        <span class="hljs-keyword">while</span>(q--)<br>        &#123;<br>            <span class="hljs-type">int</span> o;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;o);<br>            <span class="hljs-keyword">if</span>(o==<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%lld&quot;</span>,&amp;i,&amp;g1,&amp;g2,&amp;glen);<br>                rod[i].fr=g1,rod[i].to=g2,rod[i].lrd=glen;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> l,r;<br>                <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);<br>                <span class="hljs-keyword">for</span>(i=l;i&lt;=r;i++)z[i-l].fr=rod[i].fr,z[i-l].to=rod[i].to,z[i-l].lrd=rod[i].lrd;<br>                <span class="hljs-built_in">sort</span>(z,z+<span class="hljs-number">1</span>+r-l,cmp);<br>                <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)fa[i]=i,cnt[i]=<span class="hljs-number">1</span>,len[i]=<span class="hljs-number">0</span>; <span class="hljs-comment">//初始化并查集</span><br>                <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;=r-l; i++)<br>                &#123;<br>                    <span class="hljs-comment">//printf(&quot;%d*%d*%lld\n&quot;,z[i].fr,z[i].to,z[i].lrd);</span><br>                    <span class="hljs-type">int</span> frn=z[i].fr,ton=z[i].to;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(frn)!=<span class="hljs-built_in">find</span>(ton))<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(frn)&gt;<span class="hljs-built_in">find</span>(ton))<span class="hljs-built_in">swap</span>(frn,ton);<span class="hljs-comment">//保证两集以较小根为新根</span><br>                        cnt[<span class="hljs-built_in">find</span>(frn)]+=cnt[<span class="hljs-built_in">find</span>(ton)];<span class="hljs-comment">//处理城市数</span><br>                        len[<span class="hljs-built_in">find</span>(frn)]+=len[<span class="hljs-built_in">find</span>(ton)]+z[i].lrd;<span class="hljs-comment">//处理连通代价</span><br>                        fa[<span class="hljs-built_in">find</span>(ton)]=<span class="hljs-built_in">find</span>(frn);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(cnt[<span class="hljs-number">1</span>]==n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,len[<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Impossible\n&quot;</span>,cnt[<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="i-贪吃蛇"><a class="markdownIt-Anchor" href="#i-贪吃蛇"></a> I 贪吃蛇</h2><p>bfs</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>bfs板题，身体不会消失即代表不能回到重复坐标。</p><p>注意单位转换。</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>queue&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt; que;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>]=&#123;<span class="hljs-number">0</span>&#125;,n,m,fi,fj,ti,tj,l[<span class="hljs-number">102</span>][<span class="hljs-number">102</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span><span class="hljs-comment">//l-1;</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> di[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>&#125;,dj[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; now=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> ni=now.first+di[i],nj=now.second+dj[i];<br>            <span class="hljs-keyword">if</span>(ni&gt;=<span class="hljs-number">0</span>&amp;&amp;ni&lt;=n&amp;&amp;nj&gt;=<span class="hljs-number">0</span>&amp;&amp;nj&lt;=m&amp;&amp;a[ni][nj]==<span class="hljs-number">1</span>&amp;&amp;!l[ni][nj])<br>            &#123;<br>                l[ni][nj]=l[now.first][now.second]+<span class="hljs-number">1</span>;<br>                que.<span class="hljs-built_in">push</span>(&#123;ni,nj&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j;<br>    string g;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;fi,&amp;fj);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;ti,&amp;tj);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=m;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(g[j<span class="hljs-number">-1</span>]==<span class="hljs-string">&#x27;.&#x27;</span>)a[i][j]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    l[fi][fj]=<span class="hljs-number">1</span>;<br>    que.<span class="hljs-built_in">push</span>(&#123;fi,fj&#125;);<br>    <span class="hljs-built_in">bfs</span>();<br>    <span class="hljs-keyword">if</span>(l[ti][tj])<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d00&quot;</span>,l[ti][tj]<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j天空之城"><a class="markdownIt-Anchor" href="#j天空之城"></a> J天空之城</h2><p>并查集，贪心</p><h4 id="思路-10"><a class="markdownIt-Anchor" href="#思路-10"></a> 思路</h4><p>出于<code>由于天空之城具有魔力，如果希达想再走一次自己之前走过的路，则她可以在这条路上不花费任何时间。</code>这一性质，我们可以将<strong>目前</strong>可以被联通的城市块放入同一个并查集中，如果某条道路可以连接任意两个不同集合中的城市，那么我们就可以认为这两个集合连通，且连通的代价为该路的代价。</p><p>至于上一段的“<strong>目前</strong>”，出于贪心策略，我们应该优先检索代价更低的道路，如果它能连通两个不同集，新集的<strong>连通代价</strong>即为两该路代价与两旧集的连通代价三者之和，新集的城市数即为两旧集城市数之和。</p><p>为方便结果判断，我们可以规定某集合的根为该集合内序号最小的点，如此，如果路网能抵达所有城市，该集合的根即为1，开始时将起始点标记成1号即可；</p><p>之后补充：我这不就是Kruskal求的<a href="https://blog.csdn.net/lu_long/article/details/102756547">最小生成树</a>嘛，流下了什么都没学过的泪水。</p><h4 id="代码-10"><a class="markdownIt-Anchor" href="#代码-10"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">int</span> fa[<span class="hljs-number">5003</span>],cnt[<span class="hljs-number">5003</span>];<span class="hljs-comment">//fa存该城所在集合的根节点（城市），cnt存以该城为根的集合城市数</span><br>ll len[<span class="hljs-number">5003</span>];<span class="hljs-comment">//len存以该城为根的集合内部的连通代价</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">road</span><br>&#123;<br>    <span class="hljs-type">int</span> fr,to;<br>    ll lrd;<br>&#125;rod[<span class="hljs-number">200005</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(road a,road b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.lrd&lt;b.lrd;<br>&#125;<br><br>map&lt;string,<span class="hljs-type">int</span>&gt; mp;<span class="hljs-comment">//存城市名与编号的映射</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]!=x)fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,q,i;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;q))<br>    &#123;<br>        mp.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-type">int</span> ccty=<span class="hljs-number">0</span>,glen;<br>        string g1,g2;<br>        cin&gt;&gt;g1;<br>        mp[g1]=(++ccty);<span class="hljs-comment">//将开始城设为1</span><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>        &#123;<br>            cin&gt;&gt;g1;<br>            cin&gt;&gt;g2;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;glen);<br>            <span class="hljs-keyword">if</span>(!mp[g1])mp[g1]=++ccty;<br>            <span class="hljs-keyword">if</span>(!mp[g2])mp[g2]=++ccty;<br>            rod[i].fr=mp[g2],rod[i].to=mp[g1],rod[i].lrd=glen;<span class="hljs-comment">//存路</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(ccty!=n)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No!\n&quot;</span>);<span class="hljs-keyword">continue</span>;&#125;<span class="hljs-comment">//如果提到的城市数!=n，则必有城市在路网之外</span><br>        <span class="hljs-built_in">sort</span>(rod+<span class="hljs-number">1</span>,rod+<span class="hljs-number">1</span>+q,cmp);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)fa[i]=i,cnt[i]=<span class="hljs-number">1</span>,len[i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化并查集</span><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=q;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> frn=rod[i].fr,ton=rod[i].to;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(frn)!=<span class="hljs-built_in">find</span>(ton))<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(frn)&gt;<span class="hljs-built_in">find</span>(ton))<span class="hljs-built_in">swap</span>(frn,ton);<span class="hljs-comment">//保证两集以较小根为新根</span><br>                cnt[<span class="hljs-built_in">find</span>(frn)]+=cnt[<span class="hljs-built_in">find</span>(ton)];<span class="hljs-comment">//处理城市数</span><br>                len[<span class="hljs-built_in">find</span>(frn)]+=len[<span class="hljs-built_in">find</span>(ton)]+rod[i].lrd;<span class="hljs-comment">//处理连通代价</span><br>                fa[<span class="hljs-built_in">find</span>(ton)]=<span class="hljs-built_in">find</span>(frn);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt[<span class="hljs-number">1</span>]==n)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,len[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>终于不用担心掉分了/</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021牛客寒假算法基础集训营5（A B D F G）</title>
    <link href="/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A55%EF%BC%88A%20B%20D%20F%20G%EF%BC%89/"/>
    <url>/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A55%EF%BC%88A%20B%20D%20F%20G%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/9985#question">这里</a></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>个人能力有限，有的题目实在知识点欠缺太多，这里是大佬的<a href="https://ac.nowcoder.com/discuss/597962?type=101&amp;channel=-1&amp;source_id=0">题解</a></p><h2 id="a-美丽的路径"><a class="markdownIt-Anchor" href="#a-美丽的路径"></a> A 美丽的路径</h2><p>dfs 二分</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>在通过dfs确定所有起始点可达点包括目标点后，就要开始判断最大美丽值。</p><p>在使用二分求最大美丽值时，对于check部分，我们可以按如下策略处理：</p><p>为方便叙述，我们标记大于等于mid的点为1，小于mid的点为0，mid&lt;=答案时，总1数&gt;=总0数；</p><p>①要求所有可达边不存在边的两端点均为1；<br />若存在，则路径可在这两点间反复横跳，使美丽值大于等于此点，此时应向右二分。</p><p>②要求起始点与目标点不均为0；<br />若满足，由于路径中不存在两连续的1，则路径总1数最大的情况即为 01010…1010，此时总0数必大于总1数，此时应向左二分。</p><p>③要求存在一条路径满足标记为 01010…101 或 10101…010 或 10101…101，从边的角度看，也可以描述为，存在一条路径，其上每条边的两端不全为0。<br />若路径上有一条00边，由于没有11边进行补齐，1的数量将永远小于等于0的数量。</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; rod[<span class="hljs-number">200005</span>];<br><span class="hljs-type">int</span> n,t,MAX;<br><span class="hljs-type">int</span> a[<span class="hljs-number">200005</span>],vis[<span class="hljs-number">200005</span>],f[<span class="hljs-number">200005</span>],s;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    vis[x]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;rod[x].<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!vis[rod[x][i]])<br>        <span class="hljs-built_in">dfs1</span>(rod[x][i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> p,<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    f[p]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;rod[p].<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!f[rod[p][i]]&amp;&amp;(a[p]&gt;=x||a[rod[p][i]]&gt;=x))<br>        <span class="hljs-built_in">dfs2</span>(rod[p][i],x);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        <span class="hljs-keyword">if</span>(vis[i]&amp;&amp;a[i]&gt;=x)<span class="hljs-comment">//判据一</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;rod[i].<span class="hljs-built_in">size</span>();j++)<br>                <span class="hljs-keyword">if</span>(a[rod[i][j]]&gt;=x)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span>(a[s]&lt;x&amp;&amp;a[t]&lt;x)<span class="hljs-comment">//判据二</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">memset</span>(f,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> f);<br>    <span class="hljs-built_in">dfs2</span>(s,x);<br>    <span class="hljs-keyword">return</span> f[t];<span class="hljs-comment">//判据三</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T,m,e,b;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;T);<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        MAX=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);<br>        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> vis);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        rod[i].<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>            MAX=<span class="hljs-built_in">max</span>(MAX,a[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;b,&amp;e);<br>            rod[e].<span class="hljs-built_in">push_back</span>(b);<span class="hljs-comment">//建图</span><br>            rod[b].<span class="hljs-built_in">push_back</span>(e);<br>        &#125;<br>        <span class="hljs-built_in">dfs1</span>(s);<span class="hljs-comment">//判断可达性</span><br>        <span class="hljs-keyword">if</span>(!vis[t])<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=MAX;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        &#123;<br>            <span class="hljs-type">int</span> mid=l+r+<span class="hljs-number">1</span> &gt;&gt;<span class="hljs-number">1</span>;<span class="hljs-comment">//右取整二分</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(mid))l=mid;<br>            <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n%d\n&quot;</span>,l);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="b-比武招亲上"><a class="markdownIt-Anchor" href="#b-比武招亲上"></a> B 比武招亲（上）</h2><p>组合数，递推，多重集（<a href="https://blog.csdn.net/shulianghan/article/details/109124787">这里</a>和<a href="https://blog.csdn.net/kennyrose/article/details/7469528">这里</a>）</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>我们可以先枚举差值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">d\in[0,n-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，对于每一个差值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span>，都有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">n-d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> 种最小值。</p><p>确定了最小值和 d ，便可以确定最大值，下一步我们需要算出对于每一种 d 的一种最小值下有多少种组合：</p><p>我们可以讲问题转化成</p><blockquote><p>在网格内，从 ( 0 , 0 ) 点到 ( a , b ) 点的最短路径数。</p></blockquote><p>总共一定有 a + b 步，只需要选取其中 a 步向右走，剩下的便是 b 步向上走；<br />回到刚才的问题中，向上走便代表+1，向右走便代表处理下一个数，所以对于 d 和 m ，组合种类数为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mo stretchy="false">[</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><msubsup><mi>C</mi><mrow><mi>d</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>2</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>2</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">del[d]=C_{d+m-2}^{m-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2138779999999998em;vertical-align:-0.35963899999999993em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854239em;"><span style="top:-2.398692em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.1031310000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35963899999999993em;"><span></span></span></span></span></span></span></span></span></span>；</p><p>再接下来，我们需要获得 del[ i ] 的递推式：<br />对于 d ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mo stretchy="false">[</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><mfrac><mrow><msubsup><mo>∏</mo><mrow><mi>j</mi><mo>=</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><mrow><mi>d</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>2</mn></mrow></msubsup><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><mrow><mi>d</mi><mo stretchy="false">!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">del[d]=\frac {\prod_{j=m-1}^{d+m-2}(j)} {d!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.626147em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.281147em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.632227em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9270285714285714em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.46032428571428574em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>；<br />所以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>e</mi><mi>l</mi><mo stretchy="false">[</mo><mi>d</mi><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>l</mi><mo stretchy="false">[</mo><mi>d</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>d</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">del[d]=del[d-1]*(d+m-2)/d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">d</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault">d</span></span></span></span>；</p><p>除法用逆元处理即可。</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll N=<span class="hljs-number">5e5</span>+<span class="hljs-number">5</span>,M=<span class="hljs-number">998244353</span>;<br><span class="hljs-type">static</span> ll del[N]= &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>        a=a*a%M;<br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans%M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n,m,i,j;<br>    ll ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-comment">/*if(m==1)ans=0;//经测试，并不需要对 m==1or2 特判</span><br><span class="hljs-comment">    else if(m==2)</span><br><span class="hljs-comment">    &#123;</span><br><span class="hljs-comment">        for(i=1; i&lt;=n-1; i++)</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            ans+=i*(n-i)%M;</span><br><span class="hljs-comment">            ans%=M;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    else*/</span><br>    &#123;<br>        del[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>            &#123;<br>                del[i]=(del[i<span class="hljs-number">-1</span>]*(m<span class="hljs-number">-2</span>+i))%M*<span class="hljs-built_in">qm</span>(i,M<span class="hljs-number">-2</span>)%M;<br>                del[i]%=M;<br>            &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)ans+=del[i]*(n-i)%M*i,ans%=M;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="d-石子游戏"><a class="markdownIt-Anchor" href="#d-石子游戏"></a> D   石子游戏</h2><p>差分</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>先构建差分数组，a[ i ] 代表第 i 堆比第 i - 1 堆多的石子数。</p><p>进行一次从 b 开始的 k 堆石子个数均+1的操作体现在差分数组上就是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>b</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>b</mi><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">[</mo><mi>b</mi><mo>+</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>b</mi><mo>+</mo><mi>k</mi><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">a[b]=a[b]+1,a[b+k]=a[b+k]-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；</p><p>我们的目标就是通过操作将差分数组变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>x</mi><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[x,0,0,...]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose">]</span></span></span></span>；</p><p>由于最左侧的值不是常量（猜想是所有堆的最大石子数），我选择从右向左遍历数组，直至 i - k ==1 ：</p><p>如果a[ i ] &gt; 0，通过进行 a[ i ] 步操作，使 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mi>k</mi><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">a[i-k]=a[ i - k ] + a[ i ],a[i]=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>；<br />如果a[ i ] &lt; 0，此时我们可以看作第 i 堆与其右侧所有堆石子个数相同，并小于第 i - 1 堆的石子数。如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>k</mi><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">(n - i + 1 )\%k==0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，即 i 及其右侧石子堆数为 k 的倍数，此时即可通过 -a[ i ] * (n - i + 1 )/k 次操作补齐；如果不能被 k 整除，则无法凑成所有堆石子数相同的情况。</p><p>对于第 2 ~ k 堆，还需要再检查其差分 ，如果某位大于 0，或 某位小于 0 且(n - i + 1 )%k!=0，同样无法实现。</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>,M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-type">static</span> ll a[N];<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> a);<br>        <span class="hljs-type">int</span> n,last=<span class="hljs-number">0</span>,now,f=<span class="hljs-number">1</span>,i,k;<br>        cin&gt;&gt;n&gt;&gt;k;<br>        ll op=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;now),a[i]=now-last,last=now;<br>        <span class="hljs-keyword">for</span>(i=n;i&gt;=k+<span class="hljs-number">1</span>&amp;&amp;f;i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i]&gt;<span class="hljs-number">0</span>)op+=a[i],a[i-k]+=a[i];<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]&lt;<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>((n-i+<span class="hljs-number">1</span>)%k==<span class="hljs-number">0</span>)op+=(n-i+<span class="hljs-number">1</span>)/k*(-a[i]);<br>                <span class="hljs-keyword">else</span> f=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=k;i&gt;=<span class="hljs-number">2</span>&amp;&amp;f;i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i]&gt;<span class="hljs-number">0</span>)f=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]&lt;<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>((n-i+<span class="hljs-number">1</span>)%k==<span class="hljs-number">0</span>)op+=(n-i+<span class="hljs-number">1</span>)/k*(-a[i]);<br>                <span class="hljs-keyword">else</span> f=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,op);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f我的心是冰冰的"><a class="markdownIt-Anchor" href="#f我的心是冰冰的"></a> F我的心是冰冰的</h2><p>签到题</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>由于是树，没有环状结构，便可使用如下策略：</p><p>第一层填 A 色，第二层填 B 色，第三层填 A 色…</p><p>所以结果即为 <code>(n==1)?1:2</code></p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">5e5</span>+<span class="hljs-number">5</span>,M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,n,i,a,b;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(n==<span class="hljs-number">1</span>)?<span class="hljs-number">1</span>:<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意要把没用的数据吃掉！</p><h2 id="g-模仿游戏"><a class="markdownIt-Anchor" href="#g-模仿游戏"></a> G 模仿游戏</h2><p>贪心</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>tim1与tim2代表鸽鸽与妹妹的打怪队列长度；</p><p>如果此怪未曾遇到过，则将其加入tim1队列；</p><p>如果遇到过：<br />若是此分钟出现的，能打它的最近时间是下一分钟；<br />若是非此分钟出现的，则能打它的最近时间是此分钟；</p><p>还有就是鸽鸽对妹妹的帮助机制：<br />如果此分钟鸽鸽没有打怪，且妹妹有未打的怪，则鸽鸽帮助妹妹打一个怪；<br />（只能帮助一个，如果鸽鸽上一分钟没有打怪，帮助的即为此分钟刷出的一个；如果上一分钟有打怪，则鸽鸽此分钟只能打一个）</p><p>加入队列时，比较该队列长度+1与最近打此怪时间的最大值。</p><p>对于maxn为什么要取2e5还是不太清楚。</p><p>另：多给自己两组样例</p><blockquote><blockquote><p>输入1</p></blockquote><p>1<br />5<br />1 1<br />1 2<br />1 3<br />1 2<br />1 3</p></blockquote><blockquote><blockquote><p>输出1</p></blockquote><p>3</p></blockquote><blockquote><blockquote><p>输入2</p></blockquote><p>1<br />5<br />1 1<br />2 2<br />2 3<br />2 2<br />2 3</p></blockquote><blockquote><blockquote><p>输出2</p></blockquote><p>4</p></blockquote><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> t,n,tim1,tim2;<br><span class="hljs-type">int</span> vis[MAXN];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">while</span>(t--)&#123;<br>        tim1=tim2=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(vis,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(vis));<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        vector&lt;<span class="hljs-type">int</span>&gt;arr[MAXN];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=N;i++)<br>        &#123;<br>            <span class="hljs-type">int</span> a,b;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br>            arr[a].<span class="hljs-built_in">push_back</span>(b);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;MAXN;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i].<span class="hljs-built_in">size</span>();j++)<br>                <span class="hljs-keyword">if</span>(!vis[arr[i][j]])<br>                &#123;<br>                    tim1=<span class="hljs-built_in">max</span>(tim1+<span class="hljs-number">1</span>,i);<br>                    vis[arr[i][j]]=i;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(i==vis[arr[i][j]])tim2=<span class="hljs-built_in">max</span>(tim2+<span class="hljs-number">1</span>,i+<span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">else</span> tim2=<span class="hljs-built_in">max</span>(tim2+<span class="hljs-number">1</span>,i);<br>                &#125;<br>            <span class="hljs-keyword">if</span>(tim2&gt;tim1&amp;&amp;tim1&lt;i)<br>            &#123;<br>                tim2--;<br>                tim1=i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">max</span>(tim2,tim1));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021牛客寒假算法基础集训营4（A B D E F G H J）</title>
    <link href="/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A54%EF%BC%88A%20B%20D%20E%20F%20G%20H%20J%EF%BC%89/"/>
    <url>/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A54%EF%BC%88A%20B%20D%20E%20F%20G%20H%20J%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/9984#question">这里</a></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>个人能力有限，有的题目实在知识点欠缺太多，这里是大佬的<a href="https://blog.csdn.net/qq_46276931/article/details/113871386">题解</a></p><h2 id="a-九峰与签到题"><a class="markdownIt-Anchor" href="#a-九峰与签到题"></a> A 九峰与签到题</h2><p>签到题</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>持续模拟打标记即可，注意题目描述：他认为<strong>任意时间内</strong>通过率大于等于50%的题为签到题</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> m,n,i,j;<br>    <span class="hljs-type">int</span> ac[<span class="hljs-number">25</span>]=&#123;<span class="hljs-number">0</span>&#125;,sb[<span class="hljs-number">25</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">bool</span> pro[<span class="hljs-number">25</span>];<br>    <span class="hljs-type">char</span> g[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> gq;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)pro[i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;gq);<br>        sb[gq]++;<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(g,<span class="hljs-string">&quot;AC&quot;</span>))ac[gq]++;<br>        <span class="hljs-keyword">if</span>(ac[gq]*<span class="hljs-number">1.0</span>/sb[gq]&lt;<span class="hljs-number">0.5</span>)pro[gq]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(pro[i]&amp;&amp;sb[i])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,i),f=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="b-武辰延的字符串"><a class="markdownIt-Anchor" href="#b-武辰延的字符串"></a> B 武辰延的字符串</h2><p>哈希字符串、二段性二分</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>这道题首先想到的就是 O(n<sup>2</sup>) 的二分，显然是要爆的，但是 s<sub>j</sub> 是有二段性的，即如果 s<sub>ja</sub> 满足条件且 s<sub>j(a+1)</sub> 不满足，则所有的 s<sub>jp</sub>( p&lt;=a ) 均满足，所有的 s<sub>jq</sub>( q&gt;a ) 均不满足。</p><p>有了二段性，我们便可以进行二分。</p><p>对于二分的 check 过程，我们可以用哈希字符串在 O(1) 的时间复杂度内完成判断，关于哈希字符串，可以参照<a href="https://blog.csdn.net/weixin_45823991/article/details/104135180">这里</a>。</p><p>代码的细节还蛮多需要注意的。</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>string s,t;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>,P=<span class="hljs-number">131</span>;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>ll a[N],b[N];<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span><span class="hljs-comment">//快速幂</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>        a=a*a%M;<br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">makehash</span><span class="hljs-params">(string&amp; str,ll aim[])</span><span class="hljs-comment">//构建哈希字符串</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    aim[<span class="hljs-number">0</span>]=str[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-comment">//printf(&quot;%d &quot;,aim[0]);</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;str[i];i++)<br>    &#123;<br>        aim[i]=aim[i<span class="hljs-number">-1</span>]*P%M+str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        aim[i]%=M;<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">gethash</span><span class="hljs-params">(ll aim[],<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span><span class="hljs-comment">//摘取子串的哈希字符串</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (aim[r]+M-aim[l<span class="hljs-number">-1</span>]*<span class="hljs-built_in">qm</span>(P,r-l+<span class="hljs-number">1</span>)%M)%M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;s;<br>    cin&gt;&gt;t;<br>    <span class="hljs-built_in">makehash</span>(s,a);<br>    <span class="hljs-built_in">makehash</span>(t,b);<br>    <span class="hljs-type">int</span> i,j;<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;s[i]==t[i]&amp;&amp;s[i]&amp;&amp;t[i];i++)<br>    &#123;<br>        <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=<span class="hljs-built_in">min</span>(s.<span class="hljs-built_in">length</span>(),t.<span class="hljs-built_in">length</span>()<span class="hljs-number">-1</span>-i),mid;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        &#123;<br>            mid=l+r+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(a[mid<span class="hljs-number">-1</span>]==<span class="hljs-built_in">gethash</span>(b,i+<span class="hljs-number">1</span>,i+mid))l=mid;<br>            <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>        &#125;<br>        ans+=l;<br>    &#125;<br>    cout&lt;&lt;ans;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="d-温澈滢的狗狗"><a class="markdownIt-Anchor" href="#d-温澈滢的狗狗"></a> D 温澈滢的狗狗</h2><p>容斥，二分</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p><strong>亲密值是狗狗编号差值，而不是颜色编号差值</strong>，在这里耽误了自己不少时间。</p><p><img src="https://img-blog.csdnimg.cn/202103071335188.png" alt="在这里插入图片描述" /></p><p>首先对于1e10的数据量，模拟是会爆的，而且选择的亲密值上界越高，狗狗对数就越多，存在单调性，所以选择二分进行计数；</p><p>我们需要通过二分找出一个最大的亲密值上界 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>，使得满足亲密值小于等于此值的狗狗对数严格小于 k ，再对亲密值为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">l+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的狗狗对进行模拟；</p><p>如何计算亲密值小于等于 mid 的狗狗对数：</p><p>我们可以使用容斥思想，对数=编号差值小于等于mid的<strong>所有</strong>狗狗对数-编号差值小于等于mid的<strong>同色</strong>狗狗对数；</p><p>差值为1的狗狗有 n-1 对，差值为2有 n-2 对，…<br />依据等差数列求和公式，所有狗狗对数即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>+</mo><mi>n</mi><mo>−</mo><mi>x</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>x</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{(n-1+n-x)*x}2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">x</span><span class="mclose mtight">)</span><span class="mbin mtight">∗</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>；</p><p>对于同色狗狗，我们可以在每个颜色的狗狗集合内使用滑窗思想，计算以集合内每只狗狗为最小值时，有多少差值小于等于mid的狗狗对，具体可以见注释。</p><p>至于非法输入判定：</p><p>如果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">(</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">cnt(mid)&lt;=k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>，mid 值会持续右移，如果输入数据非法，mid 会持续右移至 r 的初始值，我只需要将 r 的初始值设为一个不合法的值，即可区分非法输入。</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>ll n,k;<br><span class="hljs-type">int</span> col[<span class="hljs-number">100005</span>];<span class="hljs-comment">//存第 i 只狗狗颜色</span><br>vector&lt;<span class="hljs-type">int</span>&gt; num[<span class="hljs-number">100005</span>];<span class="hljs-comment">//存颜色编号为 i 的狗狗集合</span><br><br><span class="hljs-function">ll <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll sum=(<span class="hljs-number">2</span>*n<span class="hljs-number">-1</span>-x)*x/<span class="hljs-number">2</span>;<span class="hljs-comment">//所有狗狗对数</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> r=<span class="hljs-number">0</span>;<span class="hljs-comment">//滑窗右界</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;l&lt;num[i].<span class="hljs-built_in">size</span>();l++)<span class="hljs-comment">//遍历滑窗左界</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(r&lt;num[i].<span class="hljs-built_in">size</span>()&amp;&amp;num[i][r]-num[i][l]&lt;=x)r++;<span class="hljs-comment">//右滑至右界非法</span><br>            sum-=(r-l<span class="hljs-number">-1</span>);<span class="hljs-comment">//区间长即为在颜色i中，以l为小号的非法狗狗对数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-type">int</span> i,g;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;col[i]);<br>        num[col[i]].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>,r=n+<span class="hljs-number">1</span>,mid;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    &#123;<br>        mid=l+r+<span class="hljs-number">1</span> &gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">cnt</span>(mid)&lt;k)l=mid;<br>        <span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(l==n+<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<span class="hljs-comment">//亲密值在合法情况下不可能为 n+1</span><br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        k-=<span class="hljs-built_in">cnt</span>(l);<br>        <span class="hljs-comment">//printf(&quot;*%d %lld\n&quot;,l,k);</span><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i+<span class="hljs-number">1</span>+l&lt;=n;i++)<span class="hljs-comment">//在亲密值为 l+1 中模拟</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(col[i]!=col[i+<span class="hljs-number">1</span>+l])k--;<br>            <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,i,i+<span class="hljs-number">1</span>+l);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-九峰与子序列"><a class="markdownIt-Anchor" href="#e-九峰与子序列"></a> E 九峰与子序列</h2><p>哈希字符串，dp</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>B题思路中有关于哈希字符串的简介链接。</p><p>本题类似于01背包问题，即对每个字符串有选与不选两种情况，n个字符串共同组成长度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>k</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|k|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">∣</span></span></span></span>的串；</p><p>如果此字符串与目标字符串的对应段匹配，即选，否则即不选；</p><p>构建dp数组<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>即为使用前 i 个字串，能组成至目标串第 j 位的方法数；</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><mo stretchy="false">]</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mo>=</mo><mi>k</mi><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi mathvariant="normal">∣</mi><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][j]=dp[i-1][j]+dp[i-1][j-|a[i]|]*(a[i]==k[j-|a[i]|+1,j])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">∣</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></p><p>判断字符串相等时用哈希字符串可以将时间复杂度降为 O(1)；</p><p>遍历长度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>k</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|k|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">∣</span></span></span></span>时，需要从后向前，避免同一个字符串被使用多次；</p><p>时间复杂度为O(n|k|)，卡的比较紧。</p><p>注意：函数外定义数组时<strong>不能直接初始化</strong>（p[5000006]={1}）<br /><em>有的编译环境也可以</em></p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>,P=<span class="hljs-number">131</span>,N=<span class="hljs-number">5000006</span>;<br>ll p[<span class="hljs-number">5000006</span>];<span class="hljs-comment">//存P的幂次，用快速幂会超时</span><br><br><span class="hljs-function">ll <span class="hljs-title">gethash</span><span class="hljs-params">(ll aim[],ll l,ll r)</span><span class="hljs-comment">//摘取子串的哈希字符串</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(l==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> aim[r];<br>    <span class="hljs-keyword">return</span> (aim[r]+M-aim[l<span class="hljs-number">-1</span>]*p[r-l+<span class="hljs-number">1</span>]%M)%M;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> k[N],a[N];<span class="hljs-comment">//k是目标字符串，a是目前字符串</span><br>    ll z[N],ha;<span class="hljs-comment">//z是目标字符串的哈希值数组，ha是目前字符串的哈希值</span><br>    <span class="hljs-type">int</span> n,i,j;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,k);<br>    p[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    z[<span class="hljs-number">0</span>]=k[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-built_in">strlen</span>(k);i++)<span class="hljs-comment">//计算p的幂次及哈希化目标字符串</span><br>    &#123;<br>        p[i]=p[i<span class="hljs-number">-1</span>]*P%M;<br>        z[i]=(z[i<span class="hljs-number">-1</span>]*P+k[i]-<span class="hljs-string">&#x27;a&#x27;</span>)%M;<br>    &#125;<br>    <span class="hljs-type">int</span> dp[N]=&#123;<span class="hljs-number">1</span>&#125;;<span class="hljs-comment">//dp数组</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,a);<br>        ha=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-built_in">strlen</span>(a);j++)<span class="hljs-comment">//计算目前字符串的哈希值</span><br>        &#123;<br>            ha=(ha*P+a[j]-<span class="hljs-string">&#x27;a&#x27;</span>)%M;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-built_in">strlen</span>(k);j&gt;=<span class="hljs-built_in">strlen</span>(a);j--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(dp[j-<span class="hljs-built_in">strlen</span>(a)]&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">//如果此位 之前的字符串已达</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">gethash</span>(z,j-<span class="hljs-built_in">strlen</span>(a)+<span class="hljs-number">1</span><span class="hljs-number">-1</span>,j<span class="hljs-number">-1</span>)==ha)dp[j]+=dp[j-<span class="hljs-built_in">strlen</span>(a)];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,dp[<span class="hljs-built_in">strlen</span>(k)]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-魏迟燕的自走棋"><a class="markdownIt-Anchor" href="#f-魏迟燕的自走棋"></a> F 魏迟燕的自走棋</h2><p>贪心，并查集</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>这道题的一个关键就是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">k_i\in\{1,2\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mclose">}</span></span></span></span>。</p><p>首先易得，优先配发增益更大的武器能使总增益值更大；</p><p>在具体分配时：</p><p>举例来说：<br />如果有一个武器可以分配给1，2，我们便可以认为此武器可以被使用，且可以在1，2之间随意调换，且空位为1；<br />若又有一武器可以分配给2，3，我们便可以认为此武器可以被使用，且这两个武器可以通过在1，2，3间调换使任一玩家无武器，空位为1；<br />若再有一武器可以分配给1，3，我们便可以认为此武器可以被使用，且使1，2，3均有武器，空位为0；</p><p>所以，一个武器可以串起总空位大于0的两个不同集合，且新集合空位数为旧集合空位和-1；<br />若一个武器可用范围是在同一集合的两个元素，如果该集合有空位，则此武器可用，空位-1；<br />对于可用人数为1的武器，我们可以认为可用元素是两个相同元素，便可以归类为上面的情况。</p><p>这个过程可以通过并查集实现。</p><p>初始化时，我们使得<code>fa[i]=i</code>的同时，也要初始化<code>lef[i]=1</code>。</p><p>我们可以发现，任何时候，任一集合空位数只能为0或1；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>,M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> fa[N],lef[N];<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    <span class="hljs-type">int</span> a,b,w;<br>&#125;e[N];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a,node b)</span></span>&#123;<br>     <span class="hljs-keyword">return</span> a.w&gt;b.w;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[x]!=x)fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>    <span class="hljs-keyword">return</span> fa[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,n,m,k;<br>    ll ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)fa[i]=i,lef[i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>        <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;e[i].a),e[i].b=e[i].a;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;e[i].a,&amp;e[i].b);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;e[i].w);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(e+<span class="hljs-number">1</span>,e+m+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> af=<span class="hljs-built_in">find</span>(e[i].a),bf=<span class="hljs-built_in">find</span>(e[i].b);<br>        <span class="hljs-keyword">if</span>(lef[af]||lef[bf])<span class="hljs-comment">//判断是否可用</span><br>        &#123;<br>            ans+=e[i].w;<br>            <span class="hljs-keyword">if</span>(af==bf)lef[af]=<span class="hljs-number">0</span>;<span class="hljs-comment">//判断两集合关系</span><br>            <span class="hljs-keyword">else</span> fa[bf]=af,lef[af]+=lef[bf]<span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="g-九峰与蛇形填数"><a class="markdownIt-Anchor" href="#g-九峰与蛇形填数"></a> G 九峰与蛇形填数</h2><p>模拟</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>这道题卡得比较狠：对m个矩阵依次填会爆，对每一个位置判断在哪一个小矩阵里再填还会爆。</p><p>所以我们要先找到能包含所有有值的位置的最小矩形，在此矩形中遍历每一个位置，判断在哪一个矩阵里再填数。</p><p>还有另一种方法，翻别人代码时发现的，就是反向枚举m个子矩阵，在对空格填数时，在该格打上一个”路标“，指示此矩阵在该行的最后一个数的位置，在再次扫过此格时可以直接跳到该位置，时间复杂度比上面的还小一些。</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2003</span>,M=<span class="hljs-number">3003</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> n,m,a[N][N]= &#123;<span class="hljs-number">0</span>&#125;,bi[M],bj[M],k[M];<br>    <span class="hljs-type">int</span> i,j,p,q,pmi,pmx,qmi,qmx;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    pmi=qmi=n;<br>    pmx=qmx=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;bi[i],&amp;bj[i],&amp;k[i]);<br>        pmi=<span class="hljs-built_in">min</span>(pmi,bi[i]),qmi=<span class="hljs-built_in">min</span>(qmi,bj[i]);<span class="hljs-comment">//更新有值的边界</span><br>        pmx=<span class="hljs-built_in">max</span>(pmx,bi[i]+k[i]<span class="hljs-number">-1</span>),qmx=<span class="hljs-built_in">max</span>(qmx,bj[i]+k[i]+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(p=pmi; p&lt;=pmx; p++)<br>        <span class="hljs-keyword">for</span>(q=qmi; q&lt;=qmx; q++)<br>            <span class="hljs-keyword">for</span>(i=m; i&gt;=<span class="hljs-number">1</span>; i--)<span class="hljs-comment">//遍历矩阵</span><br>                <span class="hljs-keyword">if</span>(p&gt;=bi[i]&amp;&amp;p&lt;=bi[i]+k[i]<span class="hljs-number">-1</span>&amp;&amp;q&gt;=bj[i]&amp;&amp;q&lt;=bj[i]+k[i]<span class="hljs-number">-1</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(p-bi[i]&amp;<span class="hljs-number">1</span>)a[p][q]=(p-bi[i]+<span class="hljs-number">1</span>)*k[i]-(q-bj[i]);<br>                    <span class="hljs-keyword">else</span> a[p][q]=(p-bi[i])*k[i]+(q-bj[i]+<span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;=n; j++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i][j]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注：这道题题干中x是行数，y是列数。</p><h2 id="h-吴楚月的表达式"><a class="markdownIt-Anchor" href="#h-吴楚月的表达式"></a> H 吴楚月的表达式</h2><p>DFS</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>此题中任一表达式均可用 a + b 表示：<br />如果运算为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord mathdefault">n</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>a</mi><mo mathvariant="normal">′</mo></msup><mo>+</mo><msup><mi>b</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">a=a^\prime+b^\prime,b=n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>;<br />如果运算为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">-n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault">n</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>a</mi><mo mathvariant="normal">′</mo></msup><mo>+</mo><msup><mi>b</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mi>M</mi><mo>−</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">a=a^\prime+b^\prime,b=M-n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.835222em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>（负数取模会出问题）;<br />如果运算为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">*n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span><span class="mord mathdefault">n</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>a</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><mi>b</mi><mo>=</mo><msup><mi>b</mi><mo mathvariant="normal">′</mo></msup><mo>∗</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">a=a^\prime,b=b^\prime*n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>;<br />如果运算为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">/</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">/n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span><span class="mord mathdefault">n</span></span></span></span>，则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><msup><mi>a</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><mi>b</mi><mo>=</mo><msup><mi>b</mi><mo mathvariant="normal">′</mo></msup><mo>∗</mo><msup><mi>n</mi><mrow><mi>M</mi><mo>−</mo><mn>2</mn></mrow></msup><mi mathvariant="normal">%</mi><mi>M</mi></mrow><annotation encoding="application/x-tex">a=a^\prime,b=b^\prime*n^{M-2}\%M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8968909999999999em;vertical-align:-0.05556em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>（除法取模会出问题，所以用逆元处理）.</p><p>接下来从根部向下DFS即可。</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>,M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>;<br>vector&lt;ll&gt;son[N];<br>ll num[N],ans[N],n;<br><span class="hljs-type">char</span> o[N];<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>        a=a*a%M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(ll a,ll b,<span class="hljs-type">int</span> no)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">if</span>(o[no<span class="hljs-number">-2</span>]==<span class="hljs-string">&#x27;*&#x27;</span>)<br>    &#123;<br>        b=b*num[no]%M;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o[no<span class="hljs-number">-2</span>]==<span class="hljs-string">&#x27;/&#x27;</span>)<br>    &#123;<br>        b=b*<span class="hljs-built_in">qm</span>(num[no],M<span class="hljs-number">-2</span>)%M;<span class="hljs-comment">//逆元</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o[no<span class="hljs-number">-2</span>]==<span class="hljs-string">&#x27;+&#x27;</span>)<br>    &#123;<br>        a=(a+b)%M;<br>        b=num[no]%M;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(o[no<span class="hljs-number">-2</span>]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>    &#123;<br>        a=(a+b)%M;<br>        b=-num[no]+M;<span class="hljs-comment">//负数求余会出现问题</span><br>    &#125;<br>    ans[no]=(a+b)%M;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;son[no].<span class="hljs-built_in">size</span>();i++)<span class="hljs-built_in">dfs</span>(a,b,son[no][i]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll i,j,g;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;num[i]);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;g);son[g].<span class="hljs-built_in">push_back</span>(i);&#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,o);<br>    ans[<span class="hljs-number">1</span>]=num[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;son[<span class="hljs-number">1</span>].<span class="hljs-built_in">size</span>();i++)<span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,num[<span class="hljs-number">1</span>],son[<span class="hljs-number">1</span>][i]);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>,ans[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="j-邬澄瑶的公约数"><a class="markdownIt-Anchor" href="#j-邬澄瑶的公约数"></a> J 邬澄瑶的公约数</h2><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>用 p<sub>i</sub> 表示第 i 个质数，则任意整数均可表示为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mo>∏</mo><msubsup><mi>p</mi><mi>i</mi><msub><mi>k</mi><mi>i</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">a=\prod p_{i}^{k_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.207872em;vertical-align:-0.276864em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.931008em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.276864em;"><span></span></span></span></span></span></span></span></span></span>；<br />则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><msubsup><mi>a</mi><mn>1</mn><msub><mi>t</mi><mn>1</mn></msub></msubsup><mo separator="true">,</mo><msubsup><mi>a</mi><mn>2</mn><msub><mi>t</mi><mn>2</mn></msub></msubsup><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo><mo>=</mo><mo>∏</mo><msubsup><mi>p</mi><mi>i</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><msub><mi>k</mi><msub><mi>a</mi><mn>1</mn></msub></msub><mo>∗</mo><msub><mi>t</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>k</mi><msub><mi>a</mi><mn>2</mn></msub></msub><mo>∗</mo><msub><mi>t</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">)</mo></mrow></msubsup></mrow><annotation encoding="application/x-tex">gcd(a_1^{t_1},a_2^{t_2},...)=\prod p_{i}^{min(k_{a_1}*t_1,k_{a_2}*t_2,...)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1417639999999998em;vertical-align:-0.266308em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8754559999999999em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8754559999999999em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1449000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3965839999999998em;vertical-align:-0.2768639999999999em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.11972em;"><span style="top:-2.4231360000000004em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.2947200000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645428571428571em;"><span style="top:-2.3569999999999998em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29964em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3570285714285715em;"><span></span></span></span></span></span></span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645428571428571em;"><span style="top:-2.3569999999999998em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3447999999999998em;margin-left:0em;margin-right:0.1em;"><span class="pstrut" style="height:2.64444em;"></span><span class="mord mtight">2</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29964em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3570285714285715em;"><span></span></span></span></span></span></span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2768639999999999em;"><span></span></span></span></span></span></span></span></span></span></p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">10000</span>;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1000000007</span>;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>        a=a*a%M;<br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans%M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> ny[N],zy[N],i,j;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;N;i++)zy[i]=<span class="hljs-number">1000000</span>;<span class="hljs-comment">//这个足够大数一定要够大</span><br>    <span class="hljs-type">int</span> n,gx[N+<span class="hljs-number">1</span>],gp[N+<span class="hljs-number">1</span>];<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;gx[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;gp[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(ny,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> ny);<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">2</span>;j&lt;=gx[i];j++)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(gx[i]%j==<span class="hljs-number">0</span>)<br>            &#123;<br>                ny[j]++;<br>                gx[i]/=j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">2</span>;j&lt;N;j++)<br>        &#123;<br>            zy[j]=<span class="hljs-built_in">min</span>(zy[j],ny[j]*gp[i]);<br>        &#125;<br>    &#125;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">2</span>;j&lt;N;j++)<br>    &#123;<br>        ans*=<span class="hljs-built_in">qm</span>(j,zy[j]);<br>        ans%=M;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 网络延时 一题的思路+代码（树的后序遍历&amp;DP）</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81%EF%BC%88%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86&amp;DP%EF%BC%89/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81%EF%BC%88%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86&amp;DP%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.acwing.com/problem/content/3218/">Acwing-3215.网络延时</a></p><blockquote><p>题目描述</p><blockquote><p>给定一个公司的网络，由 n 台交换机和 m 台终端电脑组成，交换机与交换机、交换机与电脑之间使用网络连接。<br />交换机按层级设置，编号为 1 的交换机为根交换机，层级为 1。<br />其他的交换机都连接到一台比自己上一层的交换机上，其层级为对应交换机的层级加 1。<br />所有的终端电脑都直接连接到交换机上。<br />当信息在电脑、交换机之间传递时，每一步只能通过自己传递到自己所连接的另一台电脑或交换机。<br />请问，电脑与电脑之间传递消息、或者电脑与交换机之间传递消息、或者交换机与交换机之间传递消息最多需要多少步。</p></blockquote></blockquote><blockquote><p>输入描述</p><blockquote><p>输入的第一行包含两个整数 n,m，分别表示交换机的台数和终端电脑的台数。<br />第二行包含 n−1 个整数，分别表示第 2、3、……、n 台交换机所连接的比自己上一层的交换机的编号。第 i 台交换机所连接的上一层的交换机编号一定比自己的编号小。<br />第三行包含 m 个整数，分别表示第 1、2、……、m 台终端电脑所连接的交换机的编号。</p></blockquote></blockquote><blockquote><p>输出描述</p><blockquote><p>输出一个整数，表示消息传递最多需要的步数。</p></blockquote></blockquote><blockquote><p>数据范围</p><blockquote><p>前 30% 的评测用例满足：n≤5,m≤5。<br />前 50% 的评测用例满足：n≤20,m≤20。<br />前 70% 的评测用例满足：n≤100,m≤100。<br />所有评测用例都满足：1≤n≤10000，1≤m≤10000。</p></blockquote></blockquote><blockquote><p>输入样例1</p><blockquote><p>4 2<br />1 1 3<br />2 1</p></blockquote></blockquote><blockquote><p>输出样例1</p><blockquote><p>4</p></blockquote></blockquote><p><img src="https://s2.loli.net/2022/08/02/ua7MfjQFUY6l4rp.png" alt="在这里插入图片描述" /></p><blockquote><p>输入样例2</p><blockquote><p>4 2<br />1 1 3<br />2 1</p></blockquote></blockquote><blockquote><p>输出样例2</p><blockquote><p>4</p></blockquote></blockquote><p><img src="https://s2.loli.net/2022/08/02/paSjHGAzZX3mrYQ.png" alt="在这里插入图片描述" /></p><blockquote><p>输入样例3</p><blockquote><p>15 10<br />1 7 1 2 2 1 1 4 2 1 1 11 13 2<br />11 3 8 9 13 10 6 12 7 12</p></blockquote></blockquote><blockquote><p>输出样例3</p><blockquote><p>6</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>样例3是测试组之一，反映了一些前两个样例没有的情况，下面会具体解释。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>首先对于这道题，交换机与电脑几乎没有区别，只是电脑一定作为末端，所以在处理时不需要特殊区分。</p><p>对于题求的消息传递最多需要的步数，可以分为两大种情况，一种是如样例1、2图示，最长距离两点在同一节点下不同的子树，另一种情况是两点存在亲子关系，即一个点在以另一点为根的子树的叶节点上。</p><p>对于第二种情况，消息传递最多需要的步数显然是<strong>根节点</strong>（1号交换机）与<strong>深度最大的叶节点</strong>（电脑或交换机）构成的对。</p><p>第一种情况，我们可以做如下处理：</p><p>对于最小值的情况，我们可以看成是该节点下 不同子树的 两个深度最深的 叶子的 深度之和。</p><p>我们可以后序遍历该树，对于每一个节点的深度先初始化为0。对于节点 i ，其父节点 fa[ i ] 的深度 dpl[ fa[ i ] ] = max( dpl[ fa[ i ] ] , dpl[ i ]+1 ) ，这样我们便可以得到每一个点的所在深度（到以其为根的子树的最远叶节点的距离）。</p><p>再对于所有度&gt;=2 的节点，找到 dpl 最大的两个叶节点，则以该点（度&gt;=2的点）为根的子树的题求量则为 dpl<sub>max1</sub> + dpl<sub>max2</sub> + 2 ，再更新目前题求量的最大值即可。</p><p>在构建后序遍历时，不能直接通过序号降序遍历，如样例三，则会出现一些问题：7在3之前被遍历，而后序遍历则是3在7前。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> dpl[<span class="hljs-number">20004</span>],fa[<span class="hljs-number">20004</span>]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//fa存上级节点</span><br>vector&lt;<span class="hljs-type">int</span>&gt;son[<span class="hljs-number">20004</span>];<span class="hljs-comment">//存下级节点</span><br>stack&lt;<span class="hljs-type">int</span>&gt;order;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">eno</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//构建后序遍历栈</span></span><br><span class="hljs-function"></span>&#123;<br>    order.<span class="hljs-built_in">push</span>(x);<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;son[x].<span class="hljs-built_in">size</span>();i++)<br>    &#123;<br>        <span class="hljs-built_in">eno</span>(son[x][i]);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(dpl,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> dpl);<br>    <span class="hljs-type">int</span> n,m,i,j,g,ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<span class="hljs-comment">//接收交换机</span><br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g);<br>        fa[i]=g;<br>        son[g].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(;i&lt;=n+m;i++)<span class="hljs-comment">//接收电脑</span><br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g);<br>        fa[i]=g;<br>        son[g].<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-built_in">eno</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span>(order.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        i=order.<span class="hljs-built_in">top</span>();<br>        order.<span class="hljs-built_in">pop</span>();<br>        dpl[fa[i]]=<span class="hljs-built_in">max</span>(dpl[fa[i]],dpl[i]+<span class="hljs-number">1</span>);<span class="hljs-comment">//更新上级节点的dpl</span><br>        <span class="hljs-keyword">if</span>(son[i].<span class="hljs-built_in">size</span>()&gt;=<span class="hljs-number">2</span>)<span class="hljs-comment">//度&gt;=2</span><br>        &#123;<br>            <span class="hljs-type">int</span> mx1=<span class="hljs-number">0</span>,mx2=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;son[i].<span class="hljs-built_in">size</span>();j++)<span class="hljs-comment">//找最大的两个叶节点dpl</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(dpl[son[i][j]]&gt;mx1)<br>                &#123;<br>                    mx2=mx1;<br>                    mx1=dpl[son[i][j]];<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dpl[son[i][j]]==mx1||dpl[son[i][j]]&gt;mx2)<br>                &#123;<br>                    mx2=dpl[son[i][j]];<br>                &#125;<br>            &#125;<br>            ans=<span class="hljs-built_in">max</span>(ans,mx1+mx2+<span class="hljs-number">2</span>);<span class="hljs-comment">//更新题求量</span><br>        &#125;<br>    &#125;<br>    ans=<span class="hljs-built_in">max</span>(ans,dpl[<span class="hljs-number">1</span>]);<span class="hljs-comment">//与第二大类情况做比较</span><br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
      <category>图与树</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>鱼塘钓鱼-贪心</title>
    <link href="/2021.01-06/%E9%B1%BC%E5%A1%98%E9%92%93%E9%B1%BC-%E8%B4%AA%E5%BF%83/"/>
    <url>/2021.01-06/%E9%B1%BC%E5%A1%98%E9%92%93%E9%B1%BC-%E8%B4%AA%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.acwing.com/problem/content/description/1264/">Acwing 1262. 鱼塘钓鱼</a>&amp;<a href="https://www.luogu.com.cn/problem/P1717">洛谷 P1717 钓鱼</a>&amp;<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=364">NEFU OJ-364 鱼塘钓鱼</a><br />（题目描述来自Acwing，代码为其AC代码，后附三者代码区别）</p><blockquote><p>题目描述</p><blockquote><p>有 N 个鱼塘排成一排，每个鱼塘中有一定数量的鱼，例如：N=5 时，如下表：<br />鱼塘编号12345<br />第1分钟能钓到的鱼的数量（1…1000）101420169<br />每钓鱼1分钟钓鱼数的减少量（1…100)24653<br />当前鱼塘到下一个相邻鱼塘需要的时间（单位：分钟）3544<br />即：在第 1 个鱼塘中钓鱼第 1 分钟内可钓到 10 条鱼，第 2 分钟内只能钓到 8 条鱼，……，第 5 分钟以后再也钓不到鱼了。<br />从第 1 个鱼塘到第 2 个鱼塘需要 3 分钟，从第 2 个鱼塘到第 3 个鱼塘需要 5 分钟，……<br />给出一个截止时间 T，设计一个钓鱼方案，从第 1 个鱼塘出发，希望能钓到最多的鱼。<br />假设能钓到鱼的数量仅和已钓鱼的次数有关，且每次钓鱼的时间都是整数分钟。</p></blockquote></blockquote><blockquote><p>输入描述</p><blockquote><p>共 5 行，分别表示：<br />第 1 行为 N；<br />第 2 行为第 1 分钟各个鱼塘能钓到的鱼的数量，每个数据之间用一空格隔开；<br />第 3 行为每过 1 分钟各个鱼塘钓鱼数的减少量，每个数据之间用一空格隔开；<br />第 4 行为当前鱼塘到下一个相邻鱼塘需要的时间；<br />第 5 行为截止时间 T。</p></blockquote></blockquote><blockquote><p>输出描述</p><blockquote><p>一个整数（不超过2<sup>31</sup>−1），表示你的方案能钓到的最多的鱼。</p></blockquote></blockquote><blockquote><p>数据范围</p><blockquote><p>1≤N≤100,<br />1≤T≤1000</p></blockquote></blockquote><blockquote><p>输入样例</p><blockquote><p>5<br />10 14 20 16 9<br />2 4 6 5 3<br />3 5 4 4<br />14</p></blockquote></blockquote><blockquote><p>输出样例</p><blockquote><p>76</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>看到这道题第一反应是DP，即 dp[ i ][ j ] 为有前 i 个池子时，时间 j 内能钓出的最大数量，但是最终没有解决有效性问题/大概。<br />最后决定贪心。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>由于是从第一个鱼塘开始，则若确定所到的最后一个鱼塘，便可知钓鱼的总时间（总时间-移动用时），接下来求出钓鱼量即可。</p><p>求出钓鱼量即要明确在各个鱼塘中分别的钓鱼量。为了保证总量最大，我们可以做如下处理：<br />对钓满前 a 个鱼塘来说<br />把各个鱼塘的初始分钟鱼量加入一降序的优先队列中，优先钓出最大的分钟鱼量；<br />如果第 i 个池子的第 j 分钟鱼量被钓出，则此池子的第 j + 1 分钟鱼量入队；<br />持续进行 钓鱼时间 次。</p><p>在这个过程中，虽然每分钟钓出的鱼来自鱼塘的顺序不是1,2,…但是全部都来自前 a 个鱼塘。如果每次钓出的鱼共有n1次来自1鱼塘，n2次来自2鱼塘，… ，na次来自a鱼塘，我们便可以认为在1鱼塘钓 n1 分钟鱼后，转移至2鱼塘，在2鱼塘钓 n2 分钟，…，在a鱼塘钓 na 分钟。实际上是是等价的。</p><p>知道了钓满前 a 个鱼塘的钓鱼最大量，我们便可以遍历a 1~n，找最大值。</p><p>时间复杂度O( T + N )</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n<br>        ,fo[<span class="hljs-number">102</span>]=&#123;<span class="hljs-number">0</span>&#125;,del[<span class="hljs-number">102</span>]=&#123;<span class="hljs-number">0</span>&#125;,tonext[<span class="hljs-number">102</span>]=&#123;<span class="hljs-number">0</span>&#125;,t<br>        ,i,j,k,fmx=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;<span class="hljs-comment">//总鱼塘数</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;fo[i]);<span class="hljs-comment">//初始分钟鱼量</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;del[i]);<span class="hljs-comment">//每分钟衰减量</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tonext[i]);<span class="hljs-comment">//到下一鱼塘用时</span><br>    cin&gt;&gt;t;<span class="hljs-comment">//总时间</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-comment">//遍历最后一个鱼塘的编号</span><br>    &#123;<br>        <span class="hljs-type">int</span> ti=t,fiall=<span class="hljs-number">0</span>;<span class="hljs-comment">//fiall是前 i 个鱼塘中的最大钓鱼量</span><br>        priority_queue&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt;que;<span class="hljs-comment">//优先队列，除了存储分钟鱼量还需存储对应的鱼塘编号，便于计算下一分钟到鱼量</span><br>        pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;fz;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i;j++)ti-=tonext[j];<span class="hljs-comment">//计算钓满前 i 个鱼塘的剩余钓鱼时间（减去转移用时）</span><br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=i;j++)que.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(fo[j],j));<span class="hljs-comment">//入队初始分钟鱼量</span><br>        <span class="hljs-keyword">while</span>(ti&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">//这里没有用while(ti--)是不排除ti已经小于0的情况</span><br>        &#123;<br>            ti--;<br>            fz=que.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//最大量出队</span><br>            que.<span class="hljs-built_in">pop</span>();<br>            fiall+=fz.first;<br>            que.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>((fz.first-del[fz.second])&gt;=<span class="hljs-number">0</span>?(fz.first-del[fz.second]):<span class="hljs-number">0</span>,fz.second));<br>            <span class="hljs-comment">//入队该池鱼的下一分钟鱼量，避免负数</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(fiall&gt;fmx)&#123;fmx=fiall;&#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,fmx);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注1：对于priority_queue&lt;pair&lt;int,int&gt; &gt;，默认排序依据是 pair.first 的降序；<br />注2：对于洛谷，调整接收顺序后，时间*12 即可；<br />注3：NEFU oj 上是多组输入。</p><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>有点类似于<a href="https://blog.csdn.net/Tan_Yuu/article/details/113575133">序列合并</a>，具体思想是相似的。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关押罪犯-并查集、贪心</title>
    <link href="/2021.01-06/%E5%85%B3%E6%8A%BC%E7%BD%AA%E7%8A%AF-%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%81%E8%B4%AA%E5%BF%83/"/>
    <url>/2021.01-06/%E5%85%B3%E6%8A%BC%E7%BD%AA%E7%8A%AF-%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%81%E8%B4%AA%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.acwing.com/problem/content/259/">Acwing 257.关押罪犯</a>&amp;<a href="https://www.luogu.com.cn/problem/P1525">洛谷 P1525 [NOIP2010 提高组] 关押罪犯</a><br />思路来源：<a href="https://www.acwing.com/solution/content/1001/">这里</a></p><blockquote><p>题目描述</p><blockquote><p>S 城现有两座监狱，一共关押着 N 名罪犯，编号分别为1~N。<br />他们之间的关系自然也极不和谐。<br />很多罪犯之间甚至积怨已久，如果客观条件具备则随时可能爆发冲突。<br />我们用“怨气值”（一个正整数值）来表示某两名罪犯之间的仇恨程度，怨气值越大，则这两名罪犯之间的积怨越多。<br />如果两名怨气值为 c 的罪犯被关押在同一监狱，他们俩之间会发生摩擦，并造成影响力为 c 的冲突事件。<br />每年年末，警察局会将本年内监狱中的所有冲突事件按影响力从大到小排成一个列表，然后上报到 S 城 Z 市长那里。<br />公务繁忙的 Z 市长只会去看列表中的第一个事件的影响力，如果影响很坏，他就会考虑撤换警察局长。<br />在详细考察了 N 名罪犯间的矛盾关系后，警察局长觉得压力巨大。<br />他准备将罪犯们在两座监狱内重新分配，以求产生的冲突事件影响力都较小，从而保住自己的乌纱帽。<br />假设只要处于同一监狱内的某两个罪犯间有仇恨，那么他们一定会在每年的某个时候发生摩擦。那么，应如何分配罪犯，才能使 Z 市长看到的那个冲突事件的影响力最小？这个最小值是多少？</p></blockquote></blockquote><blockquote><p>输入描述</p><blockquote><p>第一行为两个正整数 N 和 M，分别表示罪犯的数目以及存在仇恨的罪犯对数。<br />接下来的 M 行每行为三个正整数a<sub>j</sub>，b<sub>j</sub>，c<sub>j</sub>，表示a<sub>j</sub>号和b<sub>j</sub>号罪犯之间存在仇恨，其怨气值为c<sub>j</sub>。<br />数据保证1≤a<sub>j</sub>&lt;b<sub>j</sub>&lt;N,0&lt;c<sub>j</sub>≤10<sup>9</sup> 且每对罪犯组合只出现一次。</p></blockquote></blockquote><blockquote><p>输出描述</p><blockquote><p>输出共1行，为 Z 市长看到的那个冲突事件的影响力。<br />如果本年内监狱中未发生任何冲突事件，请输出0。</p></blockquote></blockquote><blockquote><p>数据范围</p><blockquote><p>N ≤ 20000 , M ≤ 100000</p></blockquote></blockquote><blockquote><p>样例输入</p><blockquote><p>4 6<br />1 4 2534<br />2 3 3512<br />1 2 28351<br />1 3 6618<br />2 4 1805<br />3 4 12884</p></blockquote></blockquote><blockquote><p>样例输出</p><blockquote><p>3512</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>y总给的方法是二分+染色法判断二分图，这个我不太会。可以参考<a href="https://www.acwing.com/solution/content/3042/">这篇题解</a>。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>这道题所求即是最大影响值最小的分配方案中，最大的影响值。</p><p>想让最大影响值最小，我们便需要首先让仇恨值最大的两名罪犯优先分配到不同监狱，再分配次大的，以此类推，直到某对罪犯无法分配。</p><p>那么我们应该如何标记对监狱的分配呢？</p><p>先大概说一下并查集补集，这道题中，如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><mi>y</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">father[x]=y+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 则说明x与y在不同监狱。<br />即通过+n，错过前n个数组位，在n+1~2*n的空间上建立一个扩展域来存放补集。</p><p>如果a,b罪犯在之前已经因为与c囚犯的怒气值分配进同一个监狱，就会发生如下情形：<br />若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow></msub><mo>&gt;</mo><msub><mi>A</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msub><mo separator="true">,</mo><msub><mi>A</mi><mrow><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo></mrow></msub><mo>&gt;</mo><msub><mi>A</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">A_{(a,c)}&gt;A_{(a,b)},A_{(b,c)}&gt;A_{(a,b)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">c</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">b</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">c</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>;<br />则在遍历至<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>对之前，就会有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mo stretchy="false">[</mo><mi>a</mi><mo stretchy="false">]</mo><mo>=</mo><mi>c</mi><mo>+</mo><mi>n</mi><mo separator="true">,</mo><mi>f</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mo stretchy="false">[</mo><mi>b</mi><mo stretchy="false">]</mo><mo>=</mo><mi>c</mi><mo>+</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">father[a]=c+n,father[b]=c+n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>;<br />此时就会出现<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mo stretchy="false">[</mo><mi>a</mi><mo stretchy="false">]</mo><mo>=</mo><mi>f</mi><mi>a</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mo stretchy="false">[</mo><mi>b</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">father[a]=father[b]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault">b</span><span class="mclose">]</span></span></span></span>;<br />即冲突无法避免，输出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>A</mi><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow></msub></mrow><annotation encoding="application/x-tex">A_{(a,b)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">a</span><span class="mpunct mtight">,</span><span class="mord mathdefault mtight">b</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span></span></span></span>即可。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll N=<span class="hljs-number">100005</span>;<br><span class="hljs-type">int</span> fa[N]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//n的数据范围是2e4，N是1e5，满足2*n</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">dat</span><br>&#123;<br>    <span class="hljs-type">int</span> a,b,c;<br>&#125;da[N];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(dat a,dat b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.c&gt;b.c;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> fa[x]==x?x:fa[x]=<span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,i;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;da[i].a,&amp;da[i].b,&amp;da[i].c);<span class="hljs-comment">//接收</span><br>    <span class="hljs-built_in">sort</span>(da+<span class="hljs-number">1</span>,da+<span class="hljs-number">1</span>+m,cmp);<span class="hljs-comment">//排序</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>*n;i++)fa[i]=i;<span class="hljs-comment">//初始化并查集</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;*%d %d\n&quot;,find(da[i].a),find(da[i].b));</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">find</span>(da[i].a)==<span class="hljs-built_in">find</span>(da[i].b))<span class="hljs-comment">//若无法分进不同监狱</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,da[i].c);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//若可以</span><br>        &#123;<br>            fa[<span class="hljs-built_in">find</span>(da[i].a)]=<span class="hljs-built_in">find</span>(da[i].b+n);<span class="hljs-comment">//注</span><br>            fa[<span class="hljs-built_in">find</span>(da[i].b)]=<span class="hljs-built_in">find</span>(da[i].a+n);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-comment">//若所有都被分完，无冲突</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注：这里若是<code>fa[find(da[i].a)]=da[i].b+n;</code>，则会爆MLE，迷惑</p><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NEFU 2021大一寒假集训总结赛 全题解</title>
    <link href="/2021.01-06/NEFU%202021%E5%A4%A7%E4%B8%80%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD%E6%80%BB%E7%BB%93%E8%B5%9B%20%E5%85%A8%E9%A2%98%E8%A7%A3/"/>
    <url>/2021.01-06/NEFU%202021%E5%A4%A7%E4%B8%80%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD%E6%80%BB%E7%BB%93%E8%B5%9B%20%E5%85%A8%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="http://acm.nefu.edu.cn/contestShow.php">这里</a></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>肝了两个半小时A，没过……<br />sl大佬也写<a href="https://blog.csdn.net/qq_39354847/article/details/113700119">题解</a>了</p><h2 id="a-set"><a class="markdownIt-Anchor" href="#a-set"></a> A SET</h2><p>最大公约数<br />感谢老师的标程~</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>任选两数 a,b 做 2*a-b 运算，可以理解成 a + a - b ，即 a 加上两数的差；<br />如果我们现在有 2 * a - b , a 即可通过 2 * ( 2 * a - b ) - a 得到 a + 2 * ( a - b )，即 a 加上两数差的二倍；<br />如果我们现在有 3 * a - 2 * b , 2 * a - b 即可通过 2 * ( 3 * a - 2 * b ) - ( 2 * a - b ) 得到 a + 3 * ( a - b )，即 a 加上两数差的三倍；</p><p>此时，对于 a , b 两数，能组成的所有数可以构成一个含 a , b 、公差为 a - b 的等差数列。</p><p>那所有可能被加入集合的元素即满足<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>m</mi><mi>j</mi></msub><mo>∗</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_i+ m_j * ( a_i - a_j )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.751388em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>（ a<sub>j</sub> 可以为计算出的元素值）</p><p>枚举显然是不现实的，我们可以使式子更加普适，转化成如下形式<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>+</mo><mi>m</mi><mo>∗</mo><mi>g</mi><mi>c</mi><mi>d</mi><mi mathvariant="normal">（</mi><msub><mi>a</mi><mn>2</mn></msub><mo>−</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo>−</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo>−</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant="normal">）</mi></mrow><annotation encoding="application/x-tex">a_{min}+ m * gcd（ a_{2}-a_{1},a_{3}-a_{2},...,a_{n}-a_{n-1}）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mord cjk_fallback">（</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">）</span></span></span></span></p><p>现在只需算出 gcd 并用 k 与 a<sub>min</sub> 的差对其取模即可。</p><p>我的过程可能不太好理解，可以直接参照sl大佬的题解。</p><p><em>看到标程之前的碎碎念：已知是需要去重，因为选两个相同的数，产生的还是那个数。好像还和等差数列有关。</em></p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(a&amp;&amp;b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a&gt;b)a%=b;<br>        <span class="hljs-keyword">else</span> b%=a;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        ll n,k,a[N]=&#123;<span class="hljs-number">0</span>&#125;,i,j;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]);<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+<span class="hljs-number">1</span>+n);<br>        ll g=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>        &#123;<br>            g=<span class="hljs-built_in">gcd</span>(g,a[i]-a[i<span class="hljs-number">-1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(g&amp;&amp;(a[<span class="hljs-number">1</span>]-k)%g==<span class="hljs-number">0</span>||a[<span class="hljs-number">1</span>]==k)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<span class="hljs-comment">//注</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注：标程存在的bug已通过特判修复：如果元素值均相同，g将为0，无法进行求余运算，此时若题给元素值不等于目标值，则NO，等于则YES。<br />感谢ph大佬的hack数据。</p><h2 id="b-密码解锁"><a class="markdownIt-Anchor" href="#b-密码解锁"></a> B 密码解锁</h2><p>快速幂取模+找规律</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>我是通过打表发现，对于每个基 a ，在 k 增长时，结果有一定的周期性。<br />但是具体的循环节和循环起点我没发现规律，便直接让代码自己去找。</p><p>先存下 k 取较小值（1,2,3…）时的的结果，每算出一个新值，便与前面的所有值比对，如果有相同的值，便可以找到循环节和循环起点，再计算 k 对应的值就好了。</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">qs</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a,<span class="hljs-type">long</span> <span class="hljs-type">long</span> b,<span class="hljs-type">long</span> <span class="hljs-type">long</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">1</span>%p;<br>    <span class="hljs-keyword">while</span>(b)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%p;<br>        a=a*a%p;<br>        b&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>  ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll a,k,i,j,li[<span class="hljs-number">20</span>]=&#123;<span class="hljs-number">0</span>&#125;,mbc,xhj=<span class="hljs-number">0</span>;<span class="hljs-comment">//mbc为第一次循环结束位置，xhj为循环节长度</span><br>    cin&gt;&gt;a&gt;&gt;k;<br>    li[<span class="hljs-number">1</span>]=a;<br>    mbc=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;<span class="hljs-number">20</span>&amp;&amp;!xhj;i++,mbc++)<br>    &#123;<br>        li[mbc+<span class="hljs-number">1</span>]=<span class="hljs-built_in">qs</span>(li[mbc],li[mbc],<span class="hljs-number">1000</span>);<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=mbc;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(li[j]==li[mbc+<span class="hljs-number">1</span>])<br>            &#123;<br>                xhj=mbc+<span class="hljs-number">1</span>-j;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(k&gt;mbc-xhj)<br>    &#123;k-=mbc-xhj;<br>    k%=xhj;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,li[mbc-xhj+k]);&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,li[k]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-夕日坂"><a class="markdownIt-Anchor" href="#c-夕日坂"></a> C 夕日坂</h2><p>个人是用滑窗做的</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>即先累乘，至成绩大于目标值时，除掉前面的，同时计算以被除掉的数为起点的区间长。</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>],n,i,j,b,l[<span class="hljs-number">100005</span>];<br>    ll m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    ll tim=<span class="hljs-number">1</span>;<br>    b=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        tim*=a[i];<br>        <span class="hljs-keyword">while</span>(tim&gt;m)<span class="hljs-comment">//大于目标值</span><br>        &#123;<br>            l[b]=i-b;<span class="hljs-comment">//更新区间长</span><br>            tim/=a[b];<br>            b++;<span class="hljs-comment">//更新起始位置</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=b;i&lt;=n;i++)<span class="hljs-comment">//如果最后一段始终没有超过目标值</span><br>    &#123;<br>        l[i]=n-i+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,l[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-小林的ac"><a class="markdownIt-Anchor" href="#d-小林的ac"></a> D 小林的AC</h2><p>字符串处理</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>分别计数aceptd六个字母的出现次数，统计每个字母能组成单词份数的最小值即可（份数即出现次数 / 在单个单词中的个数）。</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> g[<span class="hljs-number">50005</span>];<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;g)<br>    &#123;<br>        <span class="hljs-type">int</span> i,a=<span class="hljs-number">0</span>,c=<span class="hljs-number">0</span>,e=<span class="hljs-number">0</span>,p=<span class="hljs-number">0</span>,t=<span class="hljs-number">0</span>,d=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;g[i];i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;a&#x27;</span>)a++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;c&#x27;</span>)c++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;e&#x27;</span>)e++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;p&#x27;</span>)p++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;t&#x27;</span>)t++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(g[i]==<span class="hljs-string">&#x27;d&#x27;</span>)d++;<br>        &#125;<br>        <span class="hljs-type">int</span> ans=<span class="hljs-built_in">min</span>(e/<span class="hljs-number">2</span>,c/<span class="hljs-number">2</span>);<br>        ans=<span class="hljs-built_in">min</span>(ans,a);<br>        ans=<span class="hljs-built_in">min</span>(ans,p);<br>        ans=<span class="hljs-built_in">min</span>(ans,t);<br>        ans=<span class="hljs-built_in">min</span>(ans,d);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-小林刷题"><a class="markdownIt-Anchor" href="#e-小林刷题"></a> E 小林刷题</h2><p>贪心</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>这道题特别像<a href="https://blog.csdn.net/Tan_Yuu/article/details/113664161">这个</a>。</p><p>我们可以把排序问题拆分成从输入顺序开始的足够多次对换，只要我们找到能更趋近与所求结果的对换条件，我们便可以依照此条件直接排序。</p><p>假设现在有两道题，i 与 i + 1，我们要找到一种<strong>使对换后做两题时耗费的精力值更小</strong>的条件。</p><p>对换前，消耗精力值之和为<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>b</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>b</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>b</mi><mi>i</mi></msub><mo>∗</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">(b_1+b_2+...+b_{i-1})*a_i+(b_1+b_2+...+b_{i-1})*a_{i+1}+b_i*a_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.791661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p><p>对换后，消耗精力值之和为<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>b</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>b</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>∗</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mo stretchy="false">(</mo><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>b</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>∗</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">(b_1+b_2+...+b_{i-1})*a_i+b_{i+1}*a_i+(b_1+b_2+...+b_{i-1})*a_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p><p>减掉相同部分后，若满足对换后小于对换前，则有<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>b</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>∗</mo><msub><mi>a</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>b</mi><mi>i</mi></msub><mo>∗</mo><msub><mi>a</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">b_{i+1}*a_i&lt;b_i*a_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p><p>这道题的条件便是 b<sub>i+1</sub> / a<sub>i+1</sub> &lt; b<sub>i</sub> / a<sub>i</sub></p><p>通过结构体+cmp实现。</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pro</span><br>&#123;<br>    <span class="hljs-type">int</span> a,b;<br>&#125;p[<span class="hljs-number">500005</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(pro x,pro y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>)x.b/x.a&lt;(<span class="hljs-type">double</span>)y.b/y.a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;p[i].a,&amp;p[i].b);<br>    <span class="hljs-built_in">sort</span>(p+<span class="hljs-number">1</span>,p+n+<span class="hljs-number">1</span>,cmp);<br>    ll bs=<span class="hljs-number">0</span>,ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        ans+=bs*p[i].a;<br>        bs+=p[i].b;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-小林移石子"><a class="markdownIt-Anchor" href="#f-小林移石子"></a> F 小林移石子</h2><p>中位数</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>即找到一点，距离所有点的距离之和最短。<br />这个点便是所有点坐标的中位数。</p><p>和 <a href="https://www.acwing.com/problem/content/106/">货仓选址</a> 基本相同</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i,a[<span class="hljs-number">100005</span>];<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        ans+=<span class="hljs-built_in">abs</span>(a[i]-a[n+<span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-语汐玩游戏"><a class="markdownIt-Anchor" href="#g-语汐玩游戏"></a> G 语汐玩游戏</h2><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>在游戏规则限制内，从顺时针或逆时针方向看，三个牌的顺序是无法被改变的。</p><p>如样例来说，从顺时针方向读，三个牌的顺序永远是 ABCABCA…，如果目标顺序相同，则可解，如目标顺序不相同，如 ACBABCA… ，则不可解。</p><p>接收之后比对顺序即可。</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">6</span>]=&#123;<span class="hljs-number">0</span>&#125;,b[<span class="hljs-number">6</span>]=&#123;<span class="hljs-number">0</span>&#125;,ac=<span class="hljs-number">0</span>,bc=<span class="hljs-number">0</span>,f=<span class="hljs-number">-1</span>,i,j;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">5</span>];<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;A&#x27;</span>)a[ac++]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;B&#x27;</span>)a[ac++]=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;C&#x27;</span>)a[ac++]=<span class="hljs-number">3</span>;<br>    &#125;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;A&#x27;</span>)a[ac++]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;B&#x27;</span>)a[ac++]=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;C&#x27;</span>)a[ac++]=<span class="hljs-number">3</span>;<br>    &#125;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">1</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;A&#x27;</span>)b[bc++]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;B&#x27;</span>)b[bc++]=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;C&#x27;</span>)b[bc++]=<span class="hljs-number">3</span>;<br>    &#125;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;A&#x27;</span>)b[bc++]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;B&#x27;</span>)b[bc++]=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;C&#x27;</span>)b[bc++]=<span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">3</span>;i&lt;=<span class="hljs-number">5</span>;i++)b[i]=b[i<span class="hljs-number">-3</span>];<span class="hljs-comment">//延长目标串</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(b[i]==a[<span class="hljs-number">0</span>])<span class="hljs-comment">//比对</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">2</span>;j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(b[i+j]!=a[j])f=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(f==<span class="hljs-number">-1</span>)f=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f==<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-字符串之谜"><a class="markdownIt-Anchor" href="#h-字符串之谜"></a> H 字符串之谜</h2><p>DP</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>对于每一个 b ，能和前面的每一个 a 组成一个 ab 串；<br />对于每一个 c ，能和前面的每一个 ab 串组成一个 abc 串。</p><p>更新记录目前 a，ab，abc 的个数即可</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">1000006</span>];<br>    ll i,ans=<span class="hljs-number">0</span>,on=<span class="hljs-number">0</span>,tw=<span class="hljs-number">0</span>,tr=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;a;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;a[i];i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;a&#x27;</span>)on++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;b&#x27;</span>)tw+=on;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;c&#x27;</span>)tr+=tw;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,tr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-小林取数"><a class="markdownIt-Anchor" href="#i-小林取数"></a> I 小林取数</h2><p>贪心</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>求最大和，即可看成求所有的和后，如果不满足条件，就减去最小的、能使总和满足条件的数（非整十数）。</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,a[<span class="hljs-number">102</span>],i,mark=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        <span class="hljs-keyword">if</span>(a[i]%<span class="hljs-number">10</span>!=<span class="hljs-number">0</span>)<span class="hljs-comment">//标记非整十数</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(!mark)mark=a[i];<br>            <span class="hljs-keyword">else</span> mark=<span class="hljs-built_in">min</span>(mark,a[i]);<br>        &#125;<br>        sum+=a[i];<span class="hljs-comment">//累加</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">10</span>!=<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum);<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(mark)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,sum-mark);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>特别感谢老师的proA标程！！！</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 耍杂技的牛 一题的思路+代码</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E8%80%8D%E6%9D%82%E6%8A%80%E7%9A%84%E7%89%9B%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E8%80%8D%E6%9D%82%E6%8A%80%E7%9A%84%E7%89%9B%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.acwing.com/problem/content/127/">AcWing 125. 耍杂技的牛</a>&amp;<a href="https://www.luogu.com.cn/problem/P1842">洛谷 P1842 [USACO05NOV] 奶牛玩杂技</a></p><blockquote><p>题目描述</p><blockquote><p>农民约翰的N头奶牛（编号为1…N）计划逃跑并加入马戏团，为此它们决定练习表演杂技。<br />奶牛们不是非常有创意，只提出了一个杂技表演：<br />叠罗汉，表演时，奶牛们站在彼此的身上，形成一个高高的垂直堆叠。<br />奶牛们正在试图找到自己在这个堆叠中应该所处的位置顺序。<br />这N头奶牛中的每一头都有着自己的重量 W<sub>i</sub> 以及自己的强壮程度 S<sub>i</sub>。<br />一头牛支撑不住的可能性取决于它头上所有牛的总重量（不包括它自己）减去它的身体强壮程度的值，现在称该数值为风险值，风险值越大，这只牛撑不住的可能性越高。<br />您的任务是确定奶牛的排序，使得所有奶牛的风险值中的最大值尽可能的小。</p></blockquote></blockquote><blockquote><p>输入描述</p><blockquote><p>第一行输入整数N，表示奶牛数量。<br />接下来N行，每行输入两个整数，表示牛的重量和强壮程度，第 i 行表示第 i 头牛的重量 W<sub>i</sub> 以及它的强壮程度 S<sub>i</sub>。</p></blockquote></blockquote><blockquote><p>输出描述</p><blockquote><p>输出一个整数，表示最大风险值的最小可能值。</p></blockquote></blockquote><blockquote><p>数据范围</p><blockquote><p>1≤ N ≤50000,<br />1≤ W<sub>i</sub> ≤10,000,<br />1≤ S<sub>i</sub> ≤1,000,000,000</p></blockquote></blockquote><blockquote><p>输入样例</p><blockquote><p>3<br />10 3<br />2 5<br />3 3</p></blockquote></blockquote><blockquote><p>输出样例</p><blockquote><p>2</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>这道题代码不难，主要是思路。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>我们可以把排序问题拆分成从输入顺序开始的足够多次对换，只要我们找到能更趋近与所求结果的对换条件，我们便可以依照此条件直接排序。</p><p>假设现在有两头牛，i 与 i + 1，我们要找到一种使<strong>对换后两牛最大危险值</strong>小于<strong>对换前的两牛最大危险值</strong>的条件。</p><p>由题意，对换前两牛（ i , i + 1 ）危险值分别为<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Q</mi><mi>i</mi></msub><mo>=</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>W</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">Q_i=W_1+W_2+...+W_{i-1} - S_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />与<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Q</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>W</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>W</mi><mi>i</mi></msub><mo>−</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">Q_{i+1}=W_1+W_2+...+W_{i-1}+W_i - S_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">Q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p><p>对换后，（ i , i + 1 ）危险值分别为<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mi>i</mi></msub><mo>=</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>W</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>W</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">H_{i}=W_1+W_2+...+W_{i-1}+W_{i+1} - S_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br />与<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>W</mi><mn>1</mn></msub><mo>+</mo><msub><mi>W</mi><mn>2</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>W</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">H_{i+1}=W_1+W_2+...+W_{i-1} - S_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></p><p>省略掉相同部分，若要使<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi><mi>A</mi><mi>X</mi><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>S</mi><mi>i</mi></msub><mo separator="true">,</mo><mo>−</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>≥</mo><mi>M</mi><mi>A</mi><mi>X</mi><mo stretchy="false">(</mo><mo>−</mo><msub><mi>S</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>W</mi><mi>i</mi></msub><mo>−</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">MAX(W_{i+1} - S_{i} ,- S_{i+1} )≥MAX( - S_{i} ,W_i - S_{i+1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br />只需满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>S</mi><mi>i</mi></msub><mo>≥</mo><msub><mi>W</mi><mi>i</mi></msub><mo>−</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">W_{i+1} - S_{i}≥W_i - S_{i+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><br />移项可得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>S</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>≥</mo><msub><mi>W</mi><mi>i</mi></msub><mo>+</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">W_{i+1}+ S_{i+1}≥W_{i}+ S_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.891661em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>由此结论，我们可以直接按照 W<sub>i</sub>+S<sub>i</sub> 降序排列，即是最大风险值最小的情况，再遍历求出最大危险值。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">co</span>&#123;<span class="hljs-type">int</span> w,s;&#125;cow[<span class="hljs-number">50004</span>];<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(co a,co b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.w+a.s&lt;b.w+b.s;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> w,s,n,i;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;cow[i].w,&amp;cow[i].s);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(cow+<span class="hljs-number">1</span>,cow+n+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-type">int</span> mi=<span class="hljs-number">0x87777777</span>;<span class="hljs-comment">//最小值</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> wi=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        mi=<span class="hljs-built_in">max</span>((<span class="hljs-type">long</span> <span class="hljs-type">long</span>)mi,wi-cow[i].s);<br>        wi+=cow[i].w;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,mi);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>y总yyds</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 糖果传递 一题的思路+代码</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%B3%96%E6%9E%9C%E4%BC%A0%E9%80%92%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%B3%96%E6%9E%9C%E4%BC%A0%E9%80%92%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.acwing.com/problem/content/description/124/">AcWing 122.糖果传递</a></p><blockquote><p>题目描述</p><blockquote><p>有n个小朋友坐成一圈，每人有a[i]个糖果。<br />每人只能给左右两人传递糖果。<br />每人每次传递一个糖果代价为1。<br />求使所有人获得均等糖果的最小代价。</p></blockquote></blockquote><blockquote><p>输入描述</p><blockquote><p>第一行输入一个正整数n，表示小朋友的个数。<br />接下来n行，每行一个整数a[i]，表示第i个小朋友初始得到的糖果的颗数。</p></blockquote></blockquote><blockquote><p>输出描述</p><blockquote><p>输出一个整数，表示最小代价。</p></blockquote></blockquote><blockquote><p>数据范围</p><blockquote><p>1 ≤ n ≤ 1000000,<br />0 ≤ a[ i ] ≤ 2×109,<br />数据保证一定有解。</p></blockquote></blockquote><blockquote><p>输入样例</p><blockquote><p>4<br />1<br />2<br />5<br />4</p></blockquote></blockquote><blockquote><p>输出样例</p><blockquote><p>4</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>这道题代码不难，主要是思路，通过数学方法转化问题。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>我们假设第 i 名小朋友有 a[ i ] 颗糖，并向其右侧小朋友传递 x[ i ] 颗糖（ x[ i ] 为整数，若为负值即说明反向传递）。（ x[ n ] 也可以视作 x[ 0 ] ）</p><p>在这种假设下，我们的所求即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">| x[ 1 ] | + | x[ 2 ] | + ... + | x[ n - 1 ] | + | x[ n ] |</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mord">∣</span></span></span></span> 的最小值。</p><p>设传递之后，每名小朋友均有 p 颗糖，我们可以列出如下方程组：</p><blockquote><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>x</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a[ 1 ] - x[ 1 ] + x[ n ] = b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>−</mo><mi>x</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mi>x</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a[ 2 ] - x[ 2 ] + x[ 1 ] = b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span><br />…<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a[ n - 1 ] - x[ n - 1 ] + x[ n ] = b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span><br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>−</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>+</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">a[ n ] - x[ n ] + x[ n - 1 ] = b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></p></blockquote><p>整理①式，我们可以得出：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>−</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x[ 1 ] = x[ n ] - b + a[ 1 ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span><br />将其代入②式，便可以得出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>−</mo><mn>2</mn><mo>∗</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x[ 2 ] = x[ n ] - 2 * b + a[ 1 ] + a[ 2 ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span></span></span></span><br />以此类推：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>−</mo><mi>i</mi><mo>∗</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x[ i ] = x[ n ] - i * b + a[ 1 ] + a[ 2 ] + ... + a[ i ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></p><p>此时，我们所求即转化为<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>−</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>−</mo><mn>2</mn><mo>∗</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>−</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>x</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo>−</mo><mn>0</mn><mo>∗</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">| x[ n ] - b + a[ 1 ] | + | x[ n ] - 2 * b + a[ 1 ] + a[ 2 ] | + ... + | x[ n - 1 ] = x[ n ] - ( n - 1 ) * b + a[ 1 ] + a[ 2 ] + ... + a[ n - 1 ] | + | x[ n ] = x[ n ] - 0 * b + a[ 1 ] + a[ 2 ] + ... + a[ n ] |</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mord">∣</span></span></span></span><br />的最小值。</p><p>现在，我们就可以将上式看作另一个问题：<br />数轴上有一系列点： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mn>2</mn><mo>∗</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mn>0</mn><mo>∗</mo><mi>b</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">b + a[ 1 ] , 2 * b + a[ 1 ] + a[ 2 ] , ( n - 1 ) * b + a[ 1 ] + a[ 2 ] + ... + a[ n - 1 ] , 0 * b + a[ 1 ] + a[ 2 ] + ... + a[ n ]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> ，求某一点（x[ 0 ]）与他们所有点的距离之和最短。</p><p>将 x[ 0 ] 放在这一系列点的中位数处显然是最短的，就如<a href="https://www.acwing.com/problem/content/106/">货仓选址</a>这道题。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,a[<span class="hljs-number">1000006</span>]=&#123;<span class="hljs-number">0</span>&#125;,d[<span class="hljs-number">1000006</span>],i,p;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]);d[i]=a[i]+d[i<span class="hljs-number">-1</span>];&#125;<br>    p=d[n]/n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        d[i]-=i*p;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(d+<span class="hljs-number">1</span>,d+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;sum+=<span class="hljs-built_in">abs</span>(d[i]-d[(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>]);&#125;<span class="hljs-comment">//与中位数距离</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,sum);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>y总yyds</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数论与几何</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021牛客寒假算法基础集训营2（C D E F G H I J）</title>
    <link href="/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A52%EF%BC%88C%20D%20E%20F%20G%20H%20I%20J%EF%BC%89/"/>
    <url>/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A52%EF%BC%88C%20D%20E%20F%20G%20H%20I%20J%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/9982">这里</a></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>个人能力有限，有的题目实在知识点欠缺太多，这里是大佬的<a href="https://ac.nowcoder.com/discuss/593874?type=101&amp;order=0&amp;pos=4&amp;page=1&amp;channel=-1&amp;source_id=1">全题解</a></p><h2 id="c-牛牛与字符串border"><a class="markdownIt-Anchor" href="#c-牛牛与字符串border"></a> C 牛牛与字符串border</h2><p>最大公因数，字符串</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>依照样例来说，很像求<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi></mrow><annotation encoding="application/x-tex">l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>的最大公因数，实际上当 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo>&gt;</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">l&gt;\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 时，循环节长为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>−</mo><mi>l</mi></mrow><annotation encoding="application/x-tex">n-l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span>，其余情况即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>l</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">gcd(n,l)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mclose">)</span></span></span></span>，画图推导一下即可，具体证明可以参照文首链题解；</p><p>循环节上每一位应该取在当位数量最多的字母，以求更改次数最少。</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function">ll <span class="hljs-title">gcd</span><span class="hljs-params">(ll a,ll b)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> b==<span class="hljs-number">0</span>?a:<span class="hljs-built_in">gcd</span>(b,a%b);&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,l,i,t;<br>    <span class="hljs-type">char</span> get[<span class="hljs-number">100005</span>],ans[<span class="hljs-number">100005</span>];<br>    <span class="hljs-type">int</span> mx[<span class="hljs-number">100005</span>],cnt[<span class="hljs-number">100005</span>][<span class="hljs-number">26</span>];<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;l);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*l&gt;n)l=n-l;<br>        <span class="hljs-keyword">else</span> l=<span class="hljs-built_in">gcd</span>(l,n);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,&amp;get);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=l;i++)<span class="hljs-comment">//初始化，用memset会TLE</span><br>        &#123;<br>            mx[i]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">26</span>;j++)cnt[i][j]=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            cnt[i%l][get[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>            <span class="hljs-keyword">if</span>(cnt[i%l][get[i]-<span class="hljs-string">&#x27;a&#x27;</span>]&gt;mx[i%l])<span class="hljs-comment">//更新当位众数字母</span><br>            &#123;<br>                mx[i%l]=cnt[i%l][get[i]-<span class="hljs-string">&#x27;a&#x27;</span>];<br>                ans[i%l]=get[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//输出n个</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,ans[i%l]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-牛牛与整除分块"><a class="markdownIt-Anchor" href="#d-牛牛与整除分块"></a> D 牛牛与整除分块</h2><p>数学</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>我们先找规律，依照如下两图<br /><img src="https://s2.loli.net/2022/08/02/uNUStTgECHqbDwk.png" alt="在这里插入图片描述" /></p><p><img src="https://s2.loli.net/2022/08/02/fpvdeTyh4tMk8ZQ.png" alt="在这里插入图片描述" /><br />我们可以发现，在某点之前，对于每一个x，均有一个不同的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mi>x</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">⌊ n / x ⌋</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">x</span><span class="mclose">⌋</span></span></span></span>，在该点之后，就会存在多个 x 值共用同一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mi>x</mi><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">⌊ n / x ⌋</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">x</span><span class="mclose">⌋</span></span></span></span> 的情况。</p><p>我们只需要找到这个分界点 a ，如果 x &lt;= a ，即可直接输出x；否则就输出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mi>a</mi><mo stretchy="false">⌋</mo><mo>−</mo><mo stretchy="false">⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mi>x</mi><mo stretchy="false">⌋</mo><mo>+</mo><mi>a</mi></mrow><annotation encoding="application/x-tex">⌊ n / a ⌋-⌊ n / x ⌋+a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">a</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">x</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span> ，此时 <strong>x 当点的商与 a 点的商的差值</strong>为 a 点后至 x 点有的不同商值的个数，再加上 a 即为 x 之前存在的不同商值的总数。</p><p>现在我们要找到这个 a ：</p><p>用函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mi mathvariant="normal">/</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">f(x)=n/x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord mathdefault">x</span></span></span></span> 来讲，我们需要找出一最小整数 a ，满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f&#x27;(a)&gt;=-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> ;<br />由于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mi>n</mi><mi mathvariant="normal">/</mi><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">f&#x27;(x)=-n/x^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> , <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>f</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f&#x27;(a)&gt;=-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 即等价于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><msup><mi>a</mi><mn>2</mn></msup><mo>&lt;</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n/a^2&lt;=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ;<br />即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>&gt;</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">a^2&gt;=n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> ；<br />故 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy="false">⌈</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">a=⌈\sqrt{n}⌉</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">⌉</span></span></span></span></p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,x,sq;<span class="hljs-comment">//sq即为上文的a</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;x);<br>        sq=<span class="hljs-built_in">sqrt</span>(n);<br>        <span class="hljs-keyword">if</span>(sq*sq!=n)sq++;<span class="hljs-comment">//向上取整</span><br>        <span class="hljs-keyword">if</span>(x&lt;=sq)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,x);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n/sq-n/x+sq);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="e-牛牛与跷跷板"><a class="markdownIt-Anchor" href="#e-牛牛与跷跷板"></a> E 牛牛与跷跷板</h2><p>bfs，双指针</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>这道题十分明显是bfs，只不过数据量对建图造成了一定的困难；</p><p>对于同行，只需要判断相邻两板的左右缘是否相接；</p><p>对于临行，可以通过双指针来判断联通；</p><p>由于板与板不重叠的限制，我们可以放心用set存储，不会出现去重，而且lineleft与linerig的相同位置存储的必定是同一块板的数据。</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br>set&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt;linelef[<span class="hljs-number">100005</span>],linerig[<span class="hljs-number">100005</span>];<br>set&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt;::iterator it1,it2,it3,it4;<br>vector&lt;<span class="hljs-type">int</span>&gt; con[<span class="hljs-number">100005</span>];<br><span class="hljs-type">int</span> n,dis[<span class="hljs-number">100005</span>];<br>queue&lt;<span class="hljs-type">int</span>&gt;que;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> now=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;con[now].<span class="hljs-built_in">size</span>();i++)<br>        &#123;<br>            <span class="hljs-comment">//printf(&quot;%d %d\n&quot;,now,con[now][i]);</span><br>            <span class="hljs-keyword">if</span>(!dis[con[now][i]])<br>            &#123;<br>                dis[con[now][i]]=dis[now]+<span class="hljs-number">1</span>;<br>                que.<span class="hljs-built_in">push</span>(con[now][i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> i,lin,gl,gr,lmi=<span class="hljs-number">100005</span>,lma=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;lin,&amp;gl,&amp;gr);<br>        linelef[lin].<span class="hljs-built_in">insert</span>(&#123;gl,i&#125;);<br>        linerig[lin].<span class="hljs-built_in">insert</span>(&#123;gr,i&#125;);<br>        lmi=<span class="hljs-built_in">min</span>(lmi,lin);<span class="hljs-comment">//框定行数范围</span><br>        lma=<span class="hljs-built_in">max</span>(lma,lin);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=lmi;i&lt;=lma;i++)<span class="hljs-comment">//建图</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(it1=linerig[i].<span class="hljs-built_in">begin</span>(),it2=linelef[i].<span class="hljs-built_in">begin</span>(),it2++;it2!=linelef[i].<span class="hljs-built_in">end</span>();it1++,it2++)<span class="hljs-comment">//单行扫描建图</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>((*it1).first==(*it2).first)<br>            &#123;<br>                con[(*it1).second].<span class="hljs-built_in">push_back</span>((*it2).second);<br>                con[(*it2).second].<span class="hljs-built_in">push_back</span>((*it1).second);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i!=lma)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(it1=linelef[i].<span class="hljs-built_in">begin</span>(),it2=linerig[i].<span class="hljs-built_in">begin</span>(),it3=linelef[i+<span class="hljs-number">1</span>].<span class="hljs-built_in">begin</span>(),it4=linerig[i+<span class="hljs-number">1</span>].<span class="hljs-built_in">begin</span>()<br>                ;it1!=linelef[i].<span class="hljs-built_in">end</span>()&amp;&amp;it3!=linelef[i+<span class="hljs-number">1</span>].<span class="hljs-built_in">end</span>();)<span class="hljs-comment">//临行双指针建图</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>((*it2).first&lt;=(*it3).first)it1++,it2++;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it1).first&gt;=(*it4).first)it3++,it4++;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    con[(*it3).second].<span class="hljs-built_in">push_back</span>((*it1).second);<br>                    con[(*it1).second].<span class="hljs-built_in">push_back</span>((*it3).second);<br>                    <span class="hljs-keyword">if</span>((*it2).first&lt;=(*it4).first)it1++,it2++;<span class="hljs-comment">//存在一块板搭多块板的情况，依据右缘判断哪组指针后移</span><br>                    <span class="hljs-keyword">else</span> it3++,it4++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> dis);<br>    dis[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//设定1距1距离1，最后减去</span><br>    que.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">dfs</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,dis[n]<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f牛牛与交换排序"><a class="markdownIt-Anchor" href="#f牛牛与交换排序"></a> F牛牛与交换排序</h2><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>此题看起来 k 会有好多个可行取值，但是由于<strong>下一次做区间翻转的位置将会比上一次更靠右</strong>的限制，实际上只有一个可行的 k 。</p><p>如果 1 在第 i 位（ i != 1 ），则唯一的可行 k 为 i ，确定 k 后，持续进行模拟操作即可；<br />如果 1 位置正确，2 在第 i 位（ i != 2 ），则 k 为 i - 2 + 1，同理。<br />如果 k 已经被确定的情况下，数字 i 既不在第 i 位，也不在第 i + k - 1 位，那就永远不可能排好序了。</p><p>本来担心持续的模拟操作会导致TLE，结果来看时间卡得没有那么严。</p><p>//悲：<br /><img src="https://s2.loli.net/2022/08/02/lbwXiUdEuT3RN4n.png" alt="在这里插入图片描述" /></p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i,a[<span class="hljs-number">100005</span>],k=<span class="hljs-number">0</span>,j,f=<span class="hljs-number">1</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]!=i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)<span class="hljs-comment">//如果k未定义</span><br>            &#123;<br>                <span class="hljs-keyword">for</span>(j=i;j&lt;=n;j++)<br>                <span class="hljs-keyword">if</span>(a[j]==i)<span class="hljs-keyword">break</span>;<br>                k=j-i;<br>                <span class="hljs-keyword">for</span>(j=i;j&lt;=i+k/<span class="hljs-number">2</span>;j++)<br>                <span class="hljs-built_in">swap</span>(a[j],a[<span class="hljs-number">2</span>*i+k-j]);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i+k&gt;n||a[i+k]!=i)&#123;f=<span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-comment">//凉凉</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i+k]==i)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(j=i;j&lt;=i+k/<span class="hljs-number">2</span>;j++)<span class="hljs-comment">//操作</span><br>                <span class="hljs-built_in">swap</span>(a[j],a[<span class="hljs-number">2</span>*i+k-j]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(f==<span class="hljs-number">0</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n%d&quot;</span>,k+<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-牛牛与比赛颁奖"><a class="markdownIt-Anchor" href="#g-牛牛与比赛颁奖"></a> G 牛牛与比赛颁奖</h2><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span>+<span class="hljs-number">5</span>;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mp;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;::iterator it;<br><span class="hljs-type">int</span> cot[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">int</span> l,r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;i++)&#123;<br>        cin&gt;&gt;l&gt;&gt;r;<br>        mp[l]++;<br>        mp[r+<span class="hljs-number">1</span>]--;<br>    &#125;<br>    <span class="hljs-type">int</span> linej=<span class="hljs-number">0</span>,liney=<span class="hljs-number">0</span>,linet=<span class="hljs-number">0</span>,<br>        j=<span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.0</span>*n/<span class="hljs-number">10</span>),y=<span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.0</span>*n/<span class="hljs-number">4</span>),t=<span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.0</span>*n/<span class="hljs-number">2</span>);<br>    <span class="hljs-type">int</span> last=<span class="hljs-number">1</span>,cnt=<span class="hljs-number">0</span>,maxx=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(it=mp.<span class="hljs-built_in">begin</span>();it!=mp.<span class="hljs-built_in">end</span>();it++)&#123;<br>        cot[cnt]+=it-&gt;first-last;<br>        last=it-&gt;first;<br>        cnt+=it-&gt;second;<br>        maxx=<span class="hljs-built_in">max</span>(maxx,cnt);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=maxx;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>        cot[i]+=cot[i+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span>(cot[i]&gt;=j&amp;&amp;!linej)linej=<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,i);<br>        <span class="hljs-keyword">if</span>(cot[i]&gt;=y&amp;&amp;!liney)liney=<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,i);<br>        <span class="hljs-keyword">if</span>(cot[i]&gt;=t&amp;&amp;!linet)linet=<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,i);<br>    &#125;<br>    cout&lt;&lt;cot[linej]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;cot[liney]-cot[linej]&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;cot[linet]-cot[liney]&lt;&lt;<span class="hljs-string">&#x27;\n&#x27;</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="h-牛牛与棋盘"><a class="markdownIt-Anchor" href="#h-牛牛与棋盘"></a> H 牛牛与棋盘</h2><p>签到题</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>找规律，输出内容相同的点 横纵坐标之和奇偶性相同。</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i,j;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>        <span class="hljs-keyword">if</span>((i+j)&amp;<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="i牛牛的质因数"><a class="markdownIt-Anchor" href="#i牛牛的质因数"></a> I牛牛的“质因数”</h2><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>我们需要处理出每一个 i 的全部质因数再做处理，首先想到的便是分解定理，奈何时间复杂度略大，具体可以参照下面的第二片代码。</p><p>同时，用到质因子的地方还有欧拉筛，在欧拉筛中，每一个合数是被其最小质因子筛掉的，我们便可以利用这个性质，递推处理每一个合数。</p><p>具体过程如下：<br />对于某一合数 i ，假设其被其最小质因子 p 和某数 q 组成的 p * q 筛掉，则 i 的对应值 z[ i ] 即为 -pz[q]- 打不出来标准的表示法，即把 p 接到 z[ q ] 的前面。</p><p>具体实现起来，我们要妥善处理位数，对位数的求取一定要慎重，具体可以参照惨案代码片三<br />//倒腾一晚上求余运算</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll N = <span class="hljs-number">4000006</span>;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1000000007</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> p[N];<br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> n[N];<br><span class="hljs-type">static</span> ll w[N],z[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j,c=<span class="hljs-number">0</span>;<br>    n[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,z[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!n[i])<br>        &#123;<br>            p[c++]=i;<br>            z[i]=i;<span class="hljs-comment">//素数对应值是其本身</span><br>            ll ten=<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">for</span>(; ten&lt;i; ten*=<span class="hljs-number">10</span>);<span class="hljs-comment">//求取质数位数</span><br>            w[i]=ten;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;c&amp;&amp;i*p[j]&lt;N; j++)<br>        &#123;<br>            n[i*p[j]]=<span class="hljs-number">1</span>;<br>            z[i*p[j]]=(p[j]*w[i]+z[i])%M;<span class="hljs-comment">//求取合数对应值</span><br>            w[i*p[j]]=w[i]*w[p[j]]%M;<span class="hljs-comment">//求取合数位数，注意不能用素数求位数的方法</span><br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>,n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        ans+=z[i],ans%=M;&#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu&quot;</span>,ans);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>比赛时我的代码只能大概算到1e6，否则就超时，于是我就阶段打表，每1e6算一个结果，对于 n ，只算 n ~ n/1e6*1e6 这段就OK了。代码贴在下面，仅供参考；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll N = <span class="hljs-number">4000006</span>;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1000000007</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> p[N],w[N];<br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> n[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a1=<span class="hljs-number">631719342</span>,a2=<span class="hljs-number">220078001</span>,a3=<span class="hljs-number">827425989</span>;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">wf</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(!n[a])<span class="hljs-keyword">return</span> a;<br>    ll ans=<span class="hljs-number">0</span>,i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; p[i]&lt;=<span class="hljs-built_in">sqrt</span>(a); i++)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(a%p[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            a/=p[i];<br>            ans*=w[i];<br>            ans+=p[i];<br>            ans%=M;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> ten=<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">for</span>(; ten&lt;a; ten*=<span class="hljs-number">10</span>);<br>        ans*=ten,ans+=a,ans%=M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//printf(&quot;*&quot;);</span><br>    <span class="hljs-type">int</span> i,j,c=<span class="hljs-number">0</span>;<br>    n[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;=N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!n[i])<br>        &#123;<br>            p[c++]=i;<br>            <span class="hljs-type">int</span> ten=<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">for</span>(; ten&lt;i; ten*=<span class="hljs-number">10</span>);<br>            w[c<span class="hljs-number">-1</span>]=ten;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;c&amp;&amp;i*p[j]&lt;=N; j++)<br>        &#123;<br>            n[i*p[j]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    ll ans,n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">if</span>(n/<span class="hljs-number">1000000</span>==<span class="hljs-number">0</span>)<br>    &#123;<br>        ans=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        &#123;<br>            ans+=<span class="hljs-built_in">wf</span>(i);<br>            ans%=M;<br>            <span class="hljs-comment">//printf(&quot;%5d %10lld\n&quot;,i,wf(i));</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n/<span class="hljs-number">1000000</span>==<span class="hljs-number">1</span>)<br>    &#123;<br>        ans=a1;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1000001</span>; i&lt;=n; i++)<br>        &#123;<br>            ans+=<span class="hljs-built_in">wf</span>(i);<br>            ans%=M;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n/<span class="hljs-number">1000000</span>==<span class="hljs-number">2</span>)<br>    &#123;<br>        ans=a2;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2000001</span>; i&lt;=n; i++)<br>        &#123;<br>            ans+=<span class="hljs-built_in">wf</span>(i);<br>            ans%=M;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ans=a3;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">3000001</span>; i&lt;=n; i++)<br>        &#123;<br>            ans+=<span class="hljs-built_in">wf</span>(i);<br>            ans%=M;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>//有个同学打了34M的表，交不上去 -_-||</p><p>还有一段错误代码，这里对于合数 如果用for求位数，先求位数再取模也不行，只要在过程中历史值进行过取模运算就会改变真实长度，再搭配for求位数结果就是错误的；用成积求位数是，尽管位数本身经过取模，但仍是真实位数的取模值。惨案贴上来供批判</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll N = <span class="hljs-number">4000006</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> M = <span class="hljs-number">1000000007</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> p[N];<br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> n[N];<br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> w[N],z[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j,c=<span class="hljs-number">0</span>;<br>    n[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,z[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;N; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!n[i])<br>        &#123;<br>            p[c++]=i;<br>            z[i]=i;<br>            ll ten=<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">for</span>(; ten&lt;i; ten*=<span class="hljs-number">10</span>);<br>            w[i]=ten;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>; j&lt;c&amp;&amp;i*p[j]&lt;N; j++)<br>        &#123;<br>            n[i*p[j]]=<span class="hljs-number">1</span>;<br>            z[i*p[j]]=(p[j]*w[i]+z[i]);<br>            <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ten=<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">for</span>(; ten&lt;z[i*p[j]]; ten*=<span class="hljs-number">10</span>);<br>            w[i*p[j]]=ten%M;<br>            z[i*p[j]]%=M;<br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>,n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<span class="hljs-comment">//printf(&quot;%4d %9lld %9lld\n&quot;,i,z[i],w[i]);</span><br>        ans+=z[i],ans%=M;&#125;<br>    <span class="hljs-comment">//printf(&quot;%4d %9lld %9lld\n&quot;,i-1,z[i-1],w[i-1]);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu&quot;</span>,ans);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="j牛牛想要成为hacker"><a class="markdownIt-Anchor" href="#j牛牛想要成为hacker"></a> J牛牛想要成为hacker</h2><p>构造</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>首先计算可知，n &lt;= 27 时，C( n , 3 ) &lt; n<sup>2</sup>log<sub>2</sub>n ，也就是说，此时输出的前 27 项不能含有任何合法组，这里可以用斐波那契数列来解决。</p><p>n &gt; 27 时，即可认为 n<sup>2</sup>⌊ log<sub>2</sub>n⌋ 中的 ⌊ log<sub>2</sub>n⌋ 是第一个元素的遍历量，n = 10<sup>5</sup> 时， ⌊ log<sub>2</sub>n⌋ = 16 ，也就是说此时前16项的任意一项无法与后面的元素组成任何合法组。所以说，为了便于输出，只需要保证第 17 项及之后的每一位均小于等于 第一项/2。在前一种情况中，因为前 27 项均无合法组，所以第 27 项及之后保证每一位均小于等于 第一项/2 即可。</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> f[<span class="hljs-number">30</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;,a[<span class="hljs-number">100005</span>],i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">28</span>;i++)<br>    f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">27</span>;i++)a[i]=f[i];<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">28</span>;i&lt;=<span class="hljs-number">100000</span>;i++)a[i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,a[i]);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021牛客寒假算法基础集训营1（A B C D E F H I J）</title>
    <link href="/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51%EF%BC%88A%20B%20C%20D%20E%20F%20H%20I%20J%EF%BC%89/"/>
    <url>/2021.01-06/2021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A51%EF%BC%88A%20B%20C%20D%20E%20F%20H%20I%20J%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/9981">这里</a><br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-%E4%B8%B2">A 串</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-%E6%8B%AC%E5%8F%B7">B 括号</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-%E7%BA%A2%E5%92%8C%E8%93%9D">C 红和蓝</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E7%82%B9%E4%B8%80%E6%88%90%E9%9B%B6">D 点一成零</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-%E4%B8%89%E6%A3%B1%E9%94%A5%E4%B9%8B%E5%88%BB">E 三棱锥之刻</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-%E5%AF%B9%E7%AD%94%E6%A1%88%E4%B8%80%E6%97%B6%E7%88%BD">F 对答案一时爽</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#h-%E5%B9%82%E5%A1%94%E4%B8%AA%E4%BD%8D%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97">H 幂塔个位数的计算</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#i%E9%99%90%E5%88%B6%E4%B8%8D%E4%BA%92%E7%B4%A0%E5%AF%B9%E7%9A%84%E6%8E%92%E5%88%97">I限制不互素对的排列</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#j%E4%B8%80%E7%BE%A4%E5%B0%8F%E9%9D%92%E8%9B%99%E5%91%B1%E8%B9%A6%E5%91%B1%E8%B9%A6%E5%91%B1">J一群小青蛙呱蹦呱蹦呱</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li><li><a href="#ed">ED</a></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>个人能力有限，有的题目实在知识点欠缺太多，可以参照一下其他大佬的<a href="https://ac.nowcoder.com/discuss/593200">全题解</a>。<br />&amp;感谢<a href="https://blog.csdn.net/RealKing_sblog">ph大佬</a>的全程指导。</p><h2 id="a-串"><a class="markdownIt-Anchor" href="#a-串"></a> A 串</h2><p>递推。</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>我们可以先算出长度为 1,2,…,n 的合法串的数量，再进行累加。</p><p>介于数据量（2 &lt; n &lt;= 10<sup>6</sup>)，通过排列组合来求几乎不可能，单纯打表可能就需要几十分钟。</p><p>接下来就是具体的递推过程：</p><p>假设长度为 n 的合法字符串有 A<sub>n</sub> 个。长度为 n + 1 的字符串中的前 n 项可以分为两种情况：合法的与非法的。</p><p>——对于前 n 项为合法字符串的 n + 1 长字符串，显然情况有 A<sub>n</sub> * 26 种（即第 n + 1 项可以为任意字母）；<br />——对于前 n 项为非法字符串的 n + 1 长字符串，只有前 n 项存在 u 的字符串可以变为合法串，所以含 u 的 n 长字符串的数量为 26<sup>n</sup> - 25<sup>n</sup> 个，其中有 A<sub>n</sub> 个合法串，所以此种情况的 n + 1 长合法串有 26<sup>n</sup> - 25<sup>n</sup> - A<sub>n</sub> 个（即存在 u 的 n 长非法字符串数量为 <em>含 u 的 n 长字符串数量</em> 减去 <em>合法的 n 长字符串数量</em>，该种串后接 s 即变为合法串）。</p><p>所以得到递推公式 A<sub>n+1</sub> = 25 *  A<sub>n</sub> + 26<sup>n</sup> - 25<sup>n</sup></p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">qs</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a,<span class="hljs-type">long</span> <span class="hljs-type">long</span> t)</span><span class="hljs-comment">//快速幂取模</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(t)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)ans=ans*a%MOD;<br>        a=a*a%MOD;<br>        t&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans%MOD;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a=<span class="hljs-number">1</span>,i,j,n,ans=<span class="hljs-number">1</span>;cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">3</span>;i&lt;=n;i++)<br>    &#123;<br>        a=a*<span class="hljs-number">25</span>+<span class="hljs-built_in">qs</span>(<span class="hljs-number">26</span>,i<span class="hljs-number">-1</span>)-<span class="hljs-built_in">qs</span>(<span class="hljs-number">25</span>,i<span class="hljs-number">-1</span>);<br>        a%=MOD;<br>        <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">0</span>)a+=MOD;<br>        ans+=a;<span class="hljs-comment">//累加</span><br>        ans%=MOD;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="b-括号"><a class="markdownIt-Anchor" href="#b-括号"></a> B 括号</h2><p>此题为特判题（Special Judge）</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>首先我们观察样例，即可得知总括号对数为 每一个左括号后面的右括号总数的累加和。</p><p>所以说，为使总字符量尽可能少，我们需要把 k 先粗略地拆成 l<sub>1</sub> * r<sub>1</sub> 的形式（ l<sub>1</sub> * r<sub>1</sub> &lt;= k ）， l<sub>1</sub> 与 r<sub>1</sub> 需要尽可能接近（均值不等式）；</p><p>我们可以取 l<sub>1</sub> = ⌊ sqrt( k ) ⌋，则 r<sub>1</sub> = ⌊ k / l<sub>1</sub> ⌋，此时还需要补上差值 d = k - l<sub>1</sub> * r<sub>1</sub> ；</p><p>接下来就是构造了：我们可以依次输出 l<sub>1</sub> 个左括号，r<sub>1</sub> - d 个右括号，1 个左括号，d 个右括号。此时总对数则为  l<sub>1</sub> * r<sub>1</sub> + d 。</p><p>要求是非空串，注意对 0 特判。</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k,l,r,d,i;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    l=(<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(k);<br>    r=k/l;<br>    d=k-r*l;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=l;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&quot;</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=r-d;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;)&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&quot;</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=d;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;)&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>比赛时使用的另一种方法，即把 k 拆成 n<sub>1</sub> * a<sub>1</sub><sup>2</sup> +  n<sub>1</sub> * a<sub>1</sub><sup>2</sup> + … 的形式，再构造输出，代码如下，可ac，仅做参考。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k,i,ma,j;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">31623</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    ma=(<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(k);<br>    <span class="hljs-keyword">while</span>(k)<br>    &#123;<br>        a[(<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(k)]++;<br>        k-=(<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(k)*(<span class="hljs-type">int</span>)<span class="hljs-built_in">sqrt</span>(k);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=ma;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&quot;</span>);<br>        <span class="hljs-keyword">if</span>(a[i])<br>        &#123;<br>            <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;=i*a[i];j++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;)&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="c-红和蓝"><a class="markdownIt-Anchor" href="#c-红和蓝"></a> C 红和蓝</h2><p>dfs，涂色</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>使用两遍bfs，第一遍进行分组和可行性判定，第二遍进行染色</p><p>具体实现上（也可以使用链表存图）：</p><p>第一次dfs时，先递归处理下级节点，再将其与上级节点分入同一组，同时完成可行性判定；</p><p>第二次dfs时，判断其与上级节点是否在同一组，在即涂与上级相同的颜色，不在即将自己涂成与上级不同的颜色；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>    <span class="hljs-type">int</span> to, next;<br>&#125;edge[N];<br><span class="hljs-type">int</span> head[N], cnt;<span class="hljs-comment">//cnt为道路数组序号</span><br><span class="hljs-type">int</span> mrk[N], col[N], num;<span class="hljs-comment">//num计组数</span><br><span class="hljs-type">bool</span> flag;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[++cnt] = &#123;v, head[u]&#125;;<span class="hljs-comment">//标记前向标</span><br>    head[u] = cnt;<span class="hljs-comment">//更新待标记前向标</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> son = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-type">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v != fa)<br>        &#123;<br>        son++;<br>        <span class="hljs-built_in">dfs1</span>(v, u);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(son == <span class="hljs-number">0</span> || mrk[u] == <span class="hljs-number">0</span>)<span class="hljs-comment">//叶节点与未被下级节点涂色的节点需被涂色</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(mrk[fa] != <span class="hljs-number">0</span>)<span class="hljs-comment">//如果其上级节点已被涂色</span><br>        &#123;<br>            flag = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        mrk[u] = mrk[fa] = ++num;<span class="hljs-comment">//此节点与上级节点标成同一数字</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> fa)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = head[u]; i != <span class="hljs-number">-1</span>; i = edge[i].next)<br>    &#123;<br>        <span class="hljs-type">int</span> v = edge[i].to;<br>        <span class="hljs-keyword">if</span>(v == fa) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span>(mrk[v] == mrk[u])<span class="hljs-comment">//同组即同色</span><br>            col[v] = col[u];<br>        <span class="hljs-keyword">else</span> col[v] = !col[u];<span class="hljs-comment">//异组即异色</span><br>        <span class="hljs-built_in">dfs2</span>(v, u);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">memset</span>(head, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(head));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u, v;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);<br>        <span class="hljs-built_in">add</span>(u, v);<br>        <span class="hljs-built_in">add</span>(v, u);<br>    &#125;<br>    flag = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">dfs1</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(flag == <span class="hljs-literal">false</span> || mrk[<span class="hljs-number">0</span>] != <span class="hljs-number">0</span>)<span class="hljs-comment">//后者是填色溢出</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(col[i] == <span class="hljs-number">0</span>)?<span class="hljs-string">&#x27;R&#x27;</span>:<span class="hljs-string">&#x27;B&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-点一成零"><a class="markdownIt-Anchor" href="#d-点一成零"></a> D 点一成零</h2><p>bfs，并查集</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>假设图中共有p组连通块，每一块包含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>格，则总方案数即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo stretchy="false">!</mo><mo>∗</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></msubsup><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p!*\prod_{i=1}^{p}c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>；</p><p>那么我们需要做的便是求出p与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>；</p><p>我们可以用遍历网格进行bfs创建并查集，并用并查集维护更改；</p><p>最开始抱有侥幸心理，我想对于每一次更改，遍历所有连通块以重新计算ans，结果爆了TLE；</p><p>对于具体的维护过程：<br />如果新增了一个面积为c的连通块，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>p</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">ans=ans*(p+1)*c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span>；<br />进一步地，如果一个面积为b的连通块，由于方块更新，并入了一个面积为a的连通块，则对这两个连通块来说（即不包括点的那个块，不过该块同理，面积为1）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mi>a</mi><mi>n</mi><mi>s</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi mathvariant="normal">/</mi><mi>a</mi><mi mathvariant="normal">/</mi><mi>b</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ans=ans/p/a/b*(a+b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord">/</span><span class="mord mathdefault">p</span><span class="mord">/</span><span class="mord mathdefault">a</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span></span></span></span>；逆元处理除法即可；</p><p>使并查集的根为连通块中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>∗</mo><mi>n</mi><mo>+</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">i*n+j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>最小的点</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M=<span class="hljs-number">1e9</span>+<span class="hljs-number">7</span>,N=<span class="hljs-number">502</span>;<br><br>pair&lt;<span class="hljs-type">int</span> ,<span class="hljs-type">int</span>&gt; fa[<span class="hljs-number">502</span>][<span class="hljs-number">502</span>];<span class="hljs-comment">//father</span><br>map&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;,<span class="hljs-type">int</span>&gt;cnt;<span class="hljs-comment">//以[i][j]为根的并查集所代表的连通块的面积</span><br>queue&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; &gt;que;<span class="hljs-comment">//bfs队列</span><br><span class="hljs-type">int</span> di[]=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;,dj[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> mp[<span class="hljs-number">502</span>][<span class="hljs-number">502</span>],n,m,cou=<span class="hljs-number">0</span>;<br><br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a,ll b)</span><span class="hljs-comment">//快速幂</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(;b;b&gt;&gt;=<span class="hljs-number">1</span>)<br>    &#123;<span class="hljs-keyword">if</span>(b&amp;<span class="hljs-number">1</span>)ans=ans*a%M;<br>    a=a*a%M;&#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function">pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; <span class="hljs-title">find</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; pi)</span><span class="hljs-comment">//并查集find</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(fa[pi.first][pi.second]!=pi)fa[pi.first][pi.second]=<span class="hljs-built_in">find</span>(fa[pi.first][pi.second]);<br>    <span class="hljs-keyword">return</span> fa[pi.first][pi.second];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; fat)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k;<br>    <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;now=que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)<br>        &#123;<br>            <span class="hljs-type">int</span> in=now.first+di[k],jn=now.second+dj[k];<br>            <span class="hljs-keyword">if</span>(in&gt;=<span class="hljs-number">0</span>&amp;&amp;in&lt;n&amp;&amp;jn&gt;=<span class="hljs-number">0</span>&amp;&amp;jn&lt;n&amp;&amp;mp[in][jn]&amp;&amp;fa[in][jn]==<span class="hljs-built_in">make_pair</span>(in,jn)&amp;&amp;!(in==fat.first&amp;&amp;jn==fat.second))<br>            &#123;<br>                cnt[fat]++;<br>                fa[in][jn]=fat;<br>                que.<span class="hljs-built_in">push</span>(&#123;in,jn&#125;);<br>                <span class="hljs-comment">//printf(&quot;*%d\n&quot;,cnt[fat]);</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i,j,k;<br>    string g;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n;j++)mp[i][j]=g[j]-<span class="hljs-string">&#x27;0&#x27;</span>,fa[i][j]=&#123;i,j&#125;;<br>    &#125;<br>    <span class="hljs-comment">//图接收完毕</span><br>    ll ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;n;j++)<br>            <span class="hljs-keyword">if</span>(mp[i][j]&amp;&amp;fa[i][j]==<span class="hljs-built_in">make_pair</span>(i,j))<br>            &#123;<br>                cou++;<br>                cnt[&#123;i,j&#125;]=<span class="hljs-number">1</span>;<br>                que.<span class="hljs-built_in">push</span>(&#123;i,j&#125;);<br>                <span class="hljs-built_in">bfs</span>(&#123;i,j&#125;);<br>                ans*=(ll)cou*cnt[&#123;i,j&#125;];<span class="hljs-comment">//计算初始ans</span><br>                ans%=M;<br>            &#125;<br>    cin&gt;&gt;m;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> ci,cj;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;ci,&amp;cj);<br>        <span class="hljs-keyword">if</span>(mp[ci][cj])<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<span class="hljs-comment">//如果本来就是1，则图无任何变化</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            mp[ci][cj]=<span class="hljs-number">1</span>;<span class="hljs-comment">//假定其为单独块</span><br>            cnt[&#123;ci,cj&#125;]=<span class="hljs-number">1</span>;<br>            cou++;<br>            ans*=cou;<br>            ans%=M;<span class="hljs-comment">//其作为单独块，更新ans，后面再修正</span><br>            pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; to=&#123;ci,cj&#125;;<br>            <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)<span class="hljs-comment">//判断该及块四周的连通块形成的新连通块的根</span><br>            &#123;<br>                <span class="hljs-type">int</span> in=ci+di[k],jn=cj+dj[k];<br>                <span class="hljs-keyword">if</span>(in&gt;=<span class="hljs-number">0</span>&amp;&amp;in&lt;n&amp;&amp;jn&gt;=<span class="hljs-number">0</span>&amp;&amp;jn&lt;n&amp;&amp;mp[in][jn])<br>                &#123;<br>                    pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;fan=<span class="hljs-built_in">find</span>(&#123;in,jn&#125;);<br>                    <span class="hljs-keyword">if</span>(fan.first*n+fan.second&lt;to.first*n+to.second)to=fan;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">make_pair</span>(ci,cj)!=to)<span class="hljs-comment">//如果新块的根不是自身，将自身并入新块根所在旧块</span><br>            &#123;<br>                pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;fan=<span class="hljs-built_in">find</span>(&#123;ci,cj&#125;);<br>                fa[fan.first][fan.second]=to;<br>                ans*=<span class="hljs-built_in">qm</span>((ll)cou*(cnt[to]*cnt[fan])%M,M<span class="hljs-number">-2</span>);<br>                cou--;<br>                ans%=M;<br>                cnt[to]+=cnt[fan];<br>                ans*=cnt[to];<br>                ans%=M;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">4</span>;k++)<br>            &#123;<br>                <span class="hljs-type">int</span> in=ci+di[k],jn=cj+dj[k];<br>                <span class="hljs-keyword">if</span>(in&gt;=<span class="hljs-number">0</span>&amp;&amp;in&lt;n&amp;&amp;jn&gt;=<span class="hljs-number">0</span>&amp;&amp;jn&lt;n&amp;&amp;mp[in][jn])<br>                &#123;<br>                    pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;fan=<span class="hljs-built_in">find</span>(&#123;in,jn&#125;);<br>                    <span class="hljs-keyword">if</span>(fan!=to)<span class="hljs-comment">//把除新块根所在旧块以外的旧块并入新块根</span><br>                    &#123;<br>                        fa[fan.first][fan.second]=to;<br>                        ans*=<span class="hljs-built_in">qm</span>((ll)cou*(cnt[to]*cnt[fan])%M,M<span class="hljs-number">-2</span>);<br>                        cou--;<br>                        ans%=M;<br>                        cnt[to]+=cnt[fan];<br>                        ans*=cnt[to];<br>                        ans%=M;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,ans);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="e-三棱锥之刻"><a class="markdownIt-Anchor" href="#e-三棱锥之刻"></a> E 三棱锥之刻</h2><p>立体几何</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>设中心点距面距离 ds ，距棱距离 da ，距顶点距离 dp ，喷漆半径 r<br />分为四种情况：</p><p>① r &lt; ds<br />此种情况即无法喷到漆，面积为 0 ；</p><p>② ds &lt;= r &lt;= da<br />此种情况即每面被喷漆形状均为完整的圆，通过勾股定理求漆面半径，求圆面积即可；</p><p>③ da &lt; r &lt; dp<br />此种情况即为每面被喷漆形状为（三）弦切圆，如下图：<br /><img src="https://s2.loli.net/2022/08/02/ogOsABraeY4DGmx.png" alt="在这里插入图片描述" /></p><p>我将其分为三个三角形和一个扇形求面积，因为图中 k l 的长度均可求，便可使用 arccos 求出角度，进而得知扇形所占圆心角，进而求出扇形面积；</p><p>④ r &gt;= dp<br />此时正四面体的四个面均被涂满，求三角形面积即可。</p><p>以下数据可参考，图源百度词条<a href="https://baike.baidu.com/item/%E6%AD%A3%E5%9B%9B%E9%9D%A2%E4%BD%93/9957787?fr=aladdin">正四面体</a><br /><img src="https://s2.loli.net/2022/08/02/GlicoBbLY2stZa3.png" alt="在这里插入图片描述" /></p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PI acos(-1)</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> r,a,d;<br>    cin&gt;&gt;a&gt;&gt;d;<br>    <span class="hljs-keyword">if</span>(d*d-a*a/<span class="hljs-number">24</span>&lt;<span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//1</span><br>    r=<span class="hljs-built_in">sqrt</span>(d*d-a*a/<span class="hljs-number">24</span>);<br>    <span class="hljs-keyword">if</span>(r&lt;=a/<span class="hljs-number">2</span>/<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>))<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.5lf&quot;</span>,<span class="hljs-number">4</span>*PI*r*r);<span class="hljs-comment">//2</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(r&gt;a/<span class="hljs-number">2</span>/<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>)&amp;&amp;r&lt;a/<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>))<span class="hljs-comment">//3</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.5lf&quot;</span>,(<span class="hljs-number">3</span>*(<span class="hljs-built_in">sqrt</span>(r*r-a*a/<span class="hljs-number">12</span>)*a/<span class="hljs-number">2</span>/<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>))+PI*r*r*(<span class="hljs-number">2</span>*PI<span class="hljs-number">-6</span>*<span class="hljs-built_in">acos</span>(a/<span class="hljs-number">2</span>/<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>)/r))/(<span class="hljs-number">2</span>*PI))*<span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.5lf&quot;</span>,a*a*<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">3</span>));<span class="hljs-comment">//4</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="f-对答案一时爽"><a class="markdownIt-Anchor" href="#f-对答案一时爽"></a> F 对答案一时爽</h2><p>贪心</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>最小值当然是 0 ，最大值即为两人答题总数 - 答案相异数。</p><p>假设一人全对，此时即为最大值。</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,sa=<span class="hljs-number">0</span>,i,c=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> a[<span class="hljs-number">202</span>],b[<span class="hljs-number">202</span>],g;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">getchar</span>();<br>    c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c!=n)<br>    &#123;<br>        g=<span class="hljs-built_in">getchar</span>();<br>        <span class="hljs-keyword">if</span>(g&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;g&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)<br>        a[c++]=g;<br>    &#125;<br>    <span class="hljs-built_in">getchar</span>();<br>    c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(c!=n)<br>    &#123;<br>        g=<span class="hljs-built_in">getchar</span>();<br>        <span class="hljs-keyword">if</span>(g&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;g&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)<br>        b[c++]=g;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;n;i++)<br><br>            <span class="hljs-keyword">if</span>(a[i]==b[i])sa++;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,sa+n,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>字符串处理一团糟…</p><h2 id="h-幂塔个位数的计算"><a class="markdownIt-Anchor" href="#h-幂塔个位数的计算"></a> H 幂塔个位数的计算</h2><p>找规律</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>具体推倒过程过于繁琐，主要是通过<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi mathvariant="normal">%</mi><mn>10</mn></mrow><annotation encoding="application/x-tex">a\%10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord mathdefault">a</span><span class="mord">%</span><span class="mord">1</span><span class="mord">0</span></span></span></span>的结果推倒<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mi>a</mi></msup><mi mathvariant="normal">%</mi><mn>10</mn></mrow><annotation encoding="application/x-tex">a^{a}\%10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord">1</span><span class="mord">0</span></span></span></span>的结果，再进行迭代。<br />结果会在大概三层之内收束到定值。</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">char</span> a[<span class="hljs-number">100005</span>],n[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,a,n);<br>ll la=<span class="hljs-built_in">strlen</span>(a),ln=<span class="hljs-built_in">strlen</span>(n);<br><span class="hljs-keyword">if</span>(ln==<span class="hljs-number">1</span> &amp;&amp; n[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;1&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a[la<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> a1=a[la<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-type">int</span> b=((a[la<span class="hljs-number">-2</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">10</span>+a[la<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)%<span class="hljs-number">4</span>;<br><span class="hljs-keyword">if</span>(a1==<span class="hljs-number">0</span> || a1==<span class="hljs-number">1</span> || a1==<span class="hljs-number">5</span> || a1==<span class="hljs-number">6</span> || a1==<span class="hljs-number">9</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a1);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a1==<span class="hljs-number">4</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a1==<span class="hljs-number">2</span> || a1==<span class="hljs-number">8</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(ln==<span class="hljs-number">1</span> &amp;&amp; n[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp; b!=<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;4\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a1==<span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a1==<span class="hljs-number">7</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">3</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3\n&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="i限制不互素对的排列"><a class="markdownIt-Anchor" href="#i限制不互素对的排列"></a> I限制不互素对的排列</h2><p>构造</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>要用 [ 1 , n ] 的 n 个数构造出含 k ( k &lt;= n / 2 ) 对非互质数对的数列，首先我们想到的就是用偶数构造所求部分，然后顺序排列其他数。</p><p><em>接下来除法默认向下取整</em></p><p>具体来说，对于某偶数 2 * i ，一定与 2 * ( i + 1 ) 不互质；对于某奇数 2 * i + 1 ，一定与 2 * ( i + 1 )  + 1 互质；对于 &gt;= 2 的正整数 i ，一定与 i + 1 互质。</p><p>依照以上三条性质，如果输入值为 8 3 我们便可以构造出 [ 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 ] 与此同时，便发现了一个问题：对于前 n 个数，含有 ⌊ n / 2 ⌋ 个偶数，最多构成 ⌊ n / 2 ⌋ - 1 个偶数对，但是 k &lt;= n / 2 。</p><p>解决此种问题，我们可以进一步处理，选择满足以下性质的某偶数：可以表示为 2 * ( 2 * i + 1 ) ，即可以拆成 2 和某奇数的积。将此偶数放在偶数部分末尾，后再接该奇数，则可保证有 k 对非互质数对。</p><p>对于该偶数，10,14,18,…,34,…,122,… 均满足条件，但是满足条件的最小数是 6 。取最小数除了方便处理之外，同时也方便可行判定。</p><p>此时，本题的输入便有三种情况：</p><p>① n &lt; 6 &amp;&amp; k = n / 2<br />此时无可行解，输出 -1；</p><p>② n &gt; 6 &amp;&amp; k &lt; n / 2<br />此时输出前 k + 1 个偶数后，其余数依次输出即可；</p><p>③ n &gt; 6 &amp;&amp; k = n / 2<br />此时输出除 6 外的前 k - 1 个偶数后，输出 6 3 ，再依次输出其余数。</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k,i;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">6</span>&amp;&amp;k==n/<span class="hljs-number">2</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<span class="hljs-comment">//1</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k==n/<span class="hljs-number">2</span>)<span class="hljs-comment">//3</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n/<span class="hljs-number">2</span>;i++)<span class="hljs-keyword">if</span>(i!=<span class="hljs-number">3</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-number">2</span>*i);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;6 3 1 &quot;</span>);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">5</span>;i&lt;=n;i+=<span class="hljs-number">2</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>    &#125;<br>    <span class="hljs-keyword">else</span><span class="hljs-comment">//2</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=k+<span class="hljs-number">1</span>;i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,<span class="hljs-number">2</span>*i);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>&amp;&amp;i/<span class="hljs-number">2</span>&lt;=k+<span class="hljs-number">1</span>)<span class="hljs-keyword">continue</span>;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="j一群小青蛙呱蹦呱蹦呱"><a class="markdownIt-Anchor" href="#j一群小青蛙呱蹦呱蹦呱"></a> J一群小青蛙呱蹦呱蹦呱</h2><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>我们手动模拟可知，剩下的数是质因子个数大于等于二的数，也就是说，剩下的数均可表示为 p<sub>1</sub>^m<sub>1</sub> * p<sub>2</sub>^m<sub>2</sub> * … * p<sub>n</sub>^m<sub>n</sub> ( n &gt;= 2 )。如下图<br /><img src="https://s2.loli.net/2022/08/02/F96a7gPY2Rktp38.png" alt="在这里插入图片描述" /><br />对于范围内的所有质数 p[ i ] ，第 j 个剩下的数可以表示为 p<sub>1</sub>^m<sub>1j</sub> * p<sub>2</sub>^m<sub>2j</sub> * … * p<sub>n</sub>^m<sub>nj</sub>  则所有剩下的数的最小公倍数则为 p<sub>1</sub>^max( m<sub>11</sub> , m<sub>12</sub> , m<sub>13</sub>, … , m<sub>1j</sub> ) * p<sub>2</sub>^max( m<sub>21</sub> , m<sub>22</sub> , m<sub>23</sub>, … , m<sub>2j</sub> ) * … * p<sub>n</sub>^max( m<sub>n1</sub> , m<sub>n2</sub> , m<sub>n3</sub>, … , m<sub>nj</sub>) 。<br />接下来我们的任务就是求出 max() 。</p><p>对于 &gt;= 2 的任意 p[ i ] ，小于 N （范围）且 含有 p[ i ] 幂次最大的 剩余数显然是 2 * p[ i ]^m ，则可以求出 m = log<sub>p[i]</sub>n/2；</p><p>对于质数 2 ，最大数则是 3 * 2<sup>m</sup> ,此时 m = log<sub>2</sub>n/3 。</p><p>之后累乘 p[ i ]<sup>m</sup> 即可。</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> N=<span class="hljs-number">80000007</span>;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">qs</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a,<span class="hljs-type">long</span> <span class="hljs-type">long</span> t)</span><span class="hljs-comment">//快速幂取模</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(t)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)ans=ans*a%MOD;<br>        a=a*a%MOD;<br>        t&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans%MOD;<br>&#125;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> p[N];<br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> n[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    n[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,n[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> i,j,c=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=N;i++)<span class="hljs-comment">//线性筛</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(!n[i])p[c++]=i;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;c&amp;&amp;i*p[j]&lt;=N;j++)<br>        &#123;<br>            n[i*p[j]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i%p[j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> n;<span class="hljs-comment">//与前面的数组名重复了，但是编译运行没有问题，可能不太好理解</span><br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">if</span>(n&lt;<span class="hljs-number">6</span>)&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;empty&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-built_in">qs</span>(<span class="hljs-number">2</span>,(<span class="hljs-type">long</span> <span class="hljs-type">long</span>)<span class="hljs-built_in">log2</span>(n/<span class="hljs-number">3.0</span>));<span class="hljs-comment">//对2</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;p[i]&lt;=n/<span class="hljs-number">2</span>&amp;&amp;i&lt;c;i++)<span class="hljs-comment">//对其他</span><br>    &#123;<br>        ans%=MOD;<br>        ans*=<span class="hljs-built_in">qs</span>(p[i],(<span class="hljs-type">long</span> <span class="hljs-type">long</span>)(<span class="hljs-built_in">log2</span>(n/<span class="hljs-number">2.0</span>)/<span class="hljs-built_in">log2</span>(p[i]*<span class="hljs-number">1.0</span>)));<span class="hljs-comment">//浮点除法&amp;换底公式</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans%MOD);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>附：关于线性筛的优化，可以参照<a href="https://www.luogu.com.cn/blog/countercurrent-time/qian-tan-su-shuo-shai-you-hua">这里</a>，（代码未体现）</p><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>《 基 础 选 手 》</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>序列合并-优先队列</title>
    <link href="/2021.01-06/%E5%BA%8F%E5%88%97%E5%90%88%E5%B9%B6-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    <url>/2021.01-06/%E5%BA%8F%E5%88%97%E5%90%88%E5%B9%B6-%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.luogu.com.cn/problem/P1631">洛谷 P1631 序列合并</a>&amp;&amp;<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=1689">NEFU OJ-1689 序列合并</a>（后者链接已补，接下来题目描述来自后者，代码符合后者要求）</p><blockquote><p>题目描述</p><blockquote><p>给出两个长度为 n 的有序表 A 和 B，在 A 和 B 中各任取一个元素，可以得到 n^ 2 个和，求这些和中最小的 n 个。</p></blockquote></blockquote><blockquote><p>输入描述</p><blockquote><p>第 1 行包含 1 个整数 n（1≤n≤400000）。<br />第 2 行与第 3 行分别有 n 个整数，各代表有序表 A 和 B。一行中的每两个整数之间用一个空格隔开，大小在长整型范围内，数据保证有序表单调递增。<br />建议用scanf()读入，否则会TLE!</p></blockquote></blockquote><blockquote><p>输出描述</p><blockquote><p>输出共 n 行，每行一个整数，第 i 行为第 i 小的和。<br />数据保证在 long long 范围内。</p></blockquote></blockquote><blockquote><p>输入样例</p><blockquote><p>3<br />2 6 6<br />1 4 8</p></blockquote></blockquote><blockquote><p>输出样例</p><blockquote><p>3<br />6<br />7</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>先说说优先队列吧：</p><p>优先队列，顾名思义就是依照优先程度排列的序列。</p><p>如果需要从小到大排序时，与set的表象区别就是set会自动去重，priority_queue 则不会。<br />如果不计时间复杂度的话，struct 结构体与带 cmp 的 sort 搭配也能达到同样的效果。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>首先 O(n<sup>2</sup>) 妥妥的会爆。</p><p>我们要输出前 n 小的数，可以采取边输出边维护的大体方向，同时也要“兼顾”到所有的 n<sup>2</sup> 项。</p><p>对于有序的 A B 数组，我们易知 a[ i ] + b[ j ] 一定小于等于 a[ i ] + b[ j + 1 ]（ 调换 a,b 同理），所以我们可以先将 a[ i ] + b[ 1 ] 全部入队，此时队首元素一定是 a[ 1 ] + b[ 1 ] ，将其出队后，入队 a[ 1 ] + b[ 2 ]。</p><p>在接下来的过程中，如果 a[ i ] + b[ j ] 为最小值被出队，就应入队 a[ i ] + b[ j + 1 ] <sup>[^1]</sup>，再进行排序（性质）。</p><p>对于这个过程，我们可以理解为 对于每一个 i ，都存在一个数组，是 a[ i ] 依次与每一个 b 集合元素的和。对于这一个数组，只有前面的数入队后被出队时，后续元素才有可能入队。<br />通过此过程，我们就可以在不计算每一个值的情况下，“兼顾”到每一个值。</p><blockquote><p>[^1]：因为总共只需输出 n 个值，所以不需要考虑数组溢出问题。</p></blockquote><h2 id="qa"><a class="markdownIt-Anchor" href="#qa"></a> Q&amp;A</h2><p>Q：能不能用双指针同时滑动两个数组？<br />A：这样样例过不去的，可以自己分析一下。大体上就是在滑动过程中，略过了一些可行的值。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ord</span><br>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a,na,nb;<span class="hljs-comment">//na,nb 分别存储 a 对应在数组 A,B 的序号值</span><br>&#125;;<span class="hljs-comment">//分号！</span><br>priority_queue&lt;ord&gt; qu;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span> &lt; (<span class="hljs-type">const</span> ord &amp;a,<span class="hljs-type">const</span> ord &amp;b)<br>&#123;<br>    <span class="hljs-keyword">return</span> a.a &gt;b.a ;<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> n,i,j,a[<span class="hljs-number">400005</span>],b[<span class="hljs-number">400005</span>],c,k,p[<span class="hljs-number">400005</span>]= &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;b[i]);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)qu.<span class="hljs-built_in">push</span>(&#123;a[i]+b[<span class="hljs-number">1</span>],i,<span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,qu.<span class="hljs-built_in">top</span>().a);<br>        qu.<span class="hljs-built_in">push</span>(&#123;a[qu.<span class="hljs-built_in">top</span>().na]+b[qu.<span class="hljs-built_in">top</span>().nb+<span class="hljs-number">1</span>],qu.<span class="hljs-built_in">top</span>().na,qu.<span class="hljs-built_in">top</span>().nb+<span class="hljs-number">1</span>&#125;);<span class="hljs-comment">//A序号值不变，B序号值加一</span><br>        qu.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>想了想，最后归进了DP，感觉思路有些类似吧</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第八届“图灵杯”NEUQ-ACM程序设计竞赛个人赛 全题解</title>
    <link href="/2021.01-06/%E7%AC%AC%E5%85%AB%E5%B1%8A%E2%80%9C%E5%9B%BE%E7%81%B5%E6%9D%AF%E2%80%9DNEUQ-ACM%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%AA%E4%BA%BA%E8%B5%9B%20%E5%85%A8%E9%A2%98%E8%A7%A3/"/>
    <url>/2021.01-06/%E7%AC%AC%E5%85%AB%E5%B1%8A%E2%80%9C%E5%9B%BE%E7%81%B5%E6%9D%AF%E2%80%9DNEUQ-ACM%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E4%B8%AA%E4%BA%BA%E8%B5%9B%20%E5%85%A8%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/11746#question">这里</a><br /></p><h1 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h1><p>好多大佬哦~</p><h1 id="a-切蛋糕"><a class="markdownIt-Anchor" href="#a-切蛋糕"></a> A 切蛋糕</h1><p>这道题是特判题（SpecialJudge），第一眼没看见，读完题就决定放了。</p><p>由于宽松的步数限制，可以暴力做，即先通过2047次切割把蛋糕切为2048份，即可保证分配时误差值小于 1 / 1024。再找出可行的 c 满足 fabs( c / 2048 - 1 / k ) &lt;= 1 / 1024，即为给每份包装进 c 个 1 / 2<sup>11</sup>。</p><p>注：经测试，蛋糕可以有剩余。</p><p>//标准做法以后再补（flag）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k,two=<span class="hljs-number">1</span>,i,j;<br>    cin&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">2048</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>((<span class="hljs-type">double</span>)i/<span class="hljs-number">2048.0</span><span class="hljs-number">-1.0</span>/k)&lt;=<span class="hljs-number">1.0</span>/<span class="hljs-number">1024</span>)<span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> c=i;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-number">2047</span>+k);<span class="hljs-comment">//输出总步数</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;=<span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;=two; j++)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 %d\n&quot;</span>,i,cou++);<br>        two*=<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>; j&lt;=k; j++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2 %d&quot;</span>,c);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=c; i++)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; 11&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="b-小宝的幸运数组"><a class="markdownIt-Anchor" href="#b-小宝的幸运数组"></a> B 小宝的幸运数组</h1><p>用 a[ i ] 表示从第一项加到第 i 项的和，则区间 [ i , j ] 的和为 a[ j ] - a[ i - 1 ] 。</p><p>若区间 [ i , j ] 的和满足能被 k 整除，则有 ( a[ j ] - a[ i - 1 ] ) % k ==0，<br />即 a[ j ] % k == a[ i - 1 ] % k，<br />所以此问题等价为找出 a[ i ] % k 相等的最远距离。<br />O( k n<sup>2</sup> )遍历显然不现实，我们可以对 [ 0 , k - 1 ] 的每一个数存下最前位置和最后位置，再遍历 [ 0 , k - 1 ] 找出左右距离最远的。</p><p><em>求余对四则运算封闭</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100005</span><br> <br>ll a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-type">int</span> b[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;,l[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;,r[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-comment">//b计数，l,r存左右位置</span><br>        <span class="hljs-type">int</span> n,k,i,g,a=<span class="hljs-number">0</span>,m=<span class="hljs-number">0</span>;<br>        cin&gt;&gt;n&gt;&gt;k;<br>        b[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;l[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<span class="hljs-comment">//数组无元素时</span><br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g);<br>            a+=g;<br>            a%=k;<br>            <span class="hljs-keyword">if</span>(!b[a])&#123;l[a]=i;b[a]++;&#125;<br>            <span class="hljs-keyword">else</span>&#123;r[a]=i;b[a]++;&#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;k;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(b[i]&gt;=<span class="hljs-number">2</span>&amp;&amp;r[i]-l[i]&gt;m)<span class="hljs-comment">//有左有右</span><br>            m=r[i]-l[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(m)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,m);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="c-上进的凡凡"><a class="markdownIt-Anchor" href="#c-上进的凡凡"></a> C 上进的凡凡</h1><p>首先依题意，每个数构成的长度为一的数组均为nice的。</p><p>若某数大于等于前数，则标注成1，否则标记为0，统计每段连续1的长度，对于长度为 n 的连续1，代表了一段长度为 n + 1 的非降数组，此数组中长度大于等于二的子数组有 n * ( n - 1 ) / 2 个。</p><p>累加每一段非降数组的子数组个数，再加上总共的元素个数，即为结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span> </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> n,i,j,c;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans=<span class="hljs-number">0</span>;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>    <span class="hljs-keyword">for</span>(i=n;i&gt;=<span class="hljs-number">2</span>;i--)<span class="hljs-keyword">if</span>(a[i]&gt;=a[i<span class="hljs-number">-1</span>])a[i]=<span class="hljs-number">1</span>;<span class="hljs-keyword">else</span> a[i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//标注</span><br>    a[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> l,r;<br>    l=<span class="hljs-number">1</span>,r=<span class="hljs-number">1</span>;<br>    ans=n;<span class="hljs-comment">//单元素数组</span><br>    <span class="hljs-keyword">while</span>(l!=n)<br>    &#123;<br>        <span class="hljs-comment">//printf(&quot;%lld %d\n&quot;,ans,r);</span><br>        <span class="hljs-keyword">while</span>((!a[l+<span class="hljs-number">1</span>])&amp;&amp;l&lt;=n)l++;<span class="hljs-comment">//类似于滑窗</span><br>        r=l+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(a[r+<span class="hljs-number">1</span>]&amp;&amp;r&lt;=n)r++;<br>        <span class="hljs-keyword">if</span>(l&lt;=n&amp;&amp;r&lt;=n)&#123;<br>        <span class="hljs-type">int</span> len=r-l+<span class="hljs-number">1</span>;<br>        ans+=(<span class="hljs-type">long</span> <span class="hljs-type">long</span>)len*(len<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>;<br>        l=r+<span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">if</span>(l&gt;n)l=n;<span class="hljs-comment">//防溢出</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="d-seek-the-joker-i"><a class="markdownIt-Anchor" href="#d-seek-the-joker-i"></a> D Seek the Joker I</h1><p>巴什博弈</p><p>也可以现推：<br /><em>先手者抽牌+后手者抽牌 为一轮</em></p><p>若保证先手者必赢，则最后一轮开始时需满足桌面有 1 &lt; n &lt;= k + 1 张牌，先手者取 n - 1 张，后手者必输；<br />则倒数第二轮开始时，需满足桌面有 k + 2 &lt; n &lt;= 2 * k + 2 张牌，先手者取至剩 k + 2 张，无论后手者如何取，均可满足先手者必赢的最后一轮条件；<br />同理，倒数第三轮开始时，需满足桌面有 2 * k + 3 &lt; n &lt;= 3 * k + 3 张牌，先手者取至剩  2 * k + 3 张，无论后手者如何取，均可满足先手者必赢的最后一轮条件；</p><p>以此类推，若 n 满足存在正整数 a 使得 ( a - 1 ) * k + a &lt; n &lt;= a * k + a ，则先手者必赢，化简后则等价为 ⌈ n / ( k + 1 ) ⌉ * ( k + 1 ) - k &lt; n。（ ⌈ n / ( k + 1 ) ⌉ 即为 a ）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,k;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ceil</span>(<span class="hljs-number">1.0</span>*n/(k+<span class="hljs-number">1</span>))*(k+<span class="hljs-number">1</span>)-k&lt;n)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yo xi no forever!\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ma la se mi no.1!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>补充：也可以说 若 n 满足存在正整数 a 使得 n = ( a - 1 ) * k + a ，等价于 ( n - 1 ) / ( k + 1 )为整数时，先手必输<br />代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,k;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br>        <span class="hljs-keyword">if</span>((n<span class="hljs-number">-1.0</span>)/(k+<span class="hljs-number">1.0</span>)-(<span class="hljs-type">int</span>)((n<span class="hljs-number">-1.0</span>)/(k+<span class="hljs-number">1.0</span>))&gt;<span class="hljs-number">0.000001</span>)<span class="hljs-comment">//这里如果是1e-4就会WA</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yo xi no forever!\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ma la se mi no.1!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="e-seek-the-joker-ii"><a class="markdownIt-Anchor" href="#e-seek-the-joker-ii"></a> E Seek the Joker II</h1><p><a href="https://blog.csdn.net/qq_41311604/article/details/79980882">威佐夫博弈</a></p><p>这个不太好现推了，走结论吧。</p><p>( a &lt; b )<br />( sqrt(5.0) + 1 ) * ( b - a ) / 2 = a 时，先手必输。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> mysticalConstant = (<span class="hljs-number">1.0</span>+<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">5.0</span>))/<span class="hljs-number">2.0</span>;<br>    <span class="hljs-type">int</span> T;<br>    cin&gt;&gt;T;<br>    <span class="hljs-keyword">while</span>(T--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,x;<br>        cin&gt;&gt;n&gt;&gt;x;<br>        <span class="hljs-type">int</span> a=x<span class="hljs-number">-1</span>,b=n-x;<br>        <span class="hljs-keyword">if</span>(a&gt;b) <span class="hljs-built_in">swap</span>(a,b);<br>        <span class="hljs-type">int</span> temp = (b-a)*mysticalConstant;<br>        <span class="hljs-keyword">if</span>(temp!=a) cout&lt;&lt;<span class="hljs-string">&quot;yo xi no forever!\n&quot;</span>;<br>        <span class="hljs-keyword">else</span> cout&lt;&lt;<span class="hljs-string">&quot;ma la se mi no.1!\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="f-成绩查询ing"><a class="markdownIt-Anchor" href="#f-成绩查询ing"></a> F 成绩查询ing</h1><p>需要构建两组映射：名字与个人信息，成绩与名字<br />这里多构建了一组：名字与序号（nn），序号与个人信息（stu），成绩与名字（ms）</p><p>成绩对应的名字用set存可以直接按字典序排列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>map&lt;<span class="hljs-type">int</span>,set&lt;string&gt; &gt;ms;<br>set&lt;string&gt;::iterator it;<br>map&lt;string,<span class="hljs-type">int</span>&gt;nn;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">stud</span><br>&#123;<br>    <span class="hljs-type">int</span> gra,sex,num;<br>    <span class="hljs-comment">//string na;</span><br>&#125;stu[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,i;<br>    string ge;<br> <br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        cin&gt;&gt;ge;<br>        nn[ge]=i;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;stu[i].gra,&amp;stu[i].sex,&amp;stu[i].num);<br>        ms[stu[i].gra].<span class="hljs-built_in">insert</span>(ge);<br>    &#125;<br>    <span class="hljs-type">int</span> t,o;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;o);<br>        <span class="hljs-keyword">if</span>(o==<span class="hljs-number">1</span>)<br>        &#123;<br>            cin&gt;&gt;ge;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,<br>                   stu[nn[ge]].gra,stu[nn[ge]].num,stu[nn[ge]].sex);<span class="hljs-comment">//注意顺序</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;o);<br>            <span class="hljs-keyword">if</span>(!ms[o].<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                <span class="hljs-keyword">for</span>(it=ms[o].<span class="hljs-built_in">begin</span>();it!=ms[o].<span class="hljs-built_in">end</span>();it++)<br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,(*it).<span class="hljs-built_in">c_str</span>());<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="g-贪吃的派蒙"><a class="markdownIt-Anchor" href="#g-贪吃的派蒙"></a> G 贪吃的派蒙</h1><p>先找出派蒙的位置（pmi），计算出派蒙左边的人一轮下来所要吃的最少数量ami和最多数量amx，</p><p>依靠 ami &lt; k &amp;&amp; amx + pmn &gt;= k 判断第一次轮到派蒙时能不能被派蒙吃尽，如果不能，总量减去派蒙吃掉的（pmn）后，每轮ami与amx加上派蒙外所有人的最小值与最大值，再进行比较。amx &gt; k 为止。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,k,pmi,pmn=<span class="hljs-number">0</span>,i,f=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> r[<span class="hljs-number">100005</span>]= &#123;<span class="hljs-number">0</span>&#125;;<br>        cin&gt;&gt;n&gt;&gt;k;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;r[i]);<br>            <span class="hljs-keyword">if</span>(r[i]&gt;pmn)<br>            &#123;<br>                pmn=r[i];<br>                pmi=i;<br>            &#125;<br>        &#125;<br>        ll ami=pmi<span class="hljs-number">-1</span>,amx=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;pmi; i++)amx+=r[i];<br>        <span class="hljs-keyword">if</span>(ami&lt;k&amp;&amp;amx+pmn&gt;=k)f=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">while</span>(amx&lt;=k)<br>            &#123;<br>                k-=pmn;<br>                ami+=n<span class="hljs-number">-1</span>;<span class="hljs-comment">//+所有人的最小值</span><br>                <span class="hljs-keyword">for</span>(i=pmi+<span class="hljs-number">1</span>; i&lt;=n; i++)amx+=r[i];<span class="hljs-comment">//+后面人的最大值</span><br>                <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;pmi; i++)amx+=r[i];<span class="hljs-comment">//+前面人的最大值</span><br>                <span class="hljs-keyword">if</span>(ami&lt;k&amp;&amp;amx+pmn&gt;=k)<br>                &#123;<br>                    f=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="h-数羊"><a class="markdownIt-Anchor" href="#h-数羊"></a> H 数羊</h1><p>打表找规律</p><p>m = 0 时，A( n , 0 ) = n + 2 ;（n = 1 时特判 A( 1, 0 ) = 2 ）<br />m = 1 时，A( n , 1 ) = 2 * n ；<br />m = 2 时，A( n , 2 ) = 2<sup>n</sup>。</p><p>m = 2 时需要用到快速幂。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long</span><br><span class="hljs-type">const</span> ll mod=<span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll m)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans=<span class="hljs-number">1</span>,n=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span>(m)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(m&amp;<span class="hljs-number">1</span>)ans=ans*n%mod;<br>        n=n*n%mod;<br>        m&gt;&gt;=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans%mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t,n,m;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;2\n&quot;</span>);<span class="hljs-comment">//特判</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,n+<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-number">2</span>*n);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">qm</span>(n));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="i-买花"><a class="markdownIt-Anchor" href="#i-买花"></a> I 买花</h1><p>若第一天买 a 朵，则第二天有 a * 11(B) 朵，第三天有 a * 111(B) 朵，……，第十五天有 a * 111 1111 1111 1111(B) 朵，则直接遍历[ 11 , 111 , … , 111 1111 1111 1111 ](B)，目标量能否被其中元素整除，若能则可行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k[]=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">15</span>,<span class="hljs-number">31</span>,<span class="hljs-number">63</span>,<span class="hljs-number">127</span>,<span class="hljs-number">255</span>,<span class="hljs-number">511</span>,<span class="hljs-number">1023</span>,<span class="hljs-number">2047</span>,<span class="hljs-number">4095</span>,<span class="hljs-number">8191</span>,<span class="hljs-number">16383</span>,<span class="hljs-number">32767</span>&#125;;<br>    <span class="hljs-type">int</span> i<span class="hljs-comment">/*0-13*/</span>,n,t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">13</span>;i++)<br>            <span class="hljs-keyword">if</span>(n%k[i]==<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">14</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N0\n&quot;</span>);<span class="hljs-comment">//说明没有能整除情况</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YE5\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="j-这是一题简单的模拟"><a class="markdownIt-Anchor" href="#j-这是一题简单的模拟"></a> J 这是一题简单的模拟</h1><p>可以直接用二维数组建图，检验题给数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,f,t,co,a,mi=<span class="hljs-number">0x7fffffff</span>,i;<br>    cin&gt;&gt;n&gt;&gt;m;<br>    <span class="hljs-type">int</span> r[<span class="hljs-number">302</span>][<span class="hljs-number">302</span>]= &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;f,&amp;t,&amp;co);<br>        r[f][t]=co;<br>        r[t][f]=co;<br>    &#125;<br>    cin&gt;&gt;a;<br>    <span class="hljs-type">int</span> p[<span class="hljs-number">302</span>]= &#123;<span class="hljs-number">0</span>&#125;,c[<span class="hljs-number">302</span>]= &#123;<span class="hljs-number">0</span>&#125;,g,fl;<span class="hljs-comment">//p存储题给顺序，c检验重复城</span><br>    <span class="hljs-keyword">while</span>(a--)<br>    &#123;<br>        fl=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">memset</span>(p,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> p);<br>        <span class="hljs-built_in">memset</span>(c,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> c);<br>        cin&gt;&gt;g;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=g; i++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;p[i]);<br>            <span class="hljs-keyword">if</span>(!c[p[i]])c[p[i]]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> fl=<span class="hljs-number">0</span>;<span class="hljs-comment">//如有重复城</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(g!=n||!fl)<span class="hljs-keyword">continue</span>;<br>        fl=<span class="hljs-number">1</span>;<br>        f=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> cou=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=g&amp;&amp;fl; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(r[f][p[i]])cou+=r[f][p[i]];<br>            <span class="hljs-keyword">else</span> fl=<span class="hljs-number">0</span>;<br>            f=p[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r[f][<span class="hljs-number">0</span>]&amp;&amp;fl)cou+=r[f][<span class="hljs-number">0</span>];<span class="hljs-comment">//注意回家路</span><br>            <span class="hljs-keyword">else</span> fl=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(fl&amp;&amp;cou&lt;=mi)mi=cou;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(mi&lt;<span class="hljs-number">0x7fffffff</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,mi);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="k-黑洞密码"><a class="markdownIt-Anchor" href="#k-黑洞密码"></a> K 黑洞密码</h1><p>字符串处理，注意好对26溢出的处理即可。</p><p>注：对于二维数组 a[ 4 ][ 4 ] ，a[ 0 ][ 5 ] 即代表 a[ 1 ][ 0 ]，这个在这里很好用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0</span>&#125;,in=<span class="hljs-number">0</span>,ch=<span class="hljs-number">0</span>,i=<span class="hljs-number">0</span>,j;<br>    <span class="hljs-type">char</span> c[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>],g;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">32</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;g);<br>        <span class="hljs-keyword">if</span>(g&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;g&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)a[<span class="hljs-number">0</span>][in++]=g-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">else</span> c[<span class="hljs-number">0</span>][ch++]=g;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">3</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=<span class="hljs-number">3</span>;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(c[i][j]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;c[i][j]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(c[i][j]+a[i][j]&gt;<span class="hljs-string">&#x27;Z&#x27;</span>)c[i][j]=<span class="hljs-string">&#x27;a&#x27;</span>+c[i][j]+a[i][j]-<span class="hljs-string">&#x27;Z&#x27;</span>;<br>                <span class="hljs-keyword">else</span> c[i][j]+=a[i][j];<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(c[i][j]+a[i][j]&gt;<span class="hljs-string">&#x27;z&#x27;</span>)c[i][j]=<span class="hljs-string">&#x27;A&#x27;</span>+c[i][j]+a[i][j]-<span class="hljs-string">&#x27;z&#x27;</span>;<br>                <span class="hljs-keyword">else</span> c[i][j]+=a[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">3</span>;j&gt;=<span class="hljs-number">0</span>;j--)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,c[i][j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="l-建立火车站"><a class="markdownIt-Anchor" href="#l-建立火车站"></a> L 建立火车站</h1><p>二分，对于长度，端点值及其右侧均为可行解，故向左取整。</p><p>注：存在 k = 0 的测试组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a[<span class="hljs-number">100005</span>];<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,k,i;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]);<br>    <span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>,a+n+<span class="hljs-number">1</span>);<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> l=<span class="hljs-number">1</span>,r=a[n]-a[<span class="hljs-number">1</span>]+<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> cou=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;=n; i++)<br>        &#123;<br>            <span class="hljs-comment">//if(a[i]-a[i-1]&gt;=mid)</span><br>            &#123;<br>                cou+=(a[i]-a[i<span class="hljs-number">-1</span>]<span class="hljs-number">-1</span>)/mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cou&lt;=k)r=mid;<br>        <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h1><p>做到最后莫划水，打表有惊喜。</p><p>打表天下第一！</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>加分二叉树-DP</title>
    <link href="/2021.01-06/%E5%8A%A0%E5%88%86%E4%BA%8C%E5%8F%89%E6%A0%91-DP/"/>
    <url>/2021.01-06/%E5%8A%A0%E5%88%86%E4%BA%8C%E5%8F%89%E6%A0%91-DP/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="https://www.acwing.com/problem/content/description/481/">Acwing 479-加分二叉树</a>&amp;<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=353">NEFU OJ-353 加分二叉树</a><br />NEFU OJ题源为多组输入，代码为此oj ac代码</p><blockquote><p>题目描述</p><blockquote><p>设一个n个节点的二叉树tree的中序遍历为（1,2,3,…,n），其中数字1,2,3,…,n为节点编号。<br />每个节点都有一个分数（均为正整数），记第i个节点的分数为di，tree及它的每个子树都有一个加分，任一棵子树subtree（也包含tree本身）的加分计算方法如下：     <br />subtree的左子树的加分 × subtree的右子树的加分 ＋ subtree的根的分数 <br />若某个子树为空，规定其加分为1。叶子的加分就是叶节点本身的分数，不考虑它的空子树。<br />试求一棵符合中序遍历为（1,2,3,…,n）且加分最高的二叉树tree。<br />要求输出： <br />（1）tree的最高加分 <br />（2）tree的前序遍历</p></blockquote></blockquote><blockquote><p>输入描述</p><blockquote><p>第1行：一个整数n，为节点个数（n&lt;30） 。<br />第2行：n个用空格隔开的整数，为每个节点的分数（0&lt;分数&lt;100）。</p></blockquote></blockquote><blockquote><p>输出描述</p><blockquote><p>第1行：一个整数，为最高加分（结果不会超过int范围）。     <br />第2行：n个用空格隔开的整数，为该树的前序遍历。如果存在多种方案，则输出字典序最小的方案。</p></blockquote></blockquote><blockquote><p>输入样例</p><blockquote><p>5<br />5 7 1 2 10</p></blockquote></blockquote><blockquote><p>输出样例</p><blockquote><p>145<br />3 1 2 4 5</p></blockquote></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>y总yyds</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>首先明确分数计算方式，对于一般的树而言，分数=左树*右树+根分数<br />如果左树或右树为空，且不均为空，则空树分数视为1；<br />若左右数均空，则空树分数均视为0，此时分数则仅为根分数。</p><p>这道题采用从叶子向根的DP过程，建立 d[ i ][ j ] 表示 [ i , j ] 区间内所有元素构成分数最大的数的分数值。限定该区间的长度，在 [ 1 , n ] 区间从短到长进行DP。</p><p>具体的DP过程：<br />在区间长度为len，左端点 i ，右端点 j = i + len - 1 时，以 k 为区间树的根，d[ i ] [ j ] = max( d[ i ][ k - 1 ] * d[ k + 1 ][ j ] + a[ k ] )。</p><p>接下来进行特判：<br />如果len==1，即 i == j 时，左右子树均为空，d[ i ][ j ] = a[ i ]；<br />如果 k == i，即仅左子树为空，左子树分值为 1；<br />如果 k == j，仅右子树为空同理。</p><p>接下来处理输出要求：<br />因为要求是前序遍历，故遍历 k 时从左到右即可满足条件，即所有可行解中最小 k。并记录区间树的根节点，输出时按根节点分为两树分别递归即可。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">30</span>],f[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>],d[<span class="hljs-number">30</span>][<span class="hljs-number">30</span>]= &#123;<span class="hljs-number">0</span>&#125;,n,i,j,k,len;<br><span class="hljs-comment">//a存储节点分数，f存储[i,j]区间树最大分数值，d存储[i,j]区间树最大分数值时的序号最小根（输出用）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span><span class="hljs-comment">//递归输出</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt; r) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//结束条件不是i==j</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %d&quot;</span>,f[l][r]);<br>    <span class="hljs-built_in">dfs</span>(l, f[l][r] - <span class="hljs-number">1</span>), <span class="hljs-built_in">dfs</span>(f[l][r] + <span class="hljs-number">1</span>, r);<span class="hljs-comment">//以区间树的根节点为界分成两个区间</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(cin&gt;&gt;n)<br>    &#123;<br>        <span class="hljs-built_in">memset</span>(d,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span> d);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        <span class="hljs-keyword">for</span>(len=<span class="hljs-number">1</span>; len&lt;=n; len++)<span class="hljs-comment">//遍历合法区间长</span><br>            <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n-len+<span class="hljs-number">1</span>; i++)<span class="hljs-comment">//遍历合法左端点</span><br>            &#123;<br>                j=i+len<span class="hljs-number">-1</span>;<span class="hljs-comment">//计算对应区间长和左端点的右端点</span><br>                <span class="hljs-keyword">if</span>(len==<span class="hljs-number">1</span>)f[i][j]=i,d[i][j]=a[i];<span class="hljs-comment">//特判叶子</span><br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">for</span>(k=i; k&lt;=j; k++)<span class="hljs-comment">//遍历合法根</span><br>                    &#123;<br>                        <span class="hljs-type">int</span> lef=(k==i)?<span class="hljs-number">1</span>:d[i][k<span class="hljs-number">-1</span>];<span class="hljs-comment">//定义左子树分数</span><br>                        <span class="hljs-type">int</span> rig=(k==j)?<span class="hljs-number">1</span>:d[k+<span class="hljs-number">1</span>][j];<span class="hljs-comment">//定义右子树分数</span><br>                        <span class="hljs-type">int</span> ans=a[k]+lef*rig;<span class="hljs-comment">//计算以k为根的区间树分数</span><br>                        <span class="hljs-keyword">if</span>(ans&gt;d[i][j])d[i][j]=ans,f[i][j]=k;<span class="hljs-comment">//与历史值比较（如果是&gt;=，就不是字典序最小答案了）</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,d[<span class="hljs-number">1</span>][n]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,f[<span class="hljs-number">1</span>][n]);<span class="hljs-comment">//此行及下行如果不担心PE的话可以直接用dfs(1,n)代替</span><br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,f[<span class="hljs-number">1</span>][n] - <span class="hljs-number">1</span>),<span class="hljs-built_in">dfs</span>(f[<span class="hljs-number">1</span>][n] + <span class="hljs-number">1</span>, n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 硬币购物 一题的思路+难点分析+代码 （DP + 容斥）</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%A1%AC%E5%B8%81%E8%B4%AD%E7%89%A9%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E9%9A%BE%E7%82%B9%E5%88%86%E6%9E%90+%E4%BB%A3%E7%A0%81%20%EF%BC%88DP%20+%20%E5%AE%B9%E6%96%A5%EF%BC%89/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%A1%AC%E5%B8%81%E8%B4%AD%E7%89%A9%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E9%9A%BE%E7%82%B9%E5%88%86%E6%9E%90+%E4%BB%A3%E7%A0%81%20%EF%BC%88DP%20+%20%E5%AE%B9%E6%96%A5%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目来源：/*这个题好经典的，哪里都有*/ <a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=1793">NEFU OJ-1793 硬币购物-容斥</a></p><blockquote><blockquote><p>题目描述</p></blockquote><p>硬币购物一共有4种硬币。面值分别为c1,c2,c3,c4。某人去商店买东西，去了tot次。每次带di枚ci硬币，买si的价值的东西。请问每次有多少种付款方法。</p><blockquote><p>输入描述</p></blockquote><p>第一行 c1,c2,c3,c4,tot 下面tot行 d1,d2,d3,d4,s</p><blockquote><p>输出描述</p></blockquote><p>每次的方法数</p><blockquote><p>输入样例</p></blockquote><p>1 2 5 10 2<br />3 2 3 1 10<br />1000 2 2 2 900</p><blockquote><p>输出样例</p></blockquote><p>4<br />27</p><blockquote><p>提示</p></blockquote><p>数据规模<br />di,s&lt;=100000<br />tot&lt;=1000</p></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>这道题我也是研读了好多位其他博主的文章而通过的，感谢各位前辈。</p><p>直接来说，我认为这道题对我的难点有二：<strong>容斥的构造</strong>和<strong>对dp过程数据的处理</strong></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>首先排除DFS，这个数据量一定TLE。</p><p>这道题中，相同面值硬币的不同枚之间是完全相同的，所以就无法对所有<strong>枚</strong>硬币进行背包。</p><p>我们只好先不关注四种硬币的数量限制，进行dp，之后再用容斥处理不合法的组合。</p><h2 id="难点分析"><a class="markdownIt-Anchor" href="#难点分析"></a> 难点分析</h2><h4 id="容斥的构建"><a class="markdownIt-Anchor" href="#容斥的构建"></a> 容斥的构建</h4><p>如果不了解容斥，可以向下看</p><p>对于不合法的种类，我们可以<strong>有交集地</strong>分为四类：第一种硬币数量不合法、第二种硬币不合法、第三种…、第四种…。（这样方便用代码实现）<br />这四类之间相互有交集，我们如果想计算不合法的总种类数，就需要妥善处理交集。</p><p>以三种硬币为例：（四种同理，三种表示起来更直观）<br /><img src="https://s2.loli.net/2022/08/02/qyhSkpe9YbTjK6D.png" alt="在这里插入图片描述" /><br />我们暂时称左上圆（A,D,G,E）为O1，右上圆（C,D,G,F）为O2，下圆为O3。<br />如果我们要求这个最大封闭图形的面积，可以通过O1+O2+O3-(O1∩O2)-(O1∩O3)-(O2∩O3)+(O1∩O2∩O3)来实现<br />数学上更广泛来说就是<br /><img src="https://s2.loli.net/2022/08/02/2TMrGCjHoytOJg8.png" alt="在这里插入图片描述" /><br /><em>（图源百度）（如果还是不太理解可以移步<a href="https://blog.csdn.net/qq_40564464/article/details/81779439">这里</a>）</em></p><h4 id="对dp过程数据的处理"><a class="markdownIt-Anchor" href="#对dp过程数据的处理"></a> 对dp过程数据的处理</h4><p>所以此时，我们此题的答案即为 无限制的种类数 - 存在1种硬币非法的种类数（4项）  + 存在2种硬币非法的种类数（6项） - 存在3种硬币非法的种类数（4项） + 4种硬币均非法的种类数（1项）。</p><p>接下来我们要找出不同情况的种类数。</p><p>目标金额 s 时，对于第 i 枚硬币，面值为 c[ i ]，数量为 d[ i ]，如果存在 s &gt;= ( d[ i ] + 1 ) * c[ i ]，则一定该种硬币存在非法情况。同理，对于第 i , j 枚硬币，如果存在 s &gt;=  ( d[ i ] + 1 ) * c[ i ] + ( d[ j ] + 1 ) * c[ j ]，则这两种硬币一定同时存在非法情况。</p><p>那么对于具体的非法种类数即为：f[ s - ( d[ i ] + 1 ) * c[ i ] ]，因为 f[ s ] 是建立于 f[ s - ( d[ i ] + 1 ) * c[ i ] ] 之上的，所以说作差之后，便可认为成 从 s - ( d[ i ] + 1 ) * c[ i ] + 1 到 s 的所有方法数，此时，<strong>每一种情况的第 i 种硬币枚数必不超过 d[ i ]</strong> 。</p><p>也就是说， f[ s - ( d[ i ] + 1 ) * c[ i ] ] 中的每一种情况延伸到 f[ s ] 时，必有一种分支情况存在，满足第 i 种硬币的数量为 d[ i ] + 1（<strong>存在性</strong>），同时，绝对没有任一种情况满足第 i 种硬币的数量大于 d[ i ] + 1（因为那样总金额必然大于 s ）（<strong>唯一性</strong>），在 f[ s - ( d[ i ] + 1 ) * c[ i ] ]  中的每种情况的非法延申存在且唯一，所以删去的便是全部的非法情况。</p><p>同理，多个硬币同时非法时，f[ s - ( d[ i ] + 1 ) * c[ i ] - ( d[ j ] + 1 ) * c[ j ] ] 即可。</p><h4 id="附"><a class="markdownIt-Anchor" href="#附"></a> 附</h4><p>最后附一张第一样例的二维dp表，方便大家验算<br /><img src="https://s2.loli.net/2022/08/02/ZlP6zbKvkJtuYd1.png" alt="在这里插入图片描述" /></p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> c[<span class="hljs-number">4</span>],d[<span class="hljs-number">4</span>],s,t,i,j,k;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> f[<span class="hljs-number">100005</span>]=&#123;<span class="hljs-number">1</span>&#125;,ans;<span class="hljs-comment">//需要LL</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;c[i]);<span class="hljs-comment">//接收</span><br>        <span class="hljs-keyword">for</span>(j=c[i];j&lt;=<span class="hljs-number">100000</span>;j++)f[j]+=f[j-c[i]];<span class="hljs-comment">//f 预处理</span><br>    &#125;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;d[i]);<br>        cin&gt;&gt;s;<br>        ans=f[s];<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<span class="hljs-comment">//一种不合法</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(s&gt;=(d[i]+<span class="hljs-number">1</span>)*c[i])<br>            ans-=f[s-(d[i]+<span class="hljs-number">1</span>)*c[i]];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<span class="hljs-comment">//两种不合法</span><br>        <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">4</span>;j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s&gt;=(d[i]+<span class="hljs-number">1</span>)*c[i]+(d[j]+<span class="hljs-number">1</span>)*c[j])<br>            ans+=f[s-((d[i]+<span class="hljs-number">1</span>)*c[i]+(d[j]+<span class="hljs-number">1</span>)*c[j])];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)<span class="hljs-comment">//三种不合法</span><br>        <span class="hljs-keyword">for</span>(j=i+<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">4</span>;j++)<br>        <span class="hljs-keyword">for</span>(k=j+<span class="hljs-number">1</span>;k&lt;<span class="hljs-number">4</span>;k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s&gt;=(d[i]+<span class="hljs-number">1</span>)*c[i]+(d[j]+<span class="hljs-number">1</span>)*c[j]+(d[k]+<span class="hljs-number">1</span>)*c[k])<br>            ans-=f[s-((d[i]+<span class="hljs-number">1</span>)*c[i]+(d[j]+<span class="hljs-number">1</span>)*c[j]+(d[k]+<span class="hljs-number">1</span>)*c[k])];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s&gt;=(d[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)*c[<span class="hljs-number">0</span>]+(d[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)*c[<span class="hljs-number">1</span>]+(d[<span class="hljs-number">2</span>]+<span class="hljs-number">1</span>)*c[<span class="hljs-number">2</span>]+(d[<span class="hljs-number">3</span>]+<span class="hljs-number">1</span>)*c[<span class="hljs-number">3</span>])<span class="hljs-comment">//四种不合法</span><br>        ans+=f[s-((d[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)*c[<span class="hljs-number">0</span>]+(d[<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)*c[<span class="hljs-number">1</span>]+(d[<span class="hljs-number">2</span>]+<span class="hljs-number">1</span>)*c[<span class="hljs-number">2</span>]+(d[<span class="hljs-number">3</span>]+<span class="hljs-number">1</span>)*c[<span class="hljs-number">3</span>])];<br>        cout&lt;&lt;ans&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>感觉证明非法延申存在且唯一的部分可能会比较难懂，但是个人认为很重要，题解第一稿中直接略过了证明，感觉很不妥便加回来了，如有疏漏或逻辑问题，烦请提醒。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 阿华分硬币 一题的思路+注意点+代码（数组分成差最小的两部分）</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E9%98%BF%E5%8D%8E%E5%88%86%E7%A1%AC%E5%B8%81%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E6%B3%A8%E6%84%8F%E7%82%B9+%E4%BB%A3%E7%A0%81%EF%BC%88%E6%95%B0%E7%BB%84%E5%88%86%E6%88%90%E5%B7%AE%E6%9C%80%E5%B0%8F%E7%9A%84%E4%B8%A4%E9%83%A8%E5%88%86%EF%BC%89/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E9%98%BF%E5%8D%8E%E5%88%86%E7%A1%AC%E5%B8%81%20%E4%B8%80%E9%A2%98%E7%9A%84%E6%80%9D%E8%B7%AF+%E6%B3%A8%E6%84%8F%E7%82%B9+%E4%BB%A3%E7%A0%81%EF%BC%88%E6%95%B0%E7%BB%84%E5%88%86%E6%88%90%E5%B7%AE%E6%9C%80%E5%B0%8F%E7%9A%84%E4%B8%A4%E9%83%A8%E5%88%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=1367">NEFU OJ-1367 阿华分硬币</a><br /><img src="https://s2.loli.net/2022/08/02/NlB9GFU74gRZHpD.png" alt="在这里插入图片描述" /></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>DP</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>首先这个数据量，穷举遍历是行不通的，所以计划用dp，类似于0-1背包问题</p><p>对于这个题我们可以如下构造：b[i][j]为在有前 i 枚硬币时，选出不超过 j 的最大金额值。(不需要担心大于or小于总金额一半到问题，因为若能组成大于总金额一半且差值最小的组合，则另一半即为小于总金额一半且差值最小的组合)</p><p><em>接下来的a[i]代表第i枚硬币的面值</em></p><p>那么状态转换就是 b[i][j] = max ( b[i-1][j] , b[i-1][j-a[i]] + a[i] )<br />语言表述就是 有前i每硬币时，选出不超过j的最大总额是 <strong>在没有第i枚硬币时，不超过j的总额最大值</strong> 与 <strong>在没有第i枚硬币时，不超过j-a[i]的总额最大值加上a[i]</strong> 的最大值。</p><p>到此时，这道题理论上（我没试）就可以AC了。</p><h2 id="向一维化简及注意事项"><a class="markdownIt-Anchor" href="#向一维化简及注意事项"></a> 向一维化简及注意事项</h2><p>这道题与<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=971">NEFU OJ-971 硬币数目</a>（<a href="https://blog.csdn.net/Tan_Yuu/article/details/113064413">之前的文章</a>）&amp;<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=1717">NEFU OJ-1717 货币系统</a>不同的是，这道题的每一枚硬币都只能用一次。<br />换句话说，对于一维的状态转换方程————b[j] = max ( b[j] , b[j-a[i]] + a[i] )，b[j-a[i]]这一项必须是维护前的。为解决这个问题，不同于前提两题，j我打算从后向前维护，这样就不会出现同一枚硬币被计算多次的情况。</p><p>以样例二为例，如果从前向后维护，则会出现如下情况：</p><table><thead><tr><th>a[i]\b[j]</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>2</td><td>0</td><td>0</td><td>2</td><td>2</td><td>4</td></tr><tr><td><strong>……</strong></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>此时，b[1][4]=4 , 即用了两次二面值硬币，显然是有违题意的。<br />从后向前则为</p><table><thead><tr><th>a[i]\b[j]</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>2</td><td>0</td><td>0</td><td>2</td><td>2</td><td>2</td></tr><tr><td>1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>3</td></tr><tr><td>5</td><td>0</td><td>1</td><td>2</td><td>3</td><td>3</td></tr></tbody></table><p>5本身就已经大于(最大值 / 2 )了，所以不需要处理，落下来即可。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t,i,j;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n,a[<span class="hljs-number">1003</span>],l,r,del,sum=<span class="hljs-number">0</span>,b[<span class="hljs-number">50004</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);sum+=a[i];&#125;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(j=sum/<span class="hljs-number">2</span>;j&gt;=a[i];j--)<span class="hljs-comment">//从sum/2开始就够，不需要关心上下取整</span><br>            &#123;<br>                b[j]=<span class="hljs-built_in">max</span>(b[j],b[j-a[i]]+a[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,(<span class="hljs-type">int</span>)(<span class="hljs-number">2</span>*(sum/<span class="hljs-number">2.0</span>-b[sum/<span class="hljs-number">2</span>])));<span class="hljs-comment">//注意保留浮点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>\</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 硬币数目 的思路+代码</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%A1%AC%E5%B8%81%E6%95%B0%E7%9B%AE%20%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%A1%AC%E5%B8%81%E6%95%B0%E7%9B%AE%20%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=971">NEFU OJ-971 硬币数目</a><br /><img src="https://s2.loli.net/2022/08/02/G2J6aDkMOc3eNXU.png" alt="在这里插入图片描述" /></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>DP<br />感谢<a href="https://blog.csdn.net/qq_39354847">sl大佬</a>的讲解</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>面对这个数据量，dfs肯定会爆TLE，所以打算用DP。</p><p>对于一般情况，状态转移也不复杂：<br />在求最小硬币数时，对于第 i 枚硬币，面值为 v [ i ] ，金额为 j 时，f [ i , j ]=min( f [ i - 1 , j ] , f [ i , j - v [ i ] + 1 )<br />最大硬币数则为 f [ i , j ]=max( f [ i - 1 , j ] , f [ i , j - v [ i ] + 1 )<br />通俗来说，求最小硬币数，在如上情况下，就是求<strong>没有此枚硬币时金额 j 的最小硬币数</strong> 与 <strong>用一枚此硬币的情况——在金额 j - v [ i ] 时，再用一枚此硬币</strong>这两种情况的硬币数最小值。最大值同理。</p><p>但是对于起始情况要特殊处理：<br />在求最小值时，将待处理数组的除0外每一位赋为一个足够大值，第0位赋为0。<br />最大值时赋为一个足够小值。</p><p>特殊处理后，如果在dp完成后，金额 j 无法被组成，则金额 j 保留为极值。（经测试，oj中无非法数据，即每个总金额值必定可以由硬币搭配出）</p><p>为方便理解，附手推过程：<br />输入数据：<br />3 7<br />2 4 3<br />以求最小值为例</p><table><thead><tr><th>i \ j</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>+∞</td><td>+∞</td><td>+∞</td><td>+∞</td><td>+∞</td><td>+∞</td><td>+∞</td></tr><tr><td>1</td><td>0</td><td>+∞</td><td>1</td><td>+∞</td><td>2</td><td>+∞</td><td>2</td><td>+∞</td></tr><tr><td>2</td><td>0</td><td>+∞</td><td>1</td><td>+∞</td><td>1</td><td>+∞</td><td>2</td><td>+∞</td></tr><tr><td>3</td><td>0</td><td>+∞</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td><td>2</td></tr></tbody></table><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">int</span> n,s;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e4</span>+<span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> w[N],dp[N];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;s)!=EOF)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;w[i]);<br><span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0x3f</span>,<span class="hljs-keyword">sizeof</span> dp);<span class="hljs-comment">//足够大值</span><br>dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=w[i];j&lt;=s;j++)<br>&#123;<br>dp[j]=min(dp[j],dp[j-w[i]]+<span class="hljs-number">1</span>);<br>&#125; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,dp[s]);<br><span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0xcf</span>,<span class="hljs-keyword">sizeof</span> dp);<span class="hljs-comment">//足够小值</span><br>dp[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=w[i];j&lt;=s;j++)<br>&#123;<br>dp[j]=max(dp[j],dp[j-w[i]]+<span class="hljs-number">1</span>);<br>&#125; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,dp[s]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>dp的初值选取一定要妥当~<br />相似题：<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=1717">NEFU OJ-1717 货币系统</a></p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>DP与贪心</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>黑龙江农垦科技职业学院喜迎寒假多校联赛2 全题解</title>
    <link href="/2021.01-06/%E9%BB%91%E9%BE%99%E6%B1%9F%E5%86%9C%E5%9E%A6%E7%A7%91%E6%8A%80%E8%81%8C%E4%B8%9A%E5%AD%A6%E9%99%A2%E5%96%9C%E8%BF%8E%E5%AF%92%E5%81%87%E5%A4%9A%E6%A0%A1%E8%81%94%E8%B5%9B2%20%E5%85%A8%E9%A2%98%E8%A7%A3/"/>
    <url>/2021.01-06/%E9%BB%91%E9%BE%99%E6%B1%9F%E5%86%9C%E5%9E%A6%E7%A7%91%E6%8A%80%E8%81%8C%E4%B8%9A%E5%AD%A6%E9%99%A2%E5%96%9C%E8%BF%8E%E5%AF%92%E5%81%87%E5%A4%9A%E6%A0%A1%E8%81%94%E8%B5%9B2%20%E5%85%A8%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>比赛链接：<a href="https://ac.nowcoder.com/acm/contest/11471#question">这里</a><br /></p><h1 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h1><p>比赛原标题：黑龙江农垦科技职业学院喜迎寒假多校联赛2（快乐ak场）<br />//实际上并不快乐</p><h1 id="a-数组截取"><a class="markdownIt-Anchor" href="#a-数组截取"></a> A 数组截取</h1><p>按字符读入之后转换为数字，比scanf快，学到了~<br />然后用滑窗来做//大概</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a[<span class="hljs-number">20000007</span>],k;<br><span class="hljs-type">int</span> n;<br><span class="hljs-keyword">inline</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> ch = getchar();<br>    <span class="hljs-keyword">for</span>( ; ch &gt; <span class="hljs-string">&#x27;9&#x27;</span> || ch &lt; <span class="hljs-string">&#x27;0&#x27;</span> ; ch = getchar());<br>    <span class="hljs-keyword">for</span>( ; ch &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="hljs-string">&#x27;9&#x27;</span> ; ch = getchar()) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (ch &amp; <span class="hljs-number">15</span>);<br>    <span class="hljs-comment">/*      x10             %16    */</span><span class="hljs-comment">//因为&#x27;0&#x27;是48</span><br>     <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    n = read() , k = read();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i &lt;= n ; i ++) a[i] = read();<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> i,sum=<span class="hljs-number">0</span>,m=<span class="hljs-number">0</span>,l=<span class="hljs-number">1</span>;<br>    i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]&gt;k)<br>        &#123;<br>            sum=<span class="hljs-number">0</span>;<br>            l=i+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            sum+=a[i];<br>            <span class="hljs-keyword">if</span>(sum&gt;k)<br>            &#123;<br>                sum-=a[l];<br>                l++;<br>                <span class="hljs-keyword">while</span>(sum&gt;k&amp;&amp;i-l+<span class="hljs-number">1</span>&gt;=m)<br>                &#123;<br>                    sum-=a[l];<br>                    l++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(sum==k)<br>            &#123;<br>                m=max(i-l+<span class="hljs-number">1</span>,m);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(m)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,m);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="b-群友们在排列数字"><a class="markdownIt-Anchor" href="#b-群友们在排列数字"></a> B 群友们在排列数字</h1><p>深搜吧，每一层对应0~n-1的每个数，记得恢复现场。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> a[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">0</span>&#125;,n,k,sum,ten=<span class="hljs-number">1</span>,cou=<span class="hljs-number">0</span>,<span class="hljs-comment">//a[i]表示第i位是否被占</span><br>b[<span class="hljs-number">11</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">10000</span>,<span class="hljs-number">100000</span>,<span class="hljs-number">1000000</span>,<span class="hljs-number">10000000</span>,<span class="hljs-number">100000000</span>,<span class="hljs-number">1000000000</span>&#125;;<br><span class="hljs-comment">//防止pow超时</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(num==n)<span class="hljs-comment">//收束</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(sum%k==<span class="hljs-number">0</span>)cou++;<br>        <span class="hljs-comment">//printf(&quot;*%d\n&quot;,sum);</span><br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-number">0</span>)<br>            &#123;<br>                a[i]=<span class="hljs-number">1</span>;<br>                sum+=b[i]*num;<br>                dfs(num+<span class="hljs-number">1</span>);<br>                sum-=b[i]*num;<span class="hljs-comment">//恢复现场</span><br>                a[i]=<span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);<br>    dfs(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(cou)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,cou);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="c-gg查成绩"><a class="markdownIt-Anchor" href="#c-gg查成绩"></a> C gg查成绩</h1><p>区间和~<br />第 k 位存下1~ k 的和，求[ i , j ]时输出 a[ j ] - a[ i - 1 ]就好了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a[<span class="hljs-number">1000006</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> n,m,i,j;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;a[i]);<br>        a[i]+=a[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;i,&amp;j);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,a[j]-a[i<span class="hljs-number">-1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="d-issue与lifehappy给学生分组"><a class="markdownIt-Anchor" href="#d-issue与lifehappy给学生分组"></a> D issue与lifehappy给学生分组</h1><p>中心是二分<br />类似题可以参考：<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=1211">NEFU OJ-1211 卖古董</a>和<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=1708">NEFU OJ-1708 书的复制</a></p><p>注意二分的临界和取整！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> a[<span class="hljs-number">1000006</span>];<br>    <span class="hljs-type">int</span> n,m;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> l=<span class="hljs-number">1e11</span>,r=<span class="hljs-number">1e19</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-comment">//printf(&quot;%d\n&quot;,n);</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%llu&quot;</span>,&amp;a[i]);<br>        <span class="hljs-keyword">if</span>(a[i]&lt;l)l=a[i];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(l&lt;r)<br>    &#123;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> team=<span class="hljs-number">1</span>,num=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(num+a[i]&lt;=mid)<br>                num+=a[i];<br>            <span class="hljs-keyword">else</span> team++,num=a[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(team&lt;=m)r=mid;<br>        <span class="hljs-keyword">else</span> l=mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//printf(&quot;%u %u\n&quot;,mid,team);</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu&quot;</span>,l);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="e-删删删越小越好"><a class="markdownIt-Anchor" href="#e-删删删越小越好"></a> E 删删删越小越好</h1><p>因为总位数是固定的，已知删去位数即已知剩余位数，在原数中有序找到剩余位数个 数，并使最小就好了。使其最小就是对于每一位，在可以寻找的区间内找到最小数。<br />注意寻找区间的范围</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">char</span> a[<span class="hljs-number">20000007</span>];<br>    <span class="hljs-type">int</span> n,i,j,pok=<span class="hljs-number">0</span>;<br>    i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(~<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>,&amp;a[i])&amp;&amp;a[i++]!=<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    a[i<span class="hljs-number">-1</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-type">int</span> m=<span class="hljs-built_in">strlen</span>(a);<br>    n=m-n;<br>    <span class="hljs-comment">//printf(&quot;%d&quot;,n);</span><br>    <span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-type">char</span> ma=<span class="hljs-string">&#x27;9&#x27;</span>+<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> mark=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;l+n&lt;=m<span class="hljs-number">-1</span>&amp;&amp;ma!=<span class="hljs-string">&#x27;0&#x27;</span>;l++)<span class="hljs-comment">//如果找到0，就不需要再找了，没有比0更小的了&amp;l+n&lt;=m-1即为可寻找区间</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[l]&lt;ma)ma=a[l],mark=l;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a[mark]!=<span class="hljs-string">&#x27;0&#x27;</span>)pok=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(pok)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,ma);<br>        l=mark+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!pok)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="f-happy的异或运算"><a class="markdownIt-Anchor" href="#f-happy的异或运算"></a> F happy的异或运算</h1><p>异或可以看成在二进制下进行的不进位加法。<br />若区间右端点为n，则必存在一m满足在有效位数上（不含前导零）m==~n（即按位取反）且m&lt;n。因为n的最高有效位必为1，m的此位即为0，故m&lt;n。<br />两数异或运算后即为111…11。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> g;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;g);<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(g)<span class="hljs-comment">//注</span><br>    &#123;<br>        g&gt;&gt;=<span class="hljs-number">1</span>;<br>        i++;<br>    &#125;<br>    i--;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;(<span class="hljs-type">long</span> <span class="hljs-type">long</span>)<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,i)<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：这里用for(two=1;two&lt;g;two*=2);会超时</p><h1 id="g-alan"><a class="markdownIt-Anchor" href="#g-alan"></a> G Alan%%%</h1><p>字符串处理，闹心~</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n,i,f,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//char a[1003];</span><br>    <span class="hljs-built_in">string</span> a;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;n;<br>    getchar();<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br> <br>        getline(<span class="hljs-built_in">cin</span>,a);<br>        <span class="hljs-type">int</span> cou=<span class="hljs-number">0</span>,cou1=<span class="hljs-number">0</span>;<br>        f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;a[i];i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(f==<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;l&#x27;</span>)f++;<br>                <span class="hljs-keyword">else</span> f=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(f==<span class="hljs-number">2</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;a&#x27;</span>)f++;<br>                <span class="hljs-keyword">else</span> f=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(f==<span class="hljs-number">3</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;n&#x27;</span>)cou1=<span class="hljs-number">1</span>,f=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">else</span> f=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;%&#x27;</span>)cou++;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-string">&#x27;A&#x27;</span>)f=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">//printf(&quot;%d %d\n&quot;,cou,cou1);</span><br>        sum+=cou*cou1;<br>    &#125;<br>    <span class="hljs-built_in">cout</span>&lt;&lt;sum;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>%%%</p><h1 id="hi-cg写项目"><a class="markdownIt-Anchor" href="#hi-cg写项目"></a> H&amp;I cg写项目</h1><p>结构体排序，自定义cmp~<br />两题代码一粘就行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class"><span class="hljs-title">dataa</span>&#123;</span><br>    <span class="hljs-type">char</span> n[<span class="hljs-number">25</span>],m[<span class="hljs-number">25</span>],x[<span class="hljs-number">25</span>],h[<span class="hljs-number">25</span>];<br>    <span class="hljs-type">int</span> num;<br>&#125;use[<span class="hljs-number">1000000</span>];<br><span class="hljs-type">bool</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(dataa a,dataa b)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(a.n)==<span class="hljs-built_in">strlen</span>(b.n))<br>    &#123;<br>        <span class="hljs-type">int</span> s=<span class="hljs-built_in">strcmp</span>(a.n,b.n);<br>        <span class="hljs-keyword">if</span>(!s)<br>        &#123;<br>            <span class="hljs-keyword">return</span> a.num&lt;b.num;<span class="hljs-comment">//注</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s&gt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">strlen</span>(a.n)&lt;<span class="hljs-built_in">strlen</span>(b.n);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        use[i].num=i;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,use[i].n);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,use[i].m);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,use[i].x);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,use[i].h);<br>    &#125;sort(use+<span class="hljs-number">1</span>,use+n+<span class="hljs-number">1</span>,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,use[i].n);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,use[i].m);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,use[i].x);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,use[i].h);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：这里写a&lt;b会报错，因为a,b是类似于迭代器。<br />//我怎么会这么想…</p><h1 id="j-比赛开始了清楚姐姐喊了一句签到了签到了"><a class="markdownIt-Anchor" href="#j-比赛开始了清楚姐姐喊了一句签到了签到了"></a> J 比赛开始了清楚姐姐喊了一句:签到了签到了</h1><p>签到了签到了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n,m=<span class="hljs-number">100000</span>,i,j,mark;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;j);<br>        <span class="hljs-keyword">if</span>(j&lt;m)&#123;m=j;mark=i;&#125;<br>    &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,mark);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h1><p>还是…蛮快乐的……</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>比赛与题集</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于 相似的数集 的思路+时间复杂度分析+代码</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%9B%B8%E4%BC%BC%E7%9A%84%E6%95%B0%E9%9B%86%20%E7%9A%84%E6%80%9D%E8%B7%AF+%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90+%E4%BB%A3%E7%A0%81/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%9B%B8%E4%BC%BC%E7%9A%84%E6%95%B0%E9%9B%86%20%E7%9A%84%E6%80%9D%E8%B7%AF+%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90+%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>最优解法可以直接参考这位学长的<a href="https://blog.csdn.net/csg999/article/details/104381074">文章</a></p></blockquote></blockquote><p>题目来源：<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=2119">NEFU OJ-2119 相似的数集简单版</a><br />以及<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=2118">NEFU OJ-??? 相似的数集高级版</a><br />后者链接已补。</p><p>主要区别在高级版数据范围和数据量均大于前者，接下来将以高级版为主。</p><blockquote><blockquote><p>题目描述</p></blockquote><p>给出两个数集，它们的相似程度定义为Nc/Nt*100%。其中，Nc表示两个数集中相等的、两两互不相同的元素个数，而Nt表示两个数集中总共的互不相同的元素个数。请计算任意两个给出数集的相似程度。</p><blockquote><p>输入描述</p></blockquote><p>输入第一行给出一个正整数N（N&lt;=50），是集合的个数。随后N行，每行对应一个集合。每个集合首先给出一个正整数M（M&lt;=10<sup>4</sup>），是集合中元素的个数；然后跟M个[0, 10<sup>9</sup>]区间内的整数。<br />之后一行给出一个正整数K（K&lt;=2000），随后K行，每行对应一对需要计算相似度的集合的编号（集合从1到N编号）。数字间以空格分隔。<br />第二行给出N个数字，第i个数字表示第i道题通过的人数a<sub>i</sub> (0≤a<sub>i</sub>≤M)。</p><blockquote><p>输出描述</p></blockquote><p>输出共K行，每行一个保留2位小数的实数，表示给定两个集合的相似度值。</p><blockquote><p>输入样例</p></blockquote><p>3<br />3 99 87 101<br />4 87 101 5 87<br />7 99 101 18 5 135 18 99<br />2<br />1 2<br />1 3</p><blockquote><p>输出样例</p></blockquote><p>50.00%<br />33.33%</p></blockquote><h1 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h1><p>本题大体思路不复杂，主要在如何降低时间复杂度上。</p><h1 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h1><p>就题干来说，Nc为被询问的两个集合中重复元素的对数，Nt为两个集合中有多少个不同的数。<br />用数学语言来说，Nc为被询问的两个集合的交集元素个数，Nt为并集元素个数。</p><p>所以我们的目标很明确：1.去重；2.交集计数，经测试，oj的测试组中含有重复询问组，所以还有 3.记忆化。<br />对于去重，我们可以用set / 数组+unique / 桶排。</p><p>对于计数，我们可以双指针计重 / 求交集函数 / map模拟桶排查找键值</p><h3 id="去重"><a class="markdownIt-Anchor" href="#去重"></a> 去重</h3><h5 id="set"><a class="markdownIt-Anchor" href="#set"></a> set</h5><p>set性质，<a href="https://blog.csdn.net/sevenjoin/article/details/81908754">不多说</a>;</p><h5 id="数组unique"><a class="markdownIt-Anchor" href="#数组unique"></a> 数组+unique</h5><p>数组接收后，sort排序，再用<a href="https://blog.csdn.net/weixin_42488861/article/details/99402591">unique函数</a>完全去重;</p><h5 id="桶排"><a class="markdownIt-Anchor" href="#桶排"></a> 桶排</h5><p>对于10<sup>9</sup>的数量级，开数组是不现实的（简单版范围较小，可以使用），便想用unordered_map模拟桶排（此路后面会被毙）。</p><h3 id="交集计数"><a class="markdownIt-Anchor" href="#交集计数"></a> 交集计数</h3><p><em>下面的时间复杂度都是对于单次询问的，m,n分别为两个数集的长度</em></p><h5 id="plan-a"><a class="markdownIt-Anchor" href="#plan-a"></a> PLAN A</h5><p>来自<a href="https://blog.csdn.net/csg999/article/details/104381074">学长</a>和lpc大佬。<br />时间复杂度O(min(m , n))<br />双指针在排序后的数组中实现交集计数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(sp1&lt;arr[s1<span class="hljs-number">-1</span>][<span class="hljs-number">10000</span>]&amp;&amp;sp2&lt;arr[s2<span class="hljs-number">-1</span>][<span class="hljs-number">10000</span>]) <br>&#123;<span class="hljs-comment">//小的元素指针+1，元素相等same+1</span><br><span class="hljs-keyword">if</span>(arr[s1<span class="hljs-number">-1</span>][sp1]&lt;arr[s2<span class="hljs-number">-1</span>][sp2])sp1++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[s1<span class="hljs-number">-1</span>][sp1]&gt;arr[s2<span class="hljs-number">-1</span>][sp2])sp2++;<br><span class="hljs-keyword">else</span><br>&#123;<br>same++;<br>sp1++;<br>sp2++;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法不加记忆化处理也能在时间限制内横着走。</p><p>注：经ph大佬测试，在set中使用迭代器实现这种方法同样会超时，原因目前认为是容器问题。推测map模拟桶排使用这种方法也会超时。</p><h5 id="plan-b"><a class="markdownIt-Anchor" href="#plan-b"></a> PLAN B</h5><p>来自<a href="https://blog.csdn.net/RealKing_sblog">ph大佬</a><br />时间复杂度O(m+n)<br />使用<a href="https://blog.csdn.net/XiaoTong_zZZ/article/details/106172224">取交集函数</a>（<a href="https://blog.csdn.net/wyg1065395142/article/details/51959499">也可以参考这篇文章</a>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"> set_intersection(l[p].begin(),l[p].end(),<br> l[q].begin(),l[q].end(),<br> inserter(s,s.begin()));<br><span class="hljs-type">int</span> cou = s.size();<br></code></pre></td></tr></table></figure><p>注：使用取交集函数时，可以如下图，方便一些<br /><img src="https://s2.loli.net/2022/08/02/TRh17vIQ3m9EKcf.png" alt="在这里插入图片描述" /><img src="https://s2.loli.net/2022/08/02/GFZ4OdA6XEKP2VD.png" alt="在这里插入图片描述" /><br />注2：这种方法时间限制压的很死，需要搭配记忆化才能避免TLE。</p><h5 id="plan-c"><a class="markdownIt-Anchor" href="#plan-c"></a> PLAN C</h5><p>时间复杂度O(m * log n)<br />通过预处理也只能优化到O( min(m , n) * log( max(m , n)))<br />妥妥TLE，map的.find()函数时间复杂度是O(log n)，unorder_map也救不了。（经测试，2119中，unordered_map/<em>252ms</em>/会比map/<em>472ms</em>/快一倍）（2119中，数组桶排则可以压缩至/<em>43ms</em>/）<br />数据来源：<a href="https://blog.csdn.net/weixin_42333573/article/details/98884961">这里</a>和<a href="https://www.cnblogs.com/shangguanpengfei/p/10483347.html">这里</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//要定义迭代器it</span><br> <span class="hljs-keyword">for</span>(it=s[p].begin(); it!=s[p].end(); it++)<br>            <span class="hljs-keyword">if</span>(s[q].find(it-&gt;first)!=s[q].end())<br>            <span class="hljs-comment">//找到即数集q中含有it-&gt;first</span><br>            &#123;<br>                cou++;<br>            &#125;<br></code></pre></td></tr></table></figure><p>使用这种方法时，如果像下片写代码，会存在引用不存在键值的情况，将出现一些问题，详细描述及解决方法可以参照<a href="https://blog.csdn.net/qq_39354847/article/details/111087774">这篇文章</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(it=s[p].begin();it!=s[p].end();it++)<br>           <span class="hljs-keyword">if</span>(s[q][it-&gt;first])cou++;<br></code></pre></td></tr></table></figure><p>即某些在p数集中存在的键值在q中不存在，但在q中被引用。<br />注：下片的时间复杂度或许小一些？</p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><p>①数组+unique去重，双指针交集计数；/<em>2119-72ms</em>/</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> arr[<span class="hljs-number">50</span>][<span class="hljs-number">10001</span>]; <br><span class="hljs-type">double</span> ans[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>]=&#123;<span class="hljs-number">0</span>&#125;,r; <span class="hljs-comment">//记录查询</span><br><span class="hljs-type">int</span> n,num,s1,s2,same,tmp,sp1,sp2;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i][<span class="hljs-number">10000</span>]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr[i][<span class="hljs-number">10000</span>];j++)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;arr[i][j]);<br>&#125;<br>sort(arr[i],arr[i]+arr[i][<span class="hljs-number">10000</span>]); <br>arr[i][<span class="hljs-number">10000</span>]=unique(arr[i],arr[i]+arr[i][<span class="hljs-number">10000</span>])-arr[i]; <span class="hljs-comment">//去重</span><br>&#125;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">while</span>(n--)<br>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;s1,&amp;s2);<br><span class="hljs-keyword">if</span>(ans[s1<span class="hljs-number">-1</span>][s2<span class="hljs-number">-1</span>]!=<span class="hljs-number">0</span>) <br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f%\n&quot;</span>,ans[s1<span class="hljs-number">-1</span>][s2<span class="hljs-number">-1</span>]);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>same=<span class="hljs-number">0</span>;<br>sp1=sp2=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(sp1&lt;arr[s1<span class="hljs-number">-1</span>][<span class="hljs-number">10000</span>]&amp;&amp;sp2&lt;arr[s2<span class="hljs-number">-1</span>][<span class="hljs-number">10000</span>]) <br>&#123;<br><span class="hljs-comment">//指针</span><br><span class="hljs-keyword">if</span>(arr[s1<span class="hljs-number">-1</span>][sp1]&lt;arr[s2<span class="hljs-number">-1</span>][sp2])sp1++;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[s1<span class="hljs-number">-1</span>][sp1]&gt;arr[s2<span class="hljs-number">-1</span>][sp2])sp2++;<br><span class="hljs-keyword">else</span><br>&#123;<br>same++;<br>sp1++;<br>sp2++;<br>&#125;<br>&#125;<br>r=same*<span class="hljs-number">100.0</span>/(arr[s1<span class="hljs-number">-1</span>][<span class="hljs-number">10000</span>]+arr[s2<span class="hljs-number">-1</span>][<span class="hljs-number">10000</span>]-same); <span class="hljs-comment">//计算</span><br>ans[s1<span class="hljs-number">-1</span>][s2<span class="hljs-number">-1</span>]=ans[s2<span class="hljs-number">-1</span>][s1<span class="hljs-number">-1</span>]=r;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f%\n&quot;</span>,r);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>②数组，取交集函数；/<em>2119-438ms</em>/</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">set</span>&lt;<span class="hljs-type">int</span>&gt; l[<span class="hljs-number">51</span>];<br>    <span class="hljs-type">double</span> ans[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> n,g,i,m,p,q,cou;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g);<br>            l[i].insert(g);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        <span class="hljs-built_in">set</span>&lt;<span class="hljs-type">int</span>&gt;s;<br>        cou=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;p,&amp;q);<br>        <span class="hljs-keyword">if</span>(ans[p<span class="hljs-number">-1</span>][q<span class="hljs-number">-1</span>]&gt;=<span class="hljs-number">0.0001</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf%%\n&quot;</span>, ans[p<span class="hljs-number">-1</span>][q<span class="hljs-number">-1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>        set_intersection(l[p].begin(),l[p].end(),l[q].begin(),l[q].end(),inserter(s,s.begin()));<br>        <span class="hljs-type">int</span> cou = s.size();<br>        ans[p<span class="hljs-number">-1</span>][q<span class="hljs-number">-1</span>]=ans[q<span class="hljs-number">-1</span>][p<span class="hljs-number">-1</span>]=cou*<span class="hljs-number">100.0</span>/(l[p].size()+l[q].size()-cou);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf%%\n&quot;</span>, ans[p<span class="hljs-number">-1</span>][q<span class="hljs-number">-1</span>]);&#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>③被TLE毙掉的：unordered_map模拟桶排，查找键值。/<em>2119-252ms</em>/</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">51</span>]= &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">double</span> ans[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-type">int</span>,<span class="hljs-type">bool</span>&gt; s[<span class="hljs-number">51</span>];<br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-type">int</span>,<span class="hljs-type">bool</span>&gt;::iterator it;<br>    <span class="hljs-type">int</span> n,g,i,m,p,q,cou;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>        a[i]=m;<br>        <span class="hljs-keyword">while</span>(m--)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;g);<br>            <span class="hljs-keyword">if</span>(!s[i][g])s[i][g]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> a[i]--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">while</span>(n--)<br>    &#123;<br>        cou=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;p,&amp;q);<br>        <span class="hljs-keyword">if</span>(ans[p<span class="hljs-number">-1</span>][q<span class="hljs-number">-1</span>]&gt;=<span class="hljs-number">0.0001</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf%%\n&quot;</span>, ans[p<span class="hljs-number">-1</span>][q<span class="hljs-number">-1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(a[p]&gt;a[q])swap(p,q);<br>        <span class="hljs-keyword">for</span>(it=s[p].begin(); it!=s[p].end(); it++)<br>            <span class="hljs-keyword">if</span>(s[q].find(it-&gt;first)!=s[q].end())<br>            &#123;<br>                cou++;<br>            &#125;<br>            ans[p<span class="hljs-number">-1</span>][q<span class="hljs-number">-1</span>]=ans[q<span class="hljs-number">-1</span>][p<span class="hljs-number">-1</span>]=cou*<span class="hljs-number">100.0</span>/(a[p]+a[q]-cou);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf%%\n&quot;</span>, ans[p<span class="hljs-number">-1</span>][q<span class="hljs-number">-1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>②慢于③的可能原因的2119数据量太小<br />①慢于数组桶排的原因可能是①的实际运行时间是2*min(m , n)，桶排的实际运行时间取决于数据范围。</p><h1 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h1><p>这两道题我一共submit 58次！！！<br />AC率不用要了555。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>四点共圆的判定</title>
    <link href="/2021.01-06/%E5%9B%9B%E7%82%B9%E5%85%B1%E5%9C%86%E7%9A%84%E5%88%A4%E5%AE%9A/"/>
    <url>/2021.01-06/%E5%9B%9B%E7%82%B9%E5%85%B1%E5%9C%86%E7%9A%84%E5%88%A4%E5%AE%9A/</url>
    
    <content type="html"><![CDATA[<p>题目来源：<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=2248">NEFU OJ-2248</a>&amp;<br /><a href="https://ac.nowcoder.com/acm/contest/9707">湖南大学2020届ACM新生赛(同步赛) F</a></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>此题不难，只不过推导比较闹心，多推几遍就AC了。</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>判断四点共圆，特殊方法是对角互补，但是由于此题中未强调顺序，判断对角有一定的难度。故采用更通用的方法：</p><p>设四点为A，B，C，D（顺序无关）<br />先任取三点A、B、C<br />当A、B、C 不共线时：</p><p>\首先通过AB、AC的中垂线交点确定距此三点距离相等的点，并假定其为圆心；<br />\再计算半径，并与第四点到假定圆心的距离进行比较，从而判断第四点是否共圆。</p><p>当A、B、C 共线时：</p><p>\显然没有圆满足与一条直线有三个交点，故四点不共圆。<br /><img src="https://s2.loli.net/2022/08/02/XOziP1H9W6R2MQg.png" alt="在这里插入图片描述" /></p><p>具体实现上，可以通过中学的平面几何知识构造中垂线方程，解假定圆心，只不过推导较为繁琐。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">double</span> x[<span class="hljs-number">4</span>],y[<span class="hljs-number">4</span>],xo,yo,down;<br>    <span class="hljs-type">int</span> t,i,j;<br>    <span class="hljs-built_in">cin</span>&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">4</span>; i++)<span class="hljs-built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];<br>        down=(x[<span class="hljs-number">2</span>]-x[<span class="hljs-number">0</span>])*(y[<span class="hljs-number">0</span>]-y[<span class="hljs-number">1</span>])-(x[<span class="hljs-number">1</span>]-x[<span class="hljs-number">0</span>])*(y[<span class="hljs-number">0</span>]-y[<span class="hljs-number">2</span>]);<br>        down*=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>(down)&lt;=<span class="hljs-number">1e-10</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<span class="hljs-comment">//判断三点共线</span><br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            xo=(x[<span class="hljs-number">0</span>]*x[<span class="hljs-number">0</span>]-x[<span class="hljs-number">2</span>]*x[<span class="hljs-number">2</span>])*(y[<span class="hljs-number">0</span>]-y[<span class="hljs-number">1</span>])/<span class="hljs-number">2</span>-(x[<span class="hljs-number">0</span>]*x[<span class="hljs-number">0</span>]-x[<span class="hljs-number">1</span>]*x[<span class="hljs-number">1</span>])*(y[<span class="hljs-number">0</span>]-y[<span class="hljs-number">2</span>])/<span class="hljs-number">2</span>+(y[<span class="hljs-number">0</span>]-y[<span class="hljs-number">2</span>])*(y[<span class="hljs-number">0</span>]-y[<span class="hljs-number">1</span>])*(y[<span class="hljs-number">2</span>]-y[<span class="hljs-number">1</span>])/<span class="hljs-number">2</span>;<br>            xo/=down;<br>            yo=(x[<span class="hljs-number">1</span>]-x[<span class="hljs-number">0</span>])/<span class="hljs-number">2</span>*(-(x[<span class="hljs-number">0</span>]*x[<span class="hljs-number">0</span>]-x[<span class="hljs-number">2</span>]*x[<span class="hljs-number">2</span>])-(y[<span class="hljs-number">0</span>]*y[<span class="hljs-number">0</span>]-y[<span class="hljs-number">2</span>]*y[<span class="hljs-number">2</span>]))-(x[<span class="hljs-number">2</span>]-x[<span class="hljs-number">0</span>])/<span class="hljs-number">2</span>*(-(x[<span class="hljs-number">0</span>]*x[<span class="hljs-number">0</span>]-x[<span class="hljs-number">1</span>]*x[<span class="hljs-number">1</span>])-(y[<span class="hljs-number">0</span>]*y[<span class="hljs-number">0</span>]-y[<span class="hljs-number">1</span>]*y[<span class="hljs-number">1</span>]));<br>            yo/=down;<br>            yo*=<span class="hljs-number">-1</span>;<br>            <span class="hljs-comment">//printf(&quot;%lf %lf\n&quot;,xo,yo);</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fabs</span>((x[<span class="hljs-number">0</span>]-xo)*(x[<span class="hljs-number">0</span>]-xo)+(y[<span class="hljs-number">0</span>]-yo)*(y[<span class="hljs-number">0</span>]-yo)-(x[<span class="hljs-number">3</span>]-xo)*(x[<span class="hljs-number">3</span>]-xo)-(y[<span class="hljs-number">3</span>]-yo)*(y[<span class="hljs-number">3</span>]-yo))&lt;=<span class="hljs-number">1e-10</span>)<br>                 <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes\n&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>此种方法也可以拓展为判断n点共圆；</p><h1 id="推-导-时-注-意-正-负-号"><a class="markdownIt-Anchor" href="#推-导-时-注-意-正-负-号"></a> 推 导 时 注 意 正 负 号 ！</h1>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数论与几何</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于	火车编组的思路+代码</title>
    <link href="/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%81%AB%E8%BD%A6%E7%BC%96%E7%BB%84%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/"/>
    <url>/2021.01-06/%E5%85%B3%E4%BA%8E%20%E7%81%AB%E8%BD%A6%E7%BC%96%E7%BB%84%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#%E5%A4%A7%E4%BD%93%E6%80%9D%E8%B7%AF">大体思路</a></li><li><a href="#%E6%9C%89%E5%85%B3%E9%99%90%E5%AE%9A%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%83%B3%E6%B3%95">有关限定条件的想法</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#ed">ED</a></li></ul><br />题目来源：<a href="http://acm.nefu.edu.cn/problemShow.php?problem_id=1628">NEFU OJ 栈-火车编组</a> 详细链接已补<br /><img src="https://s2.loli.net/2022/08/02/eSzPV3bDfWFQH67.png" alt="咕咕咕" /></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>oj中没有配图，我就没有 想透 题，最后查到<a href="https://blog.csdn.net/czjl6886/article/details/102537461">这里</a>才完全理解，下面的示意图亦出自该帖。</p><h2 id="大体思路"><a class="markdownIt-Anchor" href="#大体思路"></a> 大体思路</h2><p><img src="https://s2.loli.net/2022/08/02/dgY8GymzcHrRVlP.png" alt="感谢大佬" /><br />以样例为例，题意即为将A端（左至右）1，2，3，4，通过编组站调至B端（左至右）3，2，4，1。</p><p>我们可以将轨道中段视为栈，从A方向入栈，向B方向出栈。</p><p>决定出栈还是继续入栈的判据即为目前栈顶元素与目标车厢编号的大小关系：<br />——如果小于目标车厢编号，则继续从A端入栈；<br />——如果等于，则出栈进行编组；<br />——如果大于，则请看下一个二级目录。</p><p>某车厢出栈编组后，目标车厢编号即变为目标序列的下一元素，直至目标序列被编组完毕。</p><h2 id="有关限定条件的想法"><a class="markdownIt-Anchor" href="#有关限定条件的想法"></a> 有关限定条件的想法</h2><p>无论是在oj中，还是图源帖中，对题目的描述始终没有明确入栈的车厢是否可以出栈至A端，但是就我的判断，题目中不能。</p><p>图源帖中的问题是判断目标序列能否达成，如果能出栈至A端，则不存在非法序列。同理，oj经测试，所有测试组均合法。</p><p>对于图源帖中的问题，如果目前栈顶元素大于目标车厢编号，则可判断该序列非法。若考虑可以出栈至A端，则可以出栈至A端等待再次入栈。</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#include &lt;bits/stdc++.<span class="hljs-property">h</span>&gt;<br>using namespace std;<br><br>int <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)<br>&#123;<br>    stack&lt;int&gt;ord;<span class="hljs-comment">//ord为A端</span><br>    stack&lt;int&gt;sta;<span class="hljs-comment">//sta为编组用栈</span><br>    int aim[<span class="hljs-number">105</span>],process=<span class="hljs-number">1</span>;<span class="hljs-comment">//aim记录目标序列，</span><br>                     <span class="hljs-comment">//process记录目标车厢编号</span><br>    int n,i;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    cin&gt;&gt;aim[i];<br>    <span class="hljs-keyword">for</span>(i=n;i&gt;=<span class="hljs-number">1</span>;i--)<br>    ord.<span class="hljs-title function_">push</span>(i);<br>    <span class="hljs-keyword">while</span>(process!=n+<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(!sta.<span class="hljs-title function_">empty</span>()&amp;&amp;sta.<span class="hljs-title function_">top</span>()&gt;aim[process])<br>        &#123;<br>            <span class="hljs-comment">/*ord.push(sta.top());这段注释掉的是出栈至A端</span><br><span class="hljs-comment">            sta.pop();</span><br><span class="hljs-comment">            cout&lt;&lt;&#x27;B&#x27;;*/</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sta.<span class="hljs-title function_">empty</span>()||sta.<span class="hljs-title function_">top</span>()&lt;aim[process])<br>        &#123;<br>            sta.<span class="hljs-title function_">push</span>(ord.<span class="hljs-title function_">top</span>());<br>            ord.<span class="hljs-title function_">pop</span>();<br>            cout&lt;&lt;<span class="hljs-string">&#x27;A&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sta.<span class="hljs-title function_">top</span>()==aim[process])<br>        &#123;<br>            sta.<span class="hljs-title function_">pop</span>();<br>            cout&lt;&lt;<span class="hljs-string">&#x27;B&#x27;</span>;<br>            process++;<span class="hljs-comment">//目标车厢改为下一个</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>另：对于空栈使用.top会RTE。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于	Bsq AK ZUCCPC的思路+代码</title>
    <link href="/2020.07-12/%E5%85%B3%E4%BA%8E_Bsq%20AK%20ZUCCPC%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/"/>
    <url>/2020.07-12/%E5%85%B3%E4%BA%8E_Bsq%20AK%20ZUCCPC%E7%9A%84%E6%80%9D%E8%B7%AF+%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#%E5%A4%A7%E4%BD%93%E6%80%9D%E8%B7%AF">大体思路</a></li><li><a href="#ac%E4%BB%A3%E7%A0%81">AC代码</a></li><li><a href="#ed">ED</a></li></ul><br />题目来源：<a href="https://ac.nowcoder.com/acm/contest/9934#question">2020年浙大城市学院新生程序设计竞赛（同步赛）-H Bsq AK ZUCCPC</a></p><blockquote><blockquote><p>题目描述</p></blockquote><p>新生赛开赛在即，Kwords打算预测每道题的过题人数，现在他想知道如果按照他预测的过题数据，会有多少人能够AK（全部通过）或爆零（无法通过任何一道题）呢。因为Kwords并不知道榜单实际的过题情况，所以希望你能帮助他预测AK和爆零的人数区间。</p><blockquote><p>输入描述</p></blockquote><p>第一行给出一个正整数T(1≤T≤10)，表示接下来会给出T组测试数据。<br />对于每组测试数据，第一行给出两个正整数N(1≤N≤10<sup>5</sup>)表示新生赛有多少个题目，M(1≤M≤10<sup>9</sup> )表示参赛人数。<br />第二行给出N个数字，第i个数字表示第i道题通过的人数a<sub>i</sub> (0≤a<sub>i</sub>≤M)。</p><blockquote><p>输出描述</p></blockquote><p>对于每组数据，第一行给出两个数字L<sub>1</sub>,R<sub>1</sub>,表示AK的人数在区间[L<sub>1</sub>,R<sub>1</sub>]内，第二行给出两个数字L<sub>2</sub>,R<sub>2</sub>，表示爆零的人数在区间[L<sub>2</sub>,R<sub>2</sub>]内。</p></blockquote><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢<a href="https://blog.csdn.net/RealKing_sblog">rk学长</a>与<a href="https://blog.csdn.net/qq_39354847">sl学长</a>的倾情指导。<br />.</p><h2 id="大体思路"><a class="markdownIt-Anchor" href="#大体思路"></a> 大体思路</h2><p>对于每道题，有a<sub>i</sub>人A掉，有M-a<sub>i</sub>人未A。则对于所有N道题，设A了P=a<sub>1</sub>+a<sub>2</sub>+…+a<sub>n</sub>人次，未A Q=M-a<sub>1</sub>+M-a<sub>2</sub>+…+M-a<sub>n</sub>人次。<br />对于AK左限，我们可以假设所有未A是尽可能由不同人完成的，即L<sub>1</sub>=MAX{M-Q , 0};对于AK右限，我们可以假设A掉AC数最少题的人也A掉了其他所以题，即L<sub>2</sub>=MIN{a<sub>i</sub>}；对于爆零左右限同理，L<sub>1</sub>=MIN{M-P , 0}，L<sub>2</sub>=M-MAX{a<sub>I</sub>} 。</p><p>两个右限可如下例直观解释，N=6，M=20：<br /><img src="https://s2.loli.net/2022/08/02/B4NOspYCz9G3rWF.png" alt="触摸板写字真费劲" /><br />.</p><h2 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#include &lt;bits/stdc++.<span class="hljs-property">h</span>&gt;<br>typedef long long ll;<br>using namespace std;<br>int <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)<br>&#123;<br>    ll t,m,n,i;<br>    <span class="hljs-title function_">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;t);<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-title function_">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);<br>        ll a[<span class="hljs-number">100005</span>],mi=<span class="hljs-number">1000000000</span>,suf=<span class="hljs-number">0</span>,ma=<span class="hljs-number">0</span>,sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>        &#123;<br>            <span class="hljs-title function_">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;a[i]);<br>            <span class="hljs-keyword">if</span>(a[i]&lt;mi)mi=a[i];<br>            <span class="hljs-keyword">if</span>(a[i]&gt;ma)ma=a[i];<br>            sum+=a[i];<br>            suf+=m-a[i];<br>        &#125;<br>        <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;%lld %lld\n%lld %lld\n&quot;</span>,<br>        ((suf&gt;m)?<span class="hljs-number">0</span>:m-suf),mi,((sum&gt;m)?<span class="hljs-number">0</span>:m-sum),m-ma);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>这套题真的太草了（双语）；<br />&amp;我被吊锤；<br />&amp;但我还是喜欢。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于GPA Involution的思路+解法+代码</title>
    <link href="/2020.07-12/%E5%85%B3%E4%BA%8EGPA%20Involution%E7%9A%84%E6%80%9D%E8%B7%AF+%E8%A7%A3%E6%B3%95+%E4%BB%A3%E7%A0%81/"/>
    <url>/2020.07-12/%E5%85%B3%E4%BA%8EGPA%20Involution%E7%9A%84%E6%80%9D%E8%B7%AF+%E8%A7%A3%E6%B3%95+%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#%E5%A4%A7%E4%BD%93%E6%80%9D%E8%B7%AF">大体思路</a></li><li><a href="#%E5%A7%91%E4%B8%94%E7%AE%97%E6%98%AF%E8%A7%A3%E6%B3%95">（姑且算是）解法</a></li><li><a href="#ac%E4%BB%A3%E7%A0%81">AC代码</a></li><li><a href="#%E4%B8%8D%E5%BD%93%E8%A7%A3%E6%B3%95">不当解法</a></li><li><a href="#ed">ED</a></li></ul><br />题目来源：<a href="https://ac.nowcoder.com/acm/contest/9934#question">2020年浙大城市学院新生程序设计竞赛（同步赛）-K GPA Involution</a></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>感谢<a href="https://blog.csdn.net/RealKing_sblog">rk学长</a>与<a href="https://blog.csdn.net/qq_39354847">sl学长</a>的倾情指导。<br />.</p><h2 id="大体思路"><a class="markdownIt-Anchor" href="#大体思路"></a> 大体思路</h2><p>由题意，对最终结果产生影响的只有所选A/B中最大的扣分值，所以题目的顺序对结果无关，由此我们可以按某一选项分值进行排序（接下来用A，升序），再进行处理。</p><p>首先我们先保证由A扣掉的分值尽可能小，即在排序后的某一题之前的所有题全部选A，即由A扣掉的分数为该题的A选项的扣分值。其余题（该题之后的所有题）均选择B，由B扣掉的分数即为右侧所有B扣分值的最大值。</p><p>.</p><h2 id="姑且算是解法"><a class="markdownIt-Anchor" href="#姑且算是解法"></a> （姑且算是）解法</h2><p>排序之后，设题目为1,2,…,n；A选项扣分为A1,A2,…,An；B选项扣分为B1,B2,…,Bn。则如果第m(m=<em>0</em>,1,2,…,n,<em>n+1</em>)题及之前均选A，则扣分值为A<sub>m</sub>+MIN{b<sub>m+1</sub>,…,b<sub>n</sub>}，对m遍历求最小值即可。</p><p><strong>对于MIN{b<sub>m+1</sub>,…,b<sub>n</sub>} ，不需要在处理每个m时分别求出，</strong><br />可以通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">p[n+<span class="hljs-number">1</span>].<span class="hljs-property">b</span>=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(i=n-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">1</span>;i--)<br>   &#123;<br>       p[i].<span class="hljs-property">b</span>=(p[i].<span class="hljs-property">b</span>&gt;p[i+<span class="hljs-number">1</span>].<span class="hljs-property">b</span>) ? p[i].<span class="hljs-property">b</span> : p[i+<span class="hljs-number">1</span>].<span class="hljs-property">b</span> ;<br>   &#125;<br></code></pre></td></tr></table></figure><p>直接将B<sub>m+1</sub>存为B<sub>m</sub>之后（不含B<sub>m</sub>）的最大值。<br /><em>此种处理方法也在<a href="">库特的鸽鸽们</a>（以后补链）一题中，求在接收最后一次操作二后，所接受操作一的最大数值。</em></p><p><strong>进一步优化：</strong><br />假设排序后，B<sub>n</sub>最大值在第x题。则在x题之前，随m的增加，由B造成的扣分值不变，均为B<sub>n</sub>的最大值，而由A造成的扣分值增长。故只需要遍历m(m=0,x,x+1,…,n,n+1)。</p><h2 id="ac代码"><a class="markdownIt-Anchor" href="#ac代码"></a> AC代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">#include &lt;bits/stdc++.<span class="hljs-property">h</span>&gt;<br>typedef long long ll;<br>using namespace std;<br>struct poi&#123;<br>ll a,b;<br>&#125;p[<span class="hljs-number">200005</span>];<br>bool <span class="hljs-title function_">cmp</span>(<span class="hljs-params">poi a,poi b</span>)<br>&#123;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-property">a</span>&lt;b.<span class="hljs-property">a</span>;<br>&#125;<br>int <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)<br>&#123;<br><br>    ll n,i,mp,ma=<span class="hljs-number">0</span>;<br>    <span class="hljs-title function_">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-title function_">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;p[i].<span class="hljs-property">a</span>);<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    <span class="hljs-title function_">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;p[i].<span class="hljs-property">b</span>);<br>    <span class="hljs-title function_">sort</span>(p+<span class="hljs-number">1</span>,p+<span class="hljs-number">1</span>+n,cmp);<span class="hljs-comment">//排序</span><br>    p[n+<span class="hljs-number">1</span>].<span class="hljs-property">b</span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=n-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">1</span>;i--)<br>    &#123;<br>        p[i].<span class="hljs-property">b</span>=(p[i].<span class="hljs-property">b</span>&gt;p[i+<span class="hljs-number">1</span>].<span class="hljs-property">b</span>)?p[i].<span class="hljs-property">b</span>:p[i+<span class="hljs-number">1</span>].<span class="hljs-property">b</span>;<br>    &#125;<br>    mp=p[<span class="hljs-number">1</span>].<span class="hljs-property">b</span>;<span class="hljs-comment">//m初始值为m=0（此时总扣分值仅为B的最大值）</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;p[i].<span class="hljs-property">b</span>!=mp;i++);<span class="hljs-comment">//找到x</span><br>    <span class="hljs-keyword">for</span>(;i&lt;=n;i++)<span class="hljs-comment">//从x之后</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(p[i].<span class="hljs-property">a</span>+p[i+<span class="hljs-number">1</span>].<span class="hljs-property">b</span>&lt;mp)mp=p[i].<span class="hljs-property">a</span>+p[i+<span class="hljs-number">1</span>].<span class="hljs-property">b</span>;<br>    &#125;<br>    <span class="hljs-title function_">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,(mp&gt;p[n].<span class="hljs-property">a</span>)?p[n].<span class="hljs-property">a</span>:mp);<span class="hljs-comment">//m=n+1时与之前的比较</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="不当解法"><a class="markdownIt-Anchor" href="#不当解法"></a> 不当解法</h2><p>#1<br />一种朴素的想法：对于每一题，比较A与B的扣分值，将较小值加入对应选项的组，最后在各组比较该组最大值，并将两组最大值求和。<br />对于该测试组</p><blockquote><p>5<br />1 1 4 5 9<br />1 1 8 4 5</p></blockquote><p>正确算法应该返回8（全选B）<br />而#1算法会返回9（1，2，3为A；4，5为B）</p><p>#2<br />一种类似DP的想法：<br />顺序处理每一题，选择此题选A/B对总扣分造成最小增量的情况。</p><blockquote><p>5<br />1 1 4 5 9<br />1 1 8 4 5</p></blockquote><p>此算法会返回9（1，2均A）或10（1，2均B）<br />*<em>对于对结果影响相等的题目，在当次处理中不会造成差异，但是对以后的处理，会有后效性</em>(来自sl）</p><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ED</h2><p>这套题真的太草了（双语）；<br />&amp;我被吊锤；<br />&amp;但我还是喜欢。</p>]]></content>
    
    
    <categories>
      
      <category>算法竞赛</category>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
