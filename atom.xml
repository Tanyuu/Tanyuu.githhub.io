<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yu_Tang</title>
  
  
  <link href="https://tanyuu.github.io/atom.xml" rel="self"/>
  
  <link href="https://tanyuu.github.io/"/>
  <updated>2023-07-06T13:36:11.894Z</updated>
  <id>https://tanyuu.github.io/</id>
  
  <author>
    <name>Fu Junyuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用cURL通过AzureAd鉴权调用ASP.NET Core Web API</title>
    <link href="https://tanyuu.github.io/2023.07-12/%E4%BD%BF%E7%94%A8cURL%E9%80%9A%E8%BF%87AzureAd%E9%89%B4%E6%9D%83%E8%B0%83%E7%94%A8ASP.NET%20Core%20Web%20API/"/>
    <id>https://tanyuu.github.io/2023.07-12/%E4%BD%BF%E7%94%A8cURL%E9%80%9A%E8%BF%87AzureAd%E9%89%B4%E6%9D%83%E8%B0%83%E7%94%A8ASP.NET%20Core%20Web%20API/</id>
    <published>2023-07-06T08:41:16.000Z</published>
    <updated>2023-07-06T13:36:11.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>为了深刻理解以AzureAD为代表的API鉴权功能，决定使用VisualStudio的WebAPI模板实践一下，最终目标是使用Swagger页面完成鉴权，这部分还在探索中，姑且先将cURL调用的的这部分发布出来。</p><p>本篇内容主要参考了<a href="https://learn.microsoft.com/zh-cn/azure/active-directory/develop/howto-call-a-web-api-with-curl?tabs=dotnet6&amp;pivots=no-api">微软官方文档</a>，更改了其中一些不符合本地情况的内容。作为个人记录，会改用一些并不标准的表述，敬请见谅。</p><h2 id="流程概述"><a class="markdownIt-Anchor" href="#流程概述"></a> 流程概述</h2><ol><li>将微软账号进行Azure认证；（期间需要进行VISA信用卡信息认证，如果不打算长期使用的话可以直接淘宝买一套信息）</li><li>在Azure Active Directory（上称AzureAD，下称AAD）分别注册服务端应用（同Web API）和客户端应用，为服务端应用建立作用域（操作名）的公开API，为客户端申请密码并在客户端获取公开API相应的权限；</li><li>创建VisualStudio（下称VS）的WebAPI模板，用注册好的服务端应用信息配置<code>appsettings.json</code>，并运行；</li><li>通过终端分别获取授权代码、访问令牌，并用访问令牌调用Web API。</li></ol><p>在AAD中，我们所说的在API调用中的服务端和客户端是等价的，对于注册的应用，页面中有一个叫做<code>应用程序（客户端）ID</code>的字段，下面全部使用<code>应用ID</code>代替；</p><p>指令/URL中有一些字段需要替换，在此篇内容中均用<code>&#123;&#125;</code>包括，替换时请一并替换掉<code>&#123;&#125;</code>。</p><h2 id="详细流程"><a class="markdownIt-Anchor" href="#详细流程"></a> 详细流程</h2><h3 id="注册服务端应用"><a class="markdownIt-Anchor" href="#注册服务端应用"></a> 注册服务端应用</h3><p>从Azure主页，点击Azure Active Directory图标进入AAD默认目录，<code>左侧栏&gt;管理&gt;应用注册</code>，点击<code>新注册</code>；</p><blockquote><p>使用学校邮箱注册的账号可能存在无权限进入AAD的问题</p></blockquote><p><code>名称</code>仅作标记，这里取<code>YT-Service</code>，<code>受支持的账户类型</code>和<code>重定向URL</code>保持默认即可，点击<code>注册</code>；</p><p>在<code>YT-Service</code>的<code>左侧栏&gt;管理&gt;公开API</code>界面，点击<code>添加范围</code>；</p><p><code>应用程序ID URL</code>保持默认，结构大致为<code>api://&#123;YT-Service_应用ID&#125;</code>，点击<code>保存并继续</code>；</p><p><code>作用域名称</code>代表调用API时进行的操作，在VS的WebAPI模板中，这一操作为<code>access_as_user</code>。<code>谁能同意？</code>选择<code>管理员和用户</code>。<code>管理员/用户 同意 显示名称/说明</code>在此实践中不重要，随意填写即可。<code>状态</code>选择<code>已启用</code>。点击<code>添加作用域</code>；</p><h3 id="注册客户端应用"><a class="markdownIt-Anchor" href="#注册客户端应用"></a> 注册客户端应用</h3><p><strong>返回主页</strong>，同样地，点击Azure Active Directory图标进入AAD默认目录，<code>左侧栏&gt;管理&gt;应用注册</code>，点击<code>新注册</code>；</p><p><code>名称</code>这里取<code>YT-Client</code>，<code>受支持的账户类型</code>保持默认即可，<code>重定向URL</code>中，<code>选择平台</code>选择<code>Web</code>，值填入<code>http://localhost</code>，点击<code>注册</code>；</p><p>在<code>YT-Client</code>的<code>左侧栏&gt;管理&gt;证书和密码</code>，<code>客户端密码</code>一栏点击<code>新客户端密码</code>，<code>说明</code>和<code>截止期限</code>保持默认即可，点击<code>添加</code>，获得密码的<code>值</code>字段一定妥善保管，再次进入此页面时将无法查看；</p><p>在<code>YT-Client</code>的<code>左侧栏&gt;管理&gt;API权限</code>，点击<code>添加权限</code>，选择<code>我的API</code>栏，选择刚才注册的<code>YT-Service</code>，勾选<code>access_as_user</code>，点击<code>添加权限</code>。</p><p>至此在AAD上面的操作已经全部完成，观察<code>YT-Service</code>和<code>YT-Client</code>的<code>左侧栏&gt;概述</code>中，<code>目录（租户）ID</code>应该相同，下称此字段为<code>用户ID</code>。</p><h3 id="生成并配置vs-net-core-web-api模板"><a class="markdownIt-Anchor" href="#生成并配置vs-net-core-web-api模板"></a> 生成并配置VS .NET Core Web APi模板</h3><p>启动VS，<code>创建新项目</code>，选择<code>ASP .NET Core Web API</code>模板，项目名称仅作标记，这里取<code>TY-API</code>，点击<code>下一步</code>；</p><p><code>框架</code>默认，<code>身份验证类型</code>选择<code>Microsoft标识平台</code>，其余选择默认，点击<code>创建</code>；</p><p>有三种方式进行模板配置：</p><ol><li><p>登录刚才注册应用的微软账户，选择租户（一般默认），在<code>拥有的应用程序</code>一栏中选择<code>YT-Service</code>，点击<code>下一步</code>；</p><p>均默认即可，点击<code>完成</code>，等待配置结束。</p></li><li><p>在<code>解决方案资源管理器</code>中<code>Connected Services</code>菜单中，右键点击<code>Microsoft标识平台</code>，选择<code>编辑</code>，其余步骤与方法1相同。</p></li><li><p>在<code>解决方案资源管理器</code>中进入<code>appsettings.json</code>，更改<code>AzureAd</code>的值：</p><p><code>Instance</code>为<code>&quot;https://login.microsoftonline.com/&quot;</code>，<a href="https://learn.microsoft.com/zh-cn/azure/active-directory/develop/authentication-national-cloud#azure-ad-authentication-endpoints">参考</a>；</p><p><code>Domain</code>的值参考在AAD界面鼠标悬停在右上角头像处的提示栏中<code>域</code>字段的值，参考格式为<code>&quot;&#123;xxx&#125;.onmicrosoft.com&quot;</code>；</p><p><code>TenantId</code>为<code>&quot;&#123;用户ID&#125;&quot;</code>；</p><p><code>ClientId</code>为<code>&quot;&#123;TY-Service_应用ID&#125;&quot;</code>；</p><p><code>CallbackPath</code>保持默认为<code>&quot;/signin-oidc&quot;</code>；</p><p><code>Scopes</code>保持默认为<code>&quot;access_as_user&quot;</code>；</p><p><code>ClientSecret</code>无需配置，保持默认提示值即可；</p><p><code>ClientCertificates</code>无需配置，保持默认空值即可；</p></li></ol><p>在VS的<code>调试</code>菜单选择<code>开始执行（不调试）</code>，浏览器会跳转到Swagger界面，记录此页面的<code>&#123;端口号&#125;</code>，此时测试API应该会获得401代码，因为我们并没有进行鉴权。</p><h3 id="通过终端使用curl获得鉴权并调用api"><a class="markdownIt-Anchor" href="#通过终端使用curl获得鉴权并调用api"></a> 通过终端使用cURL获得鉴权并调用API</h3><blockquote><p>此段的{授权代码}和{访问令牌}可能会很长（1300~和1700~）</p></blockquote><p>在浏览器中替换并访问以下网址：</p><p><code>https://login.microsoftonline.com/&#123;用户ID&#125;/oauth2/v2.0/authorize?client_id=&#123;TY-Client_应用ID&#125;&amp;response_type=code&amp;redirect_uri=http://localhost&amp;response_mode=query&amp;scope=api://&#123;TY-Service_应用ID&#125;/&#123;作用域名称&#125;</code></p><p>此处作用域名称为<code>access_as_user</code>；</p><p>以注册应用的 Azure AD 租户中的用户身份登录。 如有必要，可同意任何访问请求。</p><p>浏览器将会重定向到<code>http://localhost/</code>，请观察浏览器的地址栏， URL 格式如下：</p><p><code>http://localhost/?code=&#123;授权代码&#125;&amp;session_state=&#123;会话状态&#125;</code></p><p>请复制两个参数在接下来的步骤中使用；</p><p>在终端中替换并执行以下命令：</p><p><code>curl -X POST https://login.microsoftonline.com/&#123;用户ID&#125;/oauth2/v2.0/token -d &quot;api://&#123;TY-Service_应用ID&#125;/&#123;作用域名称&#125;&amp;client_id=&#123;TY-Client_应用ID&#125;&amp;code=&#123;授权代码&#125;&amp;session_state=&#123;会话状态&#125;&amp;redirect_uri=http://localhost&amp;grant_type=authorization_code&amp;client_secret=&#123;TY-Client_应用密码&#125;&quot;</code></p><p>如果输入正确，应会收到类似于以下输出的 JSON 响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;token_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Bearer&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;scope&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;api://&#123;TY-Service_应用ID&#125;/&#123;作用域名称&#125;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;expires_in&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5214</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ext_expires_in&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5214</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;access_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;访问令牌&#125;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>记下<code>&#123;访问令牌&#125;</code>，在终端中替换并执行以下命令：</p><p><code>curl -X GET https://localhost:&#123;端口号&#125;/WeatherForecast -ki -H 'Content-Type: application/json' -H &quot;Authorization: Bearer &#123;访问令牌&#125;&quot; -H 'accept: text/plain'</code></p><p>我们得到了如下结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cmd">HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> OK<br>Content-<span class="hljs-built_in">Type</span>: application/json; charset=utf-<span class="hljs-number">8</span><br><span class="hljs-function">Date: <span class="hljs-title">Thu</span>, 06 <span class="hljs-title">Jul</span> 2023 13:17:31 <span class="hljs-title">GMT</span></span><br><span class="hljs-function"><span class="hljs-title">Server</span>: <span class="hljs-title">Kestrel</span></span><br><span class="hljs-function"><span class="hljs-title">Transfer</span>-<span class="hljs-title">Encoding</span>: <span class="hljs-title">chunked</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">[&#123;&quot;<span class="hljs-title">date</span>&quot;:&quot;2023-07-07&quot;,&quot;<span class="hljs-title">temperatureC</span>&quot;:36,&quot;<span class="hljs-title">temperatureF</span>&quot;:96,&quot;<span class="hljs-title">summary</span>&quot;:&quot;<span class="hljs-title">Cool</span>&quot;&#125;,&#123;&quot;<span class="hljs-title">date</span>&quot;:&quot;2023-07-08&quot;,&quot;<span class="hljs-title">temperatureC</span>&quot;:0,&quot;<span class="hljs-title">temperatureF</span>&quot;:32,&quot;<span class="hljs-title">summary</span>&quot;:&quot;<span class="hljs-title">Cool</span>&quot;&#125;,&#123;&quot;<span class="hljs-title">date</span>&quot;:&quot;2023-07-09&quot;,&quot;<span class="hljs-title">temperatureC</span>&quot;:-11,&quot;<span class="hljs-title">temperatureF</span>&quot;:13,&quot;<span class="hljs-title">summary</span>&quot;:&quot;<span class="hljs-title">Warm</span>&quot;&#125;,&#123;&quot;<span class="hljs-title">date</span>&quot;:&quot;2023-07-10&quot;,&quot;<span class="hljs-title">temperatureC</span>&quot;:-10,&quot;<span class="hljs-title">temperatureF</span>&quot;:15,&quot;<span class="hljs-title">summary</span>&quot;:&quot;<span class="hljs-title">Scorching</span>&quot;&#125;,&#123;&quot;<span class="hljs-title">date</span>&quot;:&quot;2023-07-11&quot;,&quot;<span class="hljs-title">temperatureC</span>&quot;:-15,&quot;<span class="hljs-title">temperatureF</span>&quot;:6,&quot;<span class="hljs-title">summary</span>&quot;:&quot;<span class="hljs-title">Bracing</span>&quot;&#125;]</span><br></code></pre></td></tr></table></figure><p>标志着API调用成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#写在前面&quot;&gt;&lt;/a&gt; 写在前面&lt;/h2&gt;
&lt;p&gt;为了深刻理解以AzureAD为代表的API鉴权功能，决定使用VisualStudio的WebAPI模板实践一下，最终目标是使用Swa</summary>
      
    
    
    
    <category term="Web" scheme="https://tanyuu.github.io/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>浅探C++中const、char与*的排列组合</title>
    <link href="https://tanyuu.github.io/2023.01-06/%E6%B5%85%E6%8E%A2C++%E4%B8%ADconst%E3%80%81char%E4%B8%8EAsterisk%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/"/>
    <id>https://tanyuu.github.io/2023.01-06/%E6%B5%85%E6%8E%A2C++%E4%B8%ADconst%E3%80%81char%E4%B8%8EAsterisk%E7%9A%84%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</id>
    <published>2023-03-05T09:42:35.000Z</published>
    <updated>2023-03-06T10:24:20.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>来自于C++课上提出的问题：<code>char *p</code>、<code>const char *p</code>、<code>char p[]</code>、<code>const char p[]</code>有何区别。本文通过测试编译器是否报错和使用<code>typeid(VAIBLE_NAME).name()</code>输出的方式来从<code>能否更改指向的地址</code> 和<code>能否更改指向的内容</code>两个角度来测试</p><blockquote><p>char *p1<br />const char *p2<br />char *const p3<br />char const *p4<br />char p5[]<br />const char p6[]</p></blockquote><p>六者的区别。</p><h2 id="写在中间"><a class="markdownIt-Anchor" href="#写在中间"></a> 写在中间</h2><p>需要注意的是，在一些相对基础（内容浅显、易于理解）的课中，可能会将数组类型（[]）和指针类型（*）混为一谈，实际上这是错误的。在底层他们的受处理方法完全不同。</p><p>对于数组类型，无论定义时是否指定长度或是否初始化（指定长度和初始化至少做一个），数组都不可以<code>更改指向的地址</code>。如果数组中的数据类型不是<code>const</code>类型，则可以<code>更改指向的内容</code>。</p><table><thead><tr><th>数据类型</th><th>能否更改指向地址</th><th>能否更改指向内容</th><th>typeid(VAIBLE_NAME).name()</th><th>sizeof(VAIBLE_NAME)</th></tr></thead><tbody><tr><td>char *</td><td>可</td><td>可</td><td>Pc</td><td>8</td></tr><tr><td>const char *</td><td>可</td><td>否</td><td>PKc</td><td>8</td></tr><tr><td>char *const</td><td>否</td><td>可</td><td>Pc</td><td>8</td></tr><tr><td>char const *</td><td>可</td><td>否</td><td>PKc</td><td>8</td></tr><tr><td>char []</td><td>否</td><td>可</td><td>A3_c</td><td>3（关于为什么是3可以参照下面代码）</td></tr><tr><td>const char []</td><td>否</td><td>否</td><td>A3_c</td><td>3（同上）</td></tr></tbody></table><p>关于<code>typeid(VAIBLE_NAME).name()</code>输出内容的含义，我们可以参照chatGPT给出的解释：</p><p><img src="https://s2.loli.net/2023/03/05/rECeMlW8khNAd5H.png" alt="为什么不问问万能的chatGPT呢" /></p><p>至于<code>sizeof(VAIBLE_NAME)</code>返回的内容我们可以视作该变量占用的字节数。</p><p>我们可以发现，连续的<code>char const</code>和<code>const char</code>是完全相同的，其均代表<code>更改指向的内容</code>这一操作不被允许。而类似<code>* const</code> 的结构代表<code>更改指向的地址</code>这一操作不被允许。</p><h2 id="写在后面"><a class="markdownIt-Anchor" href="#写在后面"></a> 写在后面</h2><p>本文使用的测试代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;typeinfo&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> c0 = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    <span class="hljs-type">char</span> *p1 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p2 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> *<span class="hljs-type">const</span> p3 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> <span class="hljs-type">const</span> *p4 = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">char</span> p5[] = <span class="hljs-string">&quot;p5&quot;</span>;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> p6[] = <span class="hljs-string">&quot;p6&quot;</span>;<br><br>    p1 = &amp;c0;<br>    p2 = &amp;c0;<br>    <span class="hljs-comment">// p3 = &amp;c0;</span><br>    p4 = &amp;c0;<br>    <span class="hljs-comment">// p5 = &amp;c0;</span><br>    <span class="hljs-comment">// p6 = &amp;c0;</span><br><br>    *p1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-comment">// *p2 = &#x27;a&#x27;;</span><br>    *p3 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-comment">// *p4 = &#x27;a&#x27;;</span><br>    *p5 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-comment">// *p6 = &#x27;a&#x27;;</span><br><br>    cout &lt;&lt; <span class="hljs-string">&quot;p1 &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(p1).<span class="hljs-built_in">name</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(p1) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p2 &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(p2).<span class="hljs-built_in">name</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(p2) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p3 &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(p3).<span class="hljs-built_in">name</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(p3) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p4 &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(p4).<span class="hljs-built_in">name</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(p4) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p5 &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(p5).<span class="hljs-built_in">name</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(p5) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p6 &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(p6).<span class="hljs-built_in">name</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(p6) &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;c0 &quot;</span> &lt;&lt; <span class="hljs-built_in">typeid</span>(c0).<span class="hljs-built_in">name</span>() &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; <span class="hljs-built_in">sizeof</span>(c0) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>被注释掉的内容即为不被允许的操作。</p><p>什么常量指针、指针常量，作者本不应该给读者设置门槛。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#写在前面&quot;&gt;&lt;/a&gt; 写在前面&lt;/h2&gt;
&lt;p&gt;来自于C++课上提出的问题：&lt;code&gt;char *p&lt;/code&gt;、&lt;code&gt;const char *p&lt;/code&gt;、&lt;cod</summary>
      
    
    
    
    <category term="C++" scheme="https://tanyuu.github.io/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>海尔X208双系统安装记录</title>
    <link href="https://tanyuu.github.io/2023.01-06/%E6%B5%B7%E5%B0%94X208%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <id>https://tanyuu.github.io/2023.01-06/%E6%B5%B7%E5%B0%94X208%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</id>
    <published>2023-02-03T09:00:54.000Z</published>
    <updated>2023-02-03T09:09:15.275Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a class="markdownIt-Anchor" href="#写在前面"></a> 写在前面</h2><p>在同学的提醒和一些潜在需求的驱动下，想找一台物理机装Linux来玩，担心搞砸（差点发生了）带来的严重后果，决定使用家里的闲置笔记本。</p><p>至于需求是否真的迫切或者必要，我现在还是没有判断的，但是至少在这个过程中接触到了一些更基础的内容。</p><h2 id="软硬件基础情况"><a class="markdownIt-Anchor" href="#软硬件基础情况"></a> 软硬件基础情况</h2><p>X208上市时间 2010年，处理器 Intel Atom CPU N450 1.66GHz，显卡 Intel® Grapics Media Accelerator 3150，内存 Samsung DDR2 1GB 某型，硬盘 希捷Momentus 5400.6 250G(ST9250315AS)，有线网卡 Atheros AR8132 PCI-E， 无线网卡 Intel® WiFi Link 1000 BGN。</p><blockquote><p>这个无线网卡只支持到Wifi 5</p></blockquote><p>BIOS版本 InsydeH20 Rev. 3.5，原操作系统 Windows XP Professional 版本2002 Service Pack 3。</p><p>新操作系统为 Ubuntu 20.04 Server。</p><h2 id="流程概述"><a class="markdownIt-Anchor" href="#流程概述"></a> 流程概述</h2><p>可以参照<a href="https://www.bilibili.com/video/BV1554y1n7zv">此教程</a></p><ol><li><p>原系统备份</p></li><li><p>使用XP的磁盘管理工具进行分区</p><p>这里理论来说Linux的安装程序也可以通过LVM来实现这一步骤，但是遇到了若干问题，最后绕开了。</p></li><li><p>制作引导盘</p></li><li><p>更改BIOS引导设置</p></li><li><p>安装</p></li></ol><h2 id="problems"><a class="markdownIt-Anchor" href="#problems"></a> Problems</h2><h3 id="1-windows不识别移动硬盘磁盘管理显示其为gpt保护分区"><a class="markdownIt-Anchor" href="#1-windows不识别移动硬盘磁盘管理显示其为gpt保护分区"></a> 1. Windows不识别移动硬盘，磁盘管理显示其为“GPT保护分区”</h3><p><img src="https://s2.loli.net/2023/02/03/ZmRXcdMjCLpsPrv.png" alt="32位XP不支持" /></p><p>一般来说可以将磁盘格式化成MBR分区，但是移动硬盘上的数据不太方便备份，最终换了个U盘来做原系统的数据备份。</p><p>至于MBR与GPT相互转换的方法，可以参照<a href="https://blog.csdn.net/weixin_33770878/article/details/86354297">这里</a>，<strong>注意此方法会擦除磁盘数据</strong>（在找资料时已经见到太多惨剧了）。</p><h3 id="2-grub报错grub-error-cant-find-command-grub_platform"><a class="markdownIt-Anchor" href="#2-grub报错grub-error-cant-find-command-grub_platform"></a> 2. GRUB报错：Grub error: Can’t find command ‘grub_platform’</h3><p><a href="https://askubuntu.com/questions/1288476/can-not-install-from-usb-with-error-cannot-find-grub-platform">来源</a></p><p>此版本GRUB不适配GPT引导盘。可以通过<a href="https://rufus.ie/zh/#google_vignette">Rufus</a>制作指定格式的引导盘。</p><h3 id="3-关于桌面版安装程序的问题"><a class="markdownIt-Anchor" href="#3-关于桌面版安装程序的问题"></a> 3. 关于桌面版安装程序的问题</h3><p>最开始尝试的是Ubuntu22.04桌面版，进入试用版桌面后及其卡顿几乎无法进行任何操作（包括打开终端），可能是由于gnome的负担过大。</p><p>遂尝试了Ubuntu18.04桌面版，由于显示器过小安装程序窗口无法完全显示（应该是可以解决的）和同学的建议（18.04好多bug）而放弃。</p><p>接下来计划先安装某服务器版，再安装较轻量级的桌面。</p><img src="https://s2.loli.net/2023/02/03/wY6NtoalLJqePQ3.jpg" alt="快说谢谢万叶" style="zoom:50%;" /><h3 id="4-安装失败报错pv_min_size-is-too-small"><a class="markdownIt-Anchor" href="#4-安装失败报错pv_min_size-is-too-small"></a> 4. 安装失败报错“pv_min_size is too small”</h3><p><a href="https://unix.stackexchange.com/questions/255886/unable-to-run-the-pvcreate-command">来源1</a>，<a href="https://www.linuxquestions.org/questions/linux-software-2/issue-with-partitions-lvm-895597/">来源2</a></p><p>推测是硬盘分配单元大小过小，应该设置至少为2048KB。使用XP的硬盘管理重新格式化解决。</p><h3 id="5-安装失败报错expecting-swap-found-none"><a class="markdownIt-Anchor" href="#5-安装失败报错expecting-swap-found-none"></a> 5. 安装失败报错“expecting swap, found none”</h3><p><a href="https://www.mail-archive.com/ubuntu-bugs@lists.ubuntu.com/msg5847941.html">来源1</a>，<a href="https://bugs.launchpad.net/subiquity/+bug/1878890">来源2</a>，<a href="https://bugs.launchpad.net/ubuntu/+source/subiquity/+bug/1952545">来源3</a></p><p>报错发生在 <code>configuring partition:partition-xxxx</code> 处理分配给swap的空间时。参照来源2的解决方法进行了edge更新，但是依然存在问题。最后选择了先不分配swap空间。</p><h2 id="结尾"><a class="markdownIt-Anchor" href="#结尾"></a> 结尾</h2><p>是遇到了一堆问题，但是好像最后绕开了好多……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#写在前面&quot;&gt;&lt;/a&gt; 写在前面&lt;/h2&gt;
&lt;p&gt;在同学的提醒和一些潜在需求的驱动下，想找一台物理机装Linux来玩，担心搞砸（差点发生了）带来的严重后果，决定使用家里的闲置笔记本。</summary>
      
    
    
    
    <category term="Linux" scheme="https://tanyuu.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>2022牛客暑期多校训练营10（FHI）</title>
    <link href="https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A510%EF%BC%88FHI%EF%BC%89/"/>
    <id>https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A510%EF%BC%88FHI%EF%BC%89/</id>
    <published>2022-08-21T12:30:58.000Z</published>
    <updated>2022-08-25T01:57:09.554Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33195">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#f-shannon-switching-game">F Shannon Switching Game?</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#h-wheel-of-fortune">H Wheel of Fortune</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#i-yet-another-fft-problem">I Yet Another FFT Problem?</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li></ul></p><h2 id="f-shannon-switching-game"><a class="markdownIt-Anchor" href="#f-shannon-switching-game"></a> F Shannon Switching Game?</h2><p>博弈论</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>从结束点开始向外考虑，结束点我们认为是必胜点，考虑其他点如何成为必胜点：</p><p>如果某点存在两条（可重）边连接至另一个必胜点，则认为该点也是必胜点；</p><p>以终点开始进行bfs寻找必胜点即可；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> win[<span class="hljs-number">110</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">110</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; E[<span class="hljs-number">110</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; que;<br>    que.<span class="hljs-built_in">push</span>(x);<br>    win[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> y = que.<span class="hljs-built_in">front</span>();<br>        que.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> ty : E[y])<br>        &#123;<br>            <span class="hljs-keyword">if</span> (win[ty])<br>                <span class="hljs-keyword">continue</span>;<br>            vis[ty]++;<br>            <span class="hljs-keyword">if</span> (vis[ty] == <span class="hljs-number">2</span>)<br>            &#123;<br>                win[ty] = <span class="hljs-number">1</span>;<br>                que.<span class="hljs-built_in">push</span>(ty);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>)-&gt;<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">int</span> s, t;<br>    <span class="hljs-type">int</span> T;<br>    cin &gt;&gt; T;<br>    <span class="hljs-keyword">while</span> (T--)<br>    &#123;<br>        <span class="hljs-type">int</span> n, m;<br>        cin &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            vis[i] = <span class="hljs-number">0</span>;<br>            win[i] = <span class="hljs-number">0</span>;<br>            E[i].<span class="hljs-built_in">clear</span>();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> u, v;<br>            cin &gt;&gt; u &gt;&gt; v;<br>            E[u].<span class="hljs-built_in">push_back</span>(v);<br>            E[v].<span class="hljs-built_in">push_back</span>(u);<br>        &#125;<br>        <span class="hljs-built_in">bfs</span>(t);<br>        <span class="hljs-keyword">if</span> (win[s])<br>            cout &lt;&lt; <span class="hljs-string">&quot;Join Player\n&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;Cut Player\n&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-wheel-of-fortune"><a class="markdownIt-Anchor" href="#h-wheel-of-fortune"></a> H Wheel of Fortune</h2><p>概率期望</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>假设 a,b 分别为 A,B 的最大受击数，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">t_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 表示 a 胜利的期望量（方案数*方案对应概率），则有</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>t</mi><mi>a</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>a</mi><mo>−</mo><mn>1</mn></mrow></munderover><msubsup><mi>C</mi><mrow><mi>i</mi><mo>+</mo><mi>b</mi><mo>−</mo><mn>1</mn></mrow><mi>i</mi></msubsup><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><msup><mo stretchy="false">)</mo><mrow><mi>i</mi><mo>+</mo><mi>b</mi></mrow></msup></mrow><annotation encoding="application/x-tex">t_a=\sum_{i=1}^{a-1}C_{i+b-1}^i(\frac 12)^{i+b}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0787820000000004em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011130000000004em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.874664em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord">1</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">b</span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">Q_power</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b = MOD - <span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            res = res * a % MOD;<br>        a = a * a % MOD;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">10</span>;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> Fact[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> InvF[N];<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> tw[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    Fact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        Fact[i] = Fact[i - <span class="hljs-number">1</span>] * i % MOD;<br>    &#125;<br><br>    InvF[N - <span class="hljs-number">1</span>] = <span class="hljs-built_in">Q_power</span>(Fact[N - <span class="hljs-number">1</span>]);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        InvF[i] = InvF[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % MOD;<br>    &#125;<br><br>    tw[N - <span class="hljs-number">1</span>] = <span class="hljs-built_in">Q_power</span>(<span class="hljs-built_in">Q_power</span>(<span class="hljs-number">2</span> , N - <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N - <span class="hljs-number">2</span> ; i &gt;= <span class="hljs-number">0</span> ; i -- ) &#123;<br>        tw[i] = tw[i + <span class="hljs-number">1</span>] * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(tw[i] &gt;= MOD) tw[i] -= MOD;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt; m)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> Fact[n] * InvF[m] % MOD * InvF[n - m] % MOD;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-type">int</span> a, b;<br>    cin &gt;&gt; a;<br>    a = (a - <span class="hljs-number">1</span>) / <span class="hljs-number">10</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">7</span>; i++)<br>        cin &gt;&gt; b;<br>    cin &gt;&gt; b;<br>    b = (b - <span class="hljs-number">1</span>) / <span class="hljs-number">10</span> + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> A, B;<br>    A = B = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a; i++)<br>    &#123;<br>        A += <span class="hljs-built_in">C</span>(i + b - <span class="hljs-number">1</span>, i) * tw[i+b] % MOD;<br>        <span class="hljs-keyword">if</span> (A &gt;= MOD)<br>            A -= MOD;<br>    &#125;<br><span class="hljs-comment">//     for (int i = 0; i &lt; b; i++)</span><br><span class="hljs-comment">//     &#123;</span><br><span class="hljs-comment">//         B += C(i + a - 1, i) * tw[i+a] % MOD;</span><br><span class="hljs-comment">//         if (B &gt;= MOD)</span><br><span class="hljs-comment">//             B -= MOD;</span><br><span class="hljs-comment">//     &#125;</span><br><br>    cout &lt;&lt; A &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-yet-another-fft-problem"><a class="markdownIt-Anchor" href="#i-yet-another-fft-problem"></a> I Yet Another FFT Problem?</h2><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>去掉绝对值后移项可得 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>b</mi><mi>l</mi></msub><mo>=</mo><msub><mi>a</mi><mi>j</mi></msub><mo>+</mo><msub><mi>b</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">a_i+b_l=a_j+b_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，考虑两数之和不会超过 2e7 ，我们只需要去重后双重循环枚举两个数组的数字，记录每个和数的一组解，如果遇到当前和数已经有解，则发现答案；</p><p>存在一种特殊情况，唯一解即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>j</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>k</mi></msub><mo>=</mo><msub><mi>b</mi><mi>l</mi></msub></mrow><annotation encoding="application/x-tex">a_i=a_j,b_k=b_l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，在去重时会被舍弃掉，特判这种情况即可；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">1e7</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(maxn)</span>, <span class="hljs-title">b</span><span class="hljs-params">(maxn)</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mka</span><span class="hljs-params">(maxn, <span class="hljs-number">-1</span>)</span>, <span class="hljs-title">mkb</span><span class="hljs-params">(maxn, <span class="hljs-number">-1</span>)</span></span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; pa, pb;<br>vector&lt;array&lt;<span class="hljs-type">int</span>, 2&gt;&gt; <span class="hljs-built_in">su</span>(<span class="hljs-number">2</span> * maxn, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;);<br>pair&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; ans = &#123;&#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">if</span> (mka[a[i]] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            mka[a[i]] = i;<br>            pa.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ans.first.first = mka[a[i]];<br>            ans.first.second = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]);<br>        <span class="hljs-keyword">if</span> (mkb[b[i]] == <span class="hljs-number">-1</span>)<br>        &#123;<br>            mkb[b[i]] = i;<br>            pb.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ans.second.first = mkb[b[i]];<br>            ans.second.second = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ans.first.first != <span class="hljs-number">-1</span> &amp;&amp; ans.second.first != <span class="hljs-number">-1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, ans.first.first, ans.first.second, ans.second.first,<br>               ans.second.second);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : pa)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : pb)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (su[a[i] + b[j]][<span class="hljs-number">0</span>] == <span class="hljs-number">-1</span>)<br>            &#123;<br>                su[a[i] + b[j]] = &#123;i, j&#125;;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d %d&quot;</span>, su[a[i] + b[j]][<span class="hljs-number">0</span>], i, j, su[a[i] + b[j]][<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;-1\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/33195&quot;&gt;题集链接&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#f-shannon-switching-game&quot;&gt;</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="比赛与题集" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%AF%94%E8%B5%9B%E4%B8%8E%E9%A2%98%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2022牛客暑期多校训练营（加赛）（EGHJM）</title>
    <link href="https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E5%8A%A0%E8%B5%9B%EF%BC%89%EF%BC%88EGHJM%EF%BC%89/"/>
    <id>https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A5%EF%BC%88%E5%8A%A0%E8%B5%9B%EF%BC%89%EF%BC%88EGHJM%EF%BC%89/</id>
    <published>2022-08-19T13:34:25.000Z</published>
    <updated>2022-08-25T01:55:41.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/38727">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#e-everyone-is-bot">E Everyone is bot</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#g-good-red-string">G Good red-string</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#h-here-is-an-easy-problem-of-zero-chan">H Here is an Easy Problem of Zero-chan</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#j-jellyfish-and-its-dream">J Jellyfish and its dream</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#m-maimai-dx-2077">M Maimai DX 2077</a><br />*<ul><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li></ul></p><h2 id="e-everyone-is-bot"><a class="markdownIt-Anchor" href="#e-everyone-is-bot"></a> E Everyone is bot</h2><p>博弈论</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>考虑<code>n=10,p=3</code>：<br />假设前7人均选择复读，则第8,9,10人均不选择复读，因为此三人任意一人选择复读，另外两人可以在下一轮接下，该人即被禁言；<br />同理，若前4人均选择复读，则第5,6,7,8,9,10人均不选择复读，因为此六人任意一人选择复读，就会有两人跟随，该人即被禁言，到达上面一种情况；<br />进一步地，若第一人选择复读，那么另外9人均不会选择复读；</p><p>每种情况删去了p人，即最后可能拿到奖励的为前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">%</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">n\%p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94444em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">n</span><span class="mord">%</span><span class="mord mathdefault">p</span></span></span></span> 人，其余人均不敢复读；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1020</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> x;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)&#123;<br>            cin&gt;&gt;x;<br>            <span class="hljs-keyword">if</span>(i==j)&#123;<br>                a[i]=x;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=(n%k);i++)&#123;<br>        cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=(n%k)+<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cout&lt;&lt;<span class="hljs-number">0</span>&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-good-red-string"><a class="markdownIt-Anchor" href="#g-good-red-string"></a> G Good red-string</h2><p>贪心</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>与合法括号序列类似，标记cr,ce,cd为子串中字符r,e,d的个数；<br />对于任意i,j，应该满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>r</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo>⩾</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo>⩾</mo><mi>c</mi><mi>d</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>c</mi><mi>r</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>⩽</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>⩽</mo><mi>c</mi><mi>d</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>c</mi><mi>r</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>c</mi><mi>d</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>=</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">cr[1,i]\geqslant ce[1,i]\geqslant cd[1,i],cr[j,n]\leqslant ce[j,n]\leqslant cd[j,n],cr[1,n]=ce[1,n]=cd[1,n]=n/3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">3</span></span></span></span> ；</p><p>具体操作时，依照 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>r</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo>⩾</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>c</mi><mi>e</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo><mo>⩽</mo><mi>c</mi><mi>d</mi><mo stretchy="false">[</mo><mi>j</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">cr[1,i]\geqslant ce[1,i],ce[j,n]\leqslant cd[j,n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> 来优先分配<code>?</code>位，再将剩余<code>?</code>位向 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">n/3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">3</span></span></span></span> 靠拢；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string g;<br>        cin &gt;&gt; g;<br>        <span class="hljs-type">int</span> n = g.<span class="hljs-built_in">length</span>(), m = n / <span class="hljs-number">3</span>, c = <span class="hljs-number">0</span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; stk;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>                ++c;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                --c;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;?&#x27;</span>)<br>                stk.<span class="hljs-built_in">push</span>(i);<br>            <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (!stk.<span class="hljs-built_in">empty</span>())<br>                &#123;<br>                    g[stk.<span class="hljs-built_in">top</span>()] = <span class="hljs-string">&#x27;e&#x27;</span>, stk.<span class="hljs-built_in">pop</span>(), --c;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        c = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!stk.<span class="hljs-built_in">empty</span>())<br>            stk.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;r&#x27;</span>)<br>                ++c;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                --c;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;?&#x27;</span>)<br>                stk.<span class="hljs-built_in">push</span>(i);<br>            <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (!stk.<span class="hljs-built_in">empty</span>())<br>                &#123;<br>                    g[stk.<span class="hljs-built_in">top</span>()] = <span class="hljs-string">&#x27;e&#x27;</span>, stk.<span class="hljs-built_in">pop</span>(), --c;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> cr = <span class="hljs-number">0</span>, ce = <span class="hljs-number">0</span>, cd = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;r&#x27;</span>)<br>                ++cr;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                ++ce;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>                ++cd;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;?&#x27;</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (cr &lt; m)<br>                &#123;<br>                    g[i] = <span class="hljs-string">&#x27;r&#x27;</span>, ++cr;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ce &lt; m)<br>                &#123;<br>                    g[i] = <span class="hljs-string">&#x27;e&#x27;</span>, ++ce;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cd &lt; m)<br>                &#123;<br>                    g[i] = <span class="hljs-string">&#x27;d&#x27;</span>, ++cd;<br>                &#125;<br>            &#125;<br>        &#125;<br>        cr = <span class="hljs-number">0</span>, ce = <span class="hljs-number">0</span>, cd = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;r&#x27;</span>)<br>                ++cr;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                ++ce;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>                ++cd;<br>            <span class="hljs-keyword">if</span> (!(cr &gt;= ce &amp;&amp; ce &gt;= cd))<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        cr = <span class="hljs-number">0</span>, ce = <span class="hljs-number">0</span>, cd = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;r&#x27;</span>)<br>                ++cr;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;e&#x27;</span>)<br>                ++ce;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[i] == <span class="hljs-string">&#x27;d&#x27;</span>)<br>                ++cd;<br>            <span class="hljs-keyword">if</span> (!(cr &lt;= ce &amp;&amp; ce &lt;= cd))<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-here-is-an-easy-problem-of-zero-chan"><a class="markdownIt-Anchor" href="#h-here-is-an-easy-problem-of-zero-chan"></a> H Here is an Easy Problem of Zero-chan</h2><p>LCA</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>l</mi><mi>c</mi><mi>a</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)= \prod_{i=1}^nlca(x,i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∏</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">c</span><span class="mord mathdefault">a</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span> ，给定 q 个 x ，输出每个 x 的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 中结尾0的个数；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>定义 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">cnt[x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 为以 x 为根的子树中节点个数；<br />考虑子树中的节点，对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的总贡献为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">cnt[x]x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mord mathdefault">x</span></span></span></span>；<br />考虑 x 的某个祖先节点 y,z ，满足z是y的父节点，<strong>在z子树中且不在y子树中的节点对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的总贡献为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>z</mi><mo stretchy="false">]</mo><mo>−</mo><mi>c</mi><mi>n</mi><mi>t</mi><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">(cnt[z]-cnt[y])z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span></strong>；</p><p>依此，我们可以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 复杂度内求出所有点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 的相关值；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>+<span class="hljs-number">7</span>;<br><span class="hljs-type">int</span> sz[N],five[N],two[N],fa[N],n,tot,head[N];<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br><span class="hljs-type">int</span> lg2,lg5;<br><span class="hljs-built_in">node</span>()&#123;lg2=lg5=<span class="hljs-number">0</span>;&#125;<br><span class="hljs-built_in">node</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<br>lg2 = x;<br>lg5 = y;<br>&#125;<br>node <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> node &amp;rhs)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">node</span>(lg2+rhs.lg2,lg5+rhs.lg5);<br>&#125;<br>node <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> node &amp;rhs)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">node</span>(lg2-rhs.lg2,lg5-rhs.lg5);<br>&#125;<br>node <span class="hljs-keyword">operator</span>*(<span class="hljs-type">int</span> rhs)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">node</span>(lg2*rhs,lg5*rhs);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">min</span>(lg2,lg5) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br>&#125;sum[N];<br><span class="hljs-function">node <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>node x = <span class="hljs-built_in">node</span>(two[u],five[u]);<br>node fx = <span class="hljs-built_in">node</span>(two[fa[u]],five[fa[u]]);<br><span class="hljs-keyword">return</span> (x-fx)*sz[u];<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span>&#123;<br><span class="hljs-type">int</span> to,nxt;<br>&#125;e[N&lt;&lt;<span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v)</span></span>&#123;<br>e[++tot].nxt = head[u];<br>head[u] = tot;<br>e[tot].to = v;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>sz[u] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[u];i;i=e[i].nxt)&#123;<br><span class="hljs-type">int</span> v = e[i].to;<br><span class="hljs-keyword">if</span>(v==fa[u])<span class="hljs-keyword">continue</span>;<br>fa[v] = u;<br><span class="hljs-built_in">dfs</span>(v);<br>sz[u] += sz[v];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>&#123;<br>sum[u] = sum[fa[u]] + <span class="hljs-built_in">calc</span>(u);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=head[u];i;i=e[i].nxt)&#123;<br><span class="hljs-type">int</span> v = e[i].to;<br><span class="hljs-keyword">if</span>(v==fa[u])<span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">dfs2</span>(v);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> T;<br>cin &gt;&gt; n &gt;&gt; T;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)&#123;<br><span class="hljs-type">int</span> x = i;<br><span class="hljs-keyword">while</span>(~x&amp;<span class="hljs-number">1</span>)two[i] ++, x &gt;&gt;= <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(x%<span class="hljs-number">5</span>==<span class="hljs-number">0</span>)five[i] ++,x /= <span class="hljs-number">5</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;++i)&#123;<br><span class="hljs-type">int</span> u,v;cin &gt;&gt; u &gt;&gt; v;<br><span class="hljs-built_in">addEdge</span>(u,v);<br><span class="hljs-built_in">addEdge</span>(v,u);<br>&#125;<br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">dfs2</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">while</span>(T--)&#123;<br><span class="hljs-type">int</span> u;cin &gt;&gt; u;<br>sum[u].<span class="hljs-built_in">print</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-jellyfish-and-its-dream"><a class="markdownIt-Anchor" href="#j-jellyfish-and-its-dream"></a> J Jellyfish and its dream</h2><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>考虑循环序列中相邻两数的情况：相等对（<code>00</code>,<code>11</code>,<code>22</code>），上升对（<code>01</code>,<code>12</code>,<code>20</code>）,上升对（<code>02</code>,<code>10</code>,<code>21</code>），我们的最终目标是将所有部分变为相等对；</p><p>单个上升对可以通过一次变换变为相等对，同时使该对左侧的下降对变为相等对，在这个过程中，上升对和下降对一一对应；<br />如果该上升对左侧也是上升对，经操作后，左侧变为下降对；<br />如果左侧是相等对，则可以直接略过，认为整个相等对均变换为上升对的右侧数字；</p><p>在上述过程中，如果仅存在上升对和相等对，则可以均变为相等对，如果存在下降对，则上升对数量需要大于等于下降对；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">1000006</span>],b[<span class="hljs-number">1000006</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        cin &gt;&gt; a[i];<br>    b[<span class="hljs-number">0</span>] = (a[<span class="hljs-number">0</span>] - a[n - <span class="hljs-number">1</span>] + <span class="hljs-number">3</span>) % <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        b[i] = (a[i] - a[i - <span class="hljs-number">1</span>] + <span class="hljs-number">3</span>) % <span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> c1 = <span class="hljs-number">0</span>, c2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b[i] == <span class="hljs-number">1</span>)<br>            c1++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b[i] == <span class="hljs-number">2</span>)<br>            c2++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (c1 &gt;= c2)<br>        cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">else</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="m-maimai-dx-2077"><a class="markdownIt-Anchor" href="#m-maimai-dx-2077"></a> M Maimai DX 2077</h2><p>模拟</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><p>注意对0的处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">double</span> mk[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>] = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1.6</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2.4</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2.5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><span class="hljs-type">double</span> mke[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> tmp, sum = <span class="hljs-number">0</span>, sm3 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> a, b, a0, b0;<br>    a = b = a0 = b0 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> sm = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">5</span>; j++)<br>        &#123;<br>            cin &gt;&gt; tmp;<br>            sm += tmp;<br>            a0 += tmp * mk[i][j];<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)<br>                b0 += tmp * mke[j];<br>        &#125;<br>        a += sm * mk[i][<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)<br>            b += sm * mke[<span class="hljs-number">0</span>], sm3 += sm;<br>        sum += sm;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12lf&quot;</span>, ((sum != <span class="hljs-number">0</span>) ? a0 / a * <span class="hljs-number">100</span> : <span class="hljs-number">100</span>) + ((sm3 != <span class="hljs-number">0</span>) ? b0 / b : <span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/38727&quot;&gt;题集链接&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#e-everyone-is-bot&quot;&gt;E Every</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="比赛与题集" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%AF%94%E8%B5%9B%E4%B8%8E%E9%A2%98%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2022牛客暑期多校训练营9（ABEG）</title>
    <link href="https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A59%EF%BC%88ABEG%EF%BC%89/"/>
    <id>https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A59%EF%BC%88ABEG%EF%BC%89/</id>
    <published>2022-08-16T08:55:37.000Z</published>
    <updated>2022-08-25T02:08:22.014Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33194">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#a-car-show">A Car Show</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-two-frogs">B Two Frogs</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-2">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#e-longest-increasing-subsequence">E Longest Increasing Subsequence</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-3">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#g-magic-spells">G Magic Spells</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-4">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li></ul></p><h2 id="a-car-show"><a class="markdownIt-Anchor" href="#a-car-show"></a> A Car Show</h2><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>给定长度为n，由数字1~m组成的数列，问包含全部m个数字的子串个数；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>定位每一个左端点，向右寻找最近的符合要求的右界，得到最小子串，右界从此处开始直至序列末尾均合法，依此更新答案；</p><p>更新答案后左界左移，再次执行以上过程；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> a[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">1</span>, ct = <span class="hljs-number">0</span>;<br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br>    <span class="hljs-keyword">for</span> (; r &lt;= n; r++)<br>    &#123;<br>        mp[a[r]]++;<br>        <span class="hljs-keyword">if</span> (mp[a[r]] == <span class="hljs-number">1</span>)<br>        &#123;<br>            ct++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (ct == m &amp;&amp; l &lt;= r)<br>        &#123;<br>            ans += n - r + <span class="hljs-number">1</span>;<br>            mp[a[l]]--;<br>            <span class="hljs-keyword">if</span> (!mp[a[l]])<br>                ct--;<br>            l++;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-two-frogs"><a class="markdownIt-Anchor" href="#b-two-frogs"></a> B Two Frogs</h2><p>概率期望</p><h4 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h4><p>有n个荷叶排成一列，每个荷叶有属性值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，当青蛙在i号荷叶上时，下一步可以跳到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>i</mi><mo>+</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[i+1,i+a_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span> 号荷叶上，求两只青蛙从1号荷叶起经过相同次数的跳动，同时到达n号荷叶的概率；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>考虑 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">q[m][x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> 为跳m次到达x号的概率，则有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>i</mi><mo>+</mo><mn>1</mn><mo>⩽</mo><mi>x</mi><mo>⩽</mo><mi>i</mi><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></msub><mfrac><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">q[m][x]=\sum_{i+1\leqslant x\leqslant i+a[i]}\frac {q[m-1][i]}{a[i]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.22528999999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mrel amsrm mtight">⩽</span><span class="mord mathdefault mtight">x</span><span class="mrel amsrm mtight">⩽</span><span class="mord mathdefault mtight">i</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">a</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.47471em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">]</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ；<br />答案即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mi>q</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><msup><mo stretchy="false">]</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n-1}q[i][n]^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.253718em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>；</p><p>考虑计算过程，由于对于每一个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">q[m][x]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span></span></span></span> ，更新的是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>x</mi><mo>+</mo><mi>i</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>i</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">q[m][x+i],i\in[1,a[x]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">x</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span> 连续区间的值，我们可以用差分优化这个操作；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">998244353</span>;<br>ll q[<span class="hljs-number">8003</span>][<span class="hljs-number">8003</span>];<br><span class="hljs-type">int</span> exs[<span class="hljs-number">8003</span>];<br>ll inv[<span class="hljs-number">8003</span>];<br><span class="hljs-type">int</span> a[<span class="hljs-number">8003</span>];<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">Q_power</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b = M - <span class="hljs-number">2</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (b)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            res = res * a % M;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>        a = a * a % M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>    &#123;<br>        inv[j] = <span class="hljs-built_in">Q_power</span>(j);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        exs[i] = <span class="hljs-number">10000</span>;<br>    exs[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= a[i]; j++)<br>        &#123;<br>            exs[i + j] = <span class="hljs-built_in">min</span>(exs[i + j], exs[i] + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    q[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = exs[i]; j &lt;= i - <span class="hljs-number">1</span>; j++)<br>        &#123;<br>            q[i][j] = q[i - <span class="hljs-number">1</span>][j] + q[i][j];<br>            q[i][j] %= M;<br>            ll p = q[i][j] * inv[a[i]];<br>            q[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = (q[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] + p) % M;<br>            q[i + a[i] + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] = (q[i + a[i] + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>] - p) % M;<br>        &#125;<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = exs[n]; i &lt; n; i++)<br>        ans += q[n][i] * q[n][i], ans %= M;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="e-longest-increasing-subsequence"><a class="markdownIt-Anchor" href="#e-longest-increasing-subsequence"></a> E Longest Increasing Subsequence</h2><p>构造</p><h4 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h4><p>构造长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>⩽</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">n\leqslant100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span></span></span></span> 的排序，使得最长上升子序列恰好为m个；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>将m进行二进制拆分，考虑以下构造方法：</p><p><img src="https://s2.loli.net/2022/08/25/wL1eNZp4rCfjMnP.png" alt="image.png" /></p><p><img src="https://s2.loli.net/2022/08/25/TFfv9YqmLcG4HuV.png" alt="image.png" /></p><p><img src="https://s2.loli.net/2022/08/25/W7fKIT9AhlFHRzi.png" alt="image.png" /></p><p>对于每层最右侧的点，其向下的支是累计下层计数，向左的支是累计本层计数；</p><p>依照此策略，可以在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">3\log(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的长度内构造完成；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> ct = <span class="hljs-number">1</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">r</span><span class="hljs-params">(<span class="hljs-number">90</span>)</span></span>;<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((n &gt;&gt; i) &amp; <span class="hljs-number">1</span>)<br>            &#123;<br>                r[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>] = ct++;<br>                r[<span class="hljs-number">60</span> + i] = ct++;<br>                r[<span class="hljs-number">2</span> * i] = ct++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                r[<span class="hljs-number">60</span> + i] = ct++;<br>                r[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>] = ct++;<br>                r[<span class="hljs-number">2</span> * i] = ct++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;90\n&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">90</span>;i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d%c&quot;</span>,r[i],<span class="hljs-string">&quot; \n&quot;</span>[i == <span class="hljs-number">89</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-magic-spells"><a class="markdownIt-Anchor" href="#g-magic-spells"></a> G Magic Spells</h2><p>manacher，二分</p><h4 id="题意-4"><a class="markdownIt-Anchor" href="#题意-4"></a> 题意</h4><p>给定k个字符串，找出在每个串都出现的回文串数量；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>首先考虑马拉车算法，找出所有字符串进行统计，使用map将字符串从哈希值映射到最近出现时间（1~k）；</p><p>果不其然地T了，接下来考虑优化：</p><p>首先进行剪枝，在固定圆心从大到小遍历半径的过程中，如果发现某串最近出现时间已经是当前，那么该圆心下半径更小的串就不用考虑了；</p><p>依然T，继续优化：</p><p>考虑二分，对于固定圆心从大到小遍历半径的过程中，存在分界半径i，半径小于i时最近出现时间均是上串，大于i时最近出现时间均早于上串，以此二分快速确定有效半径；</p><p>单哈希可以过；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">3e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">char</span> s[maxn * <span class="hljs-number">2</span>];<br>string str;<br><span class="hljs-type">int</span> d[maxn * <span class="hljs-number">2</span>], len;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getstr</span><span class="hljs-params">()</span> </span>&#123;<br>   str.<span class="hljs-built_in">clear</span>();<br>   <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>   str += <span class="hljs-string">&#x27;&#123;&#x27;</span>;<br>   k++;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>      str += <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>      str += s[i];<br>      k += <span class="hljs-number">2</span>;<br>   &#125;<br>   str += <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>   k++;<br>   len = k;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">manacher</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>, id;<br>   <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>      <span class="hljs-keyword">if</span> (i &lt; mx)<br>         d[i] = <span class="hljs-built_in">min</span>(mx - i + <span class="hljs-number">1</span>, d[<span class="hljs-number">2</span> * id - i]);<br>      <span class="hljs-keyword">else</span><br>         d[i] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> (i + d[i] &lt;= str.<span class="hljs-built_in">size</span>() &amp;&amp; i - d[i] &gt;= <span class="hljs-number">0</span> &amp;&amp;<br>             str[i + d[i]] == str[i - d[i]])<br>         d[i]++;<br>      <span class="hljs-keyword">if</span> (d[i] + i - <span class="hljs-number">1</span> &gt; mx) &#123;<br>         mx = d[i] + i - <span class="hljs-number">1</span>;<br>         id = i;<br>         maxx = <span class="hljs-built_in">max</span>(maxx, d[i]);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> (maxx - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> MAGIC = <span class="hljs-number">1e12</span> + <span class="hljs-number">39</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> hsh[maxn * <span class="hljs-number">2</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>   hsh[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i != maxn * <span class="hljs-number">2</span>; i++) &#123;<br>      hsh[i] = hsh[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1013ll</span> % MAGIC;<br>   &#125;<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> str_hsh[maxn * <span class="hljs-number">2</span>];<br><span class="hljs-type">void</span> _hsh() &#123;<br>   str_hsh[<span class="hljs-number">0</span>] = str[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;_&#x27;</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i != str.<span class="hljs-built_in">length</span>(); i++) &#123;<br>      str_hsh[i] = (str_hsh[i - <span class="hljs-number">1</span>] * <span class="hljs-number">1013ll</span> + str[i] - <span class="hljs-string">&#x27;_&#x27;</span>) % MAGIC;<br>   &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">get_hash</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> str_hsh[r];<br>   <span class="hljs-keyword">auto</span> fna = str_hsh[r] -<br>              <span class="hljs-type">__int128_t</span>(<span class="hljs-number">1</span>) * str_hsh[l - <span class="hljs-number">1</span>] * hsh[r - l + <span class="hljs-number">1</span>] % MAGIC;<br>   <span class="hljs-keyword">if</span> (fna &lt; <span class="hljs-number">0</span>) fna += MAGIC;<br>   <span class="hljs-keyword">return</span> fna % MAGIC;<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> _len_hash(<span class="hljs-type">long</span> <span class="hljs-type">long</span> raw, <span class="hljs-type">int</span> len) &#123;<br>   <span class="hljs-keyword">return</span> raw * (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)<span class="hljs-number">3e5</span> + len;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> k;<br>   <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>   cin &gt;&gt; k;<br>   <span class="hljs-built_in">init</span>();<br>   unordered_map&lt;ll, <span class="hljs-type">int</span>&gt; mp;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> kki = <span class="hljs-number">0</span>; kki &lt; k; kki++) &#123;<br>      cin &gt;&gt; s;<br>      len = <span class="hljs-built_in">strlen</span>(s);<br>      <span class="hljs-built_in">getstr</span>();<br>      _hsh();<br>      <span class="hljs-built_in">manacher</span>();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>         <span class="hljs-comment">// printf(&quot;%c%d&quot;,str[i],d[i]);</span><br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = d[i]; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>            <span class="hljs-keyword">auto</span> hsh = <span class="hljs-built_in">get_hash</span>(i, i + j - <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">if</span> (mp[hsh] == kki + <span class="hljs-number">1</span>)<br>               <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[hsh] != kki) &#123;<br>               <span class="hljs-type">int</span> l = <span class="hljs-number">1</span>, r = j;<br><br>               <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>               <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>                  j = (l + r) / <span class="hljs-number">2</span>;<br>                  hsh = <span class="hljs-built_in">get_hash</span>(i, i + j - <span class="hljs-number">1</span>);<br>                  <span class="hljs-keyword">if</span> (mp[hsh] &lt; kki) &#123;<br>                     res = j;<br>                     r = j - <span class="hljs-number">1</span>;<br>                  &#125; <span class="hljs-keyword">else</span> &#123;<br>                     l = j + <span class="hljs-number">1</span>;<br>                  &#125;<br>               &#125;<br>               j = res;<br>               <span class="hljs-comment">// cerr &lt;&lt; &quot;IN binary &quot; &lt;&lt; j &lt;&lt; &#x27;\n&#x27;;</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[hsh] == kki) &#123;<br>               mp[hsh] = kki + <span class="hljs-number">1</span>;<br>               <span class="hljs-keyword">if</span> (mp[hsh] == k &amp;&amp;<br>                   !(str[i + j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;&#125;&#x27;</span> || str[i + j - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;&#123;&#x27;</span>))<br>                  ans++;<br>               <span class="hljs-comment">// break;</span><br>            &#125;<br><br>            <span class="hljs-comment">// cerr &lt;&lt; str.substr(i, j) &lt;&lt; &quot; &quot; &lt;&lt; hsh &lt;&lt; &quot; &quot; &lt;&lt;</span><br>            <span class="hljs-comment">// mp[hsh]</span><br>            <span class="hljs-comment">//      &lt;&lt; endl;</span><br><br>            <span class="hljs-comment">// printf(&quot;*%lld %d\n&quot;, mp[hsh],kki);</span><br>         &#125;<br>      &#125;<br>   &#125;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/33194&quot;&gt;题集链接&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#a-car-show&quot;&gt;A Car Show&lt;/a&gt;</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="比赛与题集" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%AF%94%E8%B5%9B%E4%B8%8E%E9%A2%98%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2022牛客暑期多校训练营8（DF）</title>
    <link href="https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A58%EF%BC%88DF%EF%BC%89/"/>
    <id>https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A58%EF%BC%88DF%EF%BC%89/</id>
    <published>2022-08-14T08:43:27.000Z</published>
    <updated>2022-08-25T01:56:55.456Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33193">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#d-poker-game-decision">D Poker Game: Decision</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#f-longest-common-subsequence">F Longest Common Subsequence</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li></ul></p><h2 id="d-poker-game-decision"><a class="markdownIt-Anchor" href="#d-poker-game-decision"></a> D Poker Game: Decision</h2><p>模拟</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>由于牌堆总数仅为6，所有情况也只有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>6</mn><mo stretchy="false">!</mo><mo>=</mo><mn>720</mn></mrow><annotation encoding="application/x-tex">6!=720</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">6</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">2</span><span class="mord">0</span></span></span></span> 种，可以枚举所有情况来进行判断；</p><p>对于当前情况，代码中使用 <code>mnn</code> 来代表此时操作者所有操作中的最优情况（此判断中赢为1），对来自下一层的返回值进行取负处理；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; Alice[<span class="hljs-number">5</span>], Bob[<span class="hljs-number">5</span>];<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; dui[<span class="hljs-number">6</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">6</span>];<br><br><span class="hljs-comment">// &#123;color , number&#125;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> color first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> number second</span><br><br>map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; cover_to = &#123;<br>    &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">14</span>&#125;, &#123;<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-number">13</span>&#125;, &#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-number">12</span>&#125;, &#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-number">11</span>&#125;, &#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-number">9</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-number">8</span>&#125;,  &#123;<span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-number">7</span>&#125;,  &#123;<span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-number">6</span>&#125;,  &#123;<span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-number">5</span>&#125;,  &#123;<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-number">4</span>&#125;,  &#123;<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">2</span>&#125;,  &#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">1</span>&#125;,  &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-number">2</span>&#125;,  &#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">3</span>&#125;,  &#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">4</span>&#125;,<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">judge</span><span class="hljs-params">(vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&amp; v)</span> </span>&#123;<br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),<br>        [](<span class="hljs-keyword">auto</span> a, <span class="hljs-keyword">auto</span> b) &#123; <span class="hljs-keyword">return</span> a.number &lt; b.number; &#125;);<br>   <span class="hljs-type">int</span> smc = <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span> &amp;&amp; smc; i++) &#123;<br>      <span class="hljs-keyword">if</span> (v[i].first != v[i - <span class="hljs-number">1</span>].first) smc = <span class="hljs-number">0</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (smc &amp;&amp; v[<span class="hljs-number">0</span>].second == <span class="hljs-number">10</span> &amp;&amp; v[<span class="hljs-number">1</span>].second == <span class="hljs-number">11</span> &amp;&amp;<br>       v[<span class="hljs-number">2</span>].second == <span class="hljs-number">12</span> &amp;&amp; v[<span class="hljs-number">3</span>].second == <span class="hljs-number">13</span> &amp;&amp; v[<span class="hljs-number">4</span>].second == <span class="hljs-number">14</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>   &#125;<br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; a, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; b) &#123;<br>      <span class="hljs-built_in">return</span> (a.second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> &lt; (b.second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span>;<br>   &#125;);<br>   <span class="hljs-keyword">if</span> (smc &amp;&amp; (v[<span class="hljs-number">1</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">0</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">2</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">1</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">3</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">2</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">4</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">3</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>   &#125;<br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),<br>        [](<span class="hljs-keyword">auto</span> a, <span class="hljs-keyword">auto</span> b) &#123; <span class="hljs-keyword">return</span> a.number &lt; b.number; &#125;);<br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">1</span>].second == v[<span class="hljs-number">2</span>].second &amp;&amp; v[<span class="hljs-number">2</span>].second == v[<span class="hljs-number">3</span>].second) &amp;&amp;<br>       (v[<span class="hljs-number">0</span>].second == v[<span class="hljs-number">1</span>].second || v[<span class="hljs-number">3</span>].second == v[<span class="hljs-number">4</span>].second)) &#123;<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">4</span>].number == v[<span class="hljs-number">3</span>].number) <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">0</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Full house</span><br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">0</span>].second == v[<span class="hljs-number">1</span>].second &amp;&amp; v[<span class="hljs-number">1</span>].second == v[<span class="hljs-number">2</span>].second &amp;&amp;<br>        v[<span class="hljs-number">3</span>].second == v[<span class="hljs-number">4</span>].second) ||<br>       (v[<span class="hljs-number">0</span>].second == v[<span class="hljs-number">1</span>].second &amp;&amp; v[<span class="hljs-number">2</span>].second == v[<span class="hljs-number">3</span>].second &amp;&amp;<br>        v[<span class="hljs-number">3</span>].second == v[<span class="hljs-number">4</span>].second)) &#123;<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">2</span>].number == v[<span class="hljs-number">4</span>].number) <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Flush</span><br>   <span class="hljs-keyword">if</span> (smc &amp;&amp; v[<span class="hljs-number">0</span>].second != v[<span class="hljs-number">1</span>].second &amp;&amp;<br>       v[<span class="hljs-number">1</span>].second != v[<span class="hljs-number">2</span>].second &amp;&amp; v[<span class="hljs-number">2</span>].second != v[<span class="hljs-number">3</span>].second &amp;&amp;<br>       v[<span class="hljs-number">3</span>].second != v[<span class="hljs-number">4</span>].second) &#123;<br>      <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Straight</span><br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; a, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; b) &#123;<br>      <span class="hljs-built_in">return</span> (a.second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> &lt; (b.second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span>;<br>   &#125;);<br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">1</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">0</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">2</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">1</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">3</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">2</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span> &amp;&amp;<br>       (v[<span class="hljs-number">4</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> == (v[<span class="hljs-number">3</span>].second - <span class="hljs-number">1</span>) % <span class="hljs-number">13</span> + <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>   &#125;<br>   <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(),<br>        [](<span class="hljs-keyword">auto</span> a, <span class="hljs-keyword">auto</span> b) &#123; <span class="hljs-keyword">return</span> a.number &lt; b.number; &#125;);<br>   &#123;<br>      <span class="hljs-type">bool</span> f = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>         <span class="hljs-keyword">if</span> (v[i].number == v[i - <span class="hljs-number">1</span>].number + <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">continue</span>;<br>         <span class="hljs-keyword">else</span><br>            f = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">if</span>(f) &#123;<br>         <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>() , v.<span class="hljs-built_in">end</span>());<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-comment">// Three of a kind</span><br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">0</span>].second == v[<span class="hljs-number">1</span>].second &amp;&amp; v[<span class="hljs-number">1</span>].second == v[<span class="hljs-number">2</span>].second)) &#123;<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">3</span>].number &lt; v[<span class="hljs-number">4</span>].number) <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">3</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">1</span>].second == v[<span class="hljs-number">2</span>].second &amp;&amp; v[<span class="hljs-number">2</span>].second == v[<span class="hljs-number">3</span>].second)) &#123;<br>      <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">0</span>], v[<span class="hljs-number">3</span>]);<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">3</span>].number &lt; v[<span class="hljs-number">4</span>].number) <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">3</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> ((v[<span class="hljs-number">2</span>].second == v[<span class="hljs-number">3</span>].second &amp;&amp; v[<span class="hljs-number">3</span>].second == v[<span class="hljs-number">4</span>].second)) &#123;<br>      <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-keyword">if</span> (v[<span class="hljs-number">3</span>].number &lt; v[<span class="hljs-number">4</span>].number) <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">3</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Two pairs</span><br>   <span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>   <span class="hljs-keyword">if</span> (v[<span class="hljs-number">0</span>].number == v[<span class="hljs-number">1</span>].number &amp;&amp; v[<span class="hljs-number">2</span>].number == v[<span class="hljs-number">3</span>].number)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>   <span class="hljs-keyword">if</span> (v[<span class="hljs-number">0</span>].number == v[<span class="hljs-number">1</span>].number &amp;&amp; v[<span class="hljs-number">3</span>].number == v[<span class="hljs-number">4</span>].number) &#123;<br>      <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">2</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (v[<span class="hljs-number">1</span>].number == v[<span class="hljs-number">2</span>].number &amp;&amp; v[<span class="hljs-number">3</span>].number == v[<span class="hljs-number">4</span>].number) &#123;<br>      <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">0</span>], v[<span class="hljs-number">2</span>]);<br>      <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">2</span>], v[<span class="hljs-number">4</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>   &#125;<br><br>   <span class="hljs-comment">// Pair</span><br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>      <span class="hljs-keyword">if</span> (v[i].number == v[i - <span class="hljs-number">1</span>].number) &#123;<br>         <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">0</span>], v[i - <span class="hljs-number">1</span>]);<br>         <span class="hljs-built_in">swap</span>(v[<span class="hljs-number">1</span>], v[i]);<br>         <span class="hljs-keyword">if</span>(v[<span class="hljs-number">2</span>].number&lt;v[<span class="hljs-number">3</span>].number)<span class="hljs-built_in">swap</span>(v[<span class="hljs-number">2</span>],v[<span class="hljs-number">3</span>]);<br>         <span class="hljs-keyword">if</span>(v[<span class="hljs-number">3</span>].number&lt;v[<span class="hljs-number">4</span>].number)<span class="hljs-built_in">swap</span>(v[<span class="hljs-number">3</span>],v[<span class="hljs-number">4</span>]);<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">check</span><span class="hljs-params">(vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; as, vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; bs)</span> </span>&#123;<br>   <span class="hljs-type">int</span> a = <span class="hljs-built_in">judge</span>(as), b = <span class="hljs-built_in">judge</span>(bs);<br>   <span class="hljs-keyword">if</span> (a &gt; b)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; b)<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (a == <span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>         <span class="hljs-keyword">if</span> (as[i].number &gt; bs[i].number)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (as[i].number &lt; bs[i].number)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> last = <span class="hljs-number">6</span>)</span> </span>&#123;<br>   <span class="hljs-keyword">if</span> (last == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-type">int</span> k = <span class="hljs-built_in">check</span>(vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;(<span class="hljs-built_in">begin</span>(Alice), <span class="hljs-built_in">end</span>(Alice)),<br>                    vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;(<span class="hljs-built_in">begin</span>(Bob), <span class="hljs-built_in">end</span>(Bob)));<br>      <span class="hljs-keyword">return</span> k;<br>   &#125;<br><br>   <span class="hljs-type">int</span> mnn = <span class="hljs-number">-1</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      <span class="hljs-keyword">if</span> (vis[i]) <span class="hljs-keyword">continue</span>;<br>      vis[i] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> (last % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>         Alice[<span class="hljs-number">5</span> - (last + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] = dui[i];<br>      <span class="hljs-keyword">else</span><br>         Bob[<span class="hljs-number">5</span> - (last + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] = dui[i];<br>      mnn = <span class="hljs-built_in">max</span>(-<span class="hljs-built_in">get</span>(last - <span class="hljs-number">1</span>), mnn);<br>      vis[i] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> (mnn == <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> mnn;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>      string s;<br>      cin &gt;&gt; s;<br>      Alice[i] = &#123;cover_to[s[<span class="hljs-number">1</span>]], cover_to[s[<span class="hljs-number">0</span>]]&#125;;<br>   &#125;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>      string s;<br>      cin &gt;&gt; s;<br>      Bob[i] = &#123;cover_to[s[<span class="hljs-number">1</span>]], cover_to[s[<span class="hljs-number">0</span>]]&#125;;<br>   &#125;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br>      string s;<br>      cin &gt;&gt; s;<br>      dui[i] = &#123;cover_to[s[<span class="hljs-number">1</span>]], cover_to[s[<span class="hljs-number">0</span>]]&#125;;<br>   &#125;<br><br>   <span class="hljs-keyword">auto</span> ans = <span class="hljs-built_in">get</span>();<br><br>   <span class="hljs-comment">// cout &lt;&lt; ans &lt;&lt; &#x27;\n&#x27;;</span><br><br>   <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">1</span>)<br>      cout &lt;&lt; <span class="hljs-string">&quot;Alice\n&quot;</span>;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans == <span class="hljs-number">0</span>)<br>      cout &lt;&lt; <span class="hljs-string">&quot;Draw\n&quot;</span>;<br>   <span class="hljs-keyword">else</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;Bob\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> t;<br>   cin &gt;&gt; t;<br><br>   <span class="hljs-keyword">while</span> (t--) <span class="hljs-built_in">solve</span>();<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-longest-common-subsequence"><a class="markdownIt-Anchor" href="#f-longest-common-subsequence"></a> F Longest Common Subsequence</h2><p>数学</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>给出两个数列长度和随机数生成方式，求按要求生成两数列后，两数列的最长公共子序列；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>介于数列长度非常大（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi>e</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">1e6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">e</span><span class="mord">6</span></span></span></span>）通常的DP方法复杂度不可接受；</p><p>我们考虑数列的生成方式：由于在生成过程中，一个数的取值只与上一个数有关，那么在这两个序列中，只要有一位相同，那么接下来的部分均相同；</p><p>我们只需要记录下每个数字在序列n中第一次出现的下标，如果在m中再次出现，我们便可以计算出以其起始的最长公共子序列长度，并更新答案；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t, n, m, p, x, a, b, c;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld%lld%lld%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;p, &amp;x, &amp;a, &amp;b, &amp;c);<br>        unordered_map&lt;ll, <span class="hljs-type">int</span>&gt; mp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            x = a * x % p * x % p + b * x % p + c;<br>            x %= p;<br>            <span class="hljs-keyword">if</span> (!mp[x])<br>                mp[x] = i;<br>        &#125;<br>        ll ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)<br>        &#123;<br>            x = a * x % p * x % p + b * x % p + c;<br>            x %= p;<br>            <span class="hljs-keyword">if</span> (mp[x])<br>            &#123;<br>                ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">min</span>(n - mp[x] + <span class="hljs-number">1</span>, m - i + <span class="hljs-number">1</span>));<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/33193&quot;&gt;题集链接&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#d-poker-game-decision&quot;&gt;D P</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="比赛与题集" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%AF%94%E8%B5%9B%E4%B8%8E%E9%A2%98%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2022牛客暑期多校训练营7（BCFGJ）</title>
    <link href="https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A57%EF%BC%88BCFGJ%EF%BC%89/"/>
    <id>https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A57%EF%BC%88BCFGJ%EF%BC%89/</id>
    <published>2022-08-10T10:19:25.000Z</published>
    <updated>2022-08-25T01:56:45.026Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33192">题集链接</a>；</p><p><a href="https://www.bilibili.com/video/BV1ev4y1F75d">视频题解</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#b-rotate-sum-3">B Rotate Sum 3</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#c-constructive-problems-never-die">C Constructive Problems Never Die</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-2">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#f-candies">F Candies</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-3">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#g-regular-expression">G Regular Expression</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-4">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#j-melborp-elcissalc">J Melborp Elcissalc</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-5">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li></ul></p><h2 id="b-rotate-sum-3"><a class="markdownIt-Anchor" href="#b-rotate-sum-3"></a> B Rotate Sum 3</h2><p>计算几何</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>给出一个凸包，使其绕对称轴旋转，求其扫过的体积；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>分类讨论：</p><ol><li>若没有对称轴，则不存在体积；</li><li>若仅有一条对称轴，则按照旋转体求体积，为了避免被long double卡精度，可以将凸包形成的旋转体切成若干圆台，累加体积；</li><li>若有大于等于2条对称轴，则其可以旋转为一个球，其半径为所有点与重心的距离的最大值；</li></ol><p>对于第三种情况，由于其具有多条对称轴，重心可以通过坐标累加求平均值来得出；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-8</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sign</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// 符号函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(x) &lt; eps)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    ll x, y;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">double</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> b = <span class="hljs-number">0</span>) &#123; x = a, y = b; &#125;<br>    Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x + a.x, y + a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x - a.x, y - a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x * a, y * a); &#125;<br>    Point <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x / a, y / a); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> !<span class="hljs-built_in">sign</span>(x - a.x) &amp;&amp; !<span class="hljs-built_in">sign</span>(y - a.y); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> (<span class="hljs-built_in">fabs</span>(x - a.x) &lt; eps) ? (y &lt; a.y) : (x &lt; a.x); &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Line</span><br>&#123;<br>    Point a, v;<br>    <span class="hljs-built_in">Line</span>(Point x = <span class="hljs-built_in">Point</span>(), Point y = <span class="hljs-built_in">Point</span>()) &#123; a = x, v = y; &#125;<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dots_num = <span class="hljs-number">100005</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Poly</span><br>&#123;<br>    <span class="hljs-type">int</span> num;<br>    Point dots[dots_num];<br>    <span class="hljs-built_in">Poly</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>) &#123; num = x; &#125;<br>&#125;;<br><span class="hljs-function">ll <span class="hljs-title">dot</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.x + a.y * b.y; &#125;<br><span class="hljs-function">ll <span class="hljs-title">cross</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.y - b.x * a.y; &#125;<br><span class="hljs-function">ll <span class="hljs-title">get_length2</span><span class="hljs-params">(Point a)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(<span class="hljs-built_in">dot</span>(a, a)); &#125;<br><span class="hljs-function">ll <span class="hljs-title">polygon_square2</span><span class="hljs-params">(Poly m)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m.num; i++)<br>    &#123;<br>        ans += <span class="hljs-built_in">cross</span>(m.dots[i], m.dots[(i + <span class="hljs-number">1</span>) % m.num]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(ans);<br>&#125;<br><span class="hljs-type">int</span> pos;<br><br><span class="hljs-type">int</span> d[<span class="hljs-number">4</span> * dots_num];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">manacher</span><span class="hljs-params">(Poly v)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;pair&lt;ll, pair&lt;Point, Point&gt;&gt;&gt; str;<br>    <span class="hljs-type">int</span> axiss = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v.num; i++)<br>    &#123;<br>        str.<span class="hljs-built_in">push_back</span>(<br>            <span class="hljs-built_in">make_pair</span>(<span class="hljs-built_in">get_length2</span>(v.dots[(i - <span class="hljs-number">1</span> + v.num) % v.num] - v.dots[(i + <span class="hljs-number">1</span>) % v.num]),<br>                      <span class="hljs-built_in">make_pair</span>(v.dots[(i - <span class="hljs-number">1</span> + v.num) % v.num], v.dots[(i + <span class="hljs-number">1</span>) % v.num])));<br>        str.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-built_in">get_length2</span>(v.dots[i] - v.dots[(i + <span class="hljs-number">1</span>) % v.num]),<br>                                <span class="hljs-built_in">make_pair</span>(v.dots[i], v.dots[(i + <span class="hljs-number">1</span>) % v.num])));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v.num &lt;&lt; <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        str.<span class="hljs-built_in">push_back</span>(str[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>, id; <span class="hljs-comment">// mx为最右边，id为中心点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; mx)<br>            d[i] = <span class="hljs-built_in">min</span>(mx - i + <span class="hljs-number">1</span>, d[<span class="hljs-number">2</span> * id - i]); <span class="hljs-comment">//判断当前点超没超过mx</span><br>        <span class="hljs-keyword">else</span><br>            d[i] = <span class="hljs-number">1</span>; <span class="hljs-comment">//超过了就让他等于1，之后再进行查找</span><br>                      <span class="hljs-comment">// if (i + d[i] - 1 &gt;= mx) //实际操作中并不需要特判</span><br>        <span class="hljs-keyword">while</span> (i + d[i] &lt;= str.<span class="hljs-built_in">size</span>() &amp;&amp; i - d[i] &gt;= <span class="hljs-number">0</span> &amp;&amp;<br>               !<span class="hljs-built_in">sign</span>(str[i + d[i]].first - str[i - d[i]].first))<br>            d[i]++; <span class="hljs-comment">//判断当前点是不是最长回文子串，不断的向右扩展</span><br>        <span class="hljs-keyword">if</span> (d[i] + i - <span class="hljs-number">1</span> &gt; mx)<br>        &#123; <span class="hljs-comment">//更新mx</span><br>            mx = d[i] + i - <span class="hljs-number">1</span>;<br>            id = i; <span class="hljs-comment">//更新中间点</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (i &gt;= v.num &amp;&amp; i &lt; <span class="hljs-number">2</span> * v.num &amp;&amp; <span class="hljs-number">1</span> + <span class="hljs-number">2</span> * (d[i] - <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">2</span> * v.num)<br>            axiss++, pos = i -v.num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> axiss;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">distance_to_line</span><span class="hljs-params">(Point p, Line m)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">cross</span>(p - m.a, m.v) / <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">get_length2</span>(m.v)));<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">polygon_center</span><span class="hljs-params">(Poly m, Line ml)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function">Point <span class="hljs-title">ans</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span></span>;<br>    pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; mp;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">polygon_square2</span>(m)) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m.num; i++)<br>    &#123;<br>        ans =<br>            ans + (m.dots[i] + m.dots[(i + <span class="hljs-number">1</span>) % m.num]) * <span class="hljs-built_in">cross</span>(m.dots[i], m.dots[(i + <span class="hljs-number">1</span>) % m.num]);<br>    &#125;<br>    mp.first = ans.x / <span class="hljs-number">3.0</span> / (<span class="hljs-built_in">polygon_square2</span>(m));<br>    mp.second = ans.y / <span class="hljs-number">3.0</span> / (<span class="hljs-built_in">polygon_square2</span>(m));<br>    pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; tmp = &#123;mp.first - ml.a.x, mp.second - ml.a.y&#125;;<br>    <span class="hljs-type">double</span> dis = <span class="hljs-built_in">fabs</span>((tmp.first * ml.v.y - ml.v.x * tmp.second) / <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">get_length2</span>(ml.v)));<br>    <span class="hljs-keyword">return</span> dis;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    Poly a = <span class="hljs-built_in">Poly</span>(n), h = <span class="hljs-built_in">Poly</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;a.dots[i].x, &amp;a.dots[i].y);<br>    &#125;<br>    <span class="hljs-type">int</span> as = <span class="hljs-built_in">manacher</span>(a);<br>    <span class="hljs-comment">// cout &lt;&lt; as &lt;&lt; endl;</span><br>    <span class="hljs-keyword">if</span> (as == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (as == <span class="hljs-number">1</span>)<br>    &#123;<br>        vector&lt;Point&gt; u;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a.num; i++)<br>        &#123;<br>            u.<span class="hljs-built_in">push_back</span>(a.dots[i] + a.dots[i]);<br>            u.<span class="hljs-built_in">push_back</span>(a.dots[i] + a.dots[(i + <span class="hljs-number">1</span>) % a.num]);<br>        &#125;<br>        <span class="hljs-comment">// u[pos] 为对称轴的上的点</span><br>        Point lp = u[(pos + a.num) % (<span class="hljs-number">2</span> * a.num)], lv = lp - u[pos];<br>        <span class="hljs-type">int</span> l = (pos - <span class="hljs-number">1</span> + (<span class="hljs-number">2</span> * a.num)) % (<span class="hljs-number">2</span> * a.num), r = (pos + <span class="hljs-number">1</span>) % (<span class="hljs-number">2</span> * a.num);<br>        <span class="hljs-type">long</span> <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>, k2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (; l != r; l = (l - <span class="hljs-number">1</span> + (<span class="hljs-number">2</span> * a.num)) % (<span class="hljs-number">2</span> * a.num), r = (r + <span class="hljs-number">1</span>) % (<span class="hljs-number">2</span> * a.num))<br>        &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">double</span> k1 = <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">get_length2</span>(u[l] - u[r])) / <span class="hljs-number">2</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-type">double</span> h = <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">dot</span>(u[r] - u[(r - <span class="hljs-number">1</span> + (<span class="hljs-number">2</span> * a.num)) % (<span class="hljs-number">2</span> * a.num)], lv));<br>            ans += h * (k1 * k1 + k2 * k2 + k1 * k2);<br>            k2 = k1;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12Lf&quot;</span>, PI * ans / <span class="hljs-number">24</span> / <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">get_length2</span>(lv)));<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Point m = <span class="hljs-built_in">Point</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            m = m + a.dots[i];<br>        &#125;<br>        __int128 r = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            r = <span class="hljs-built_in">max</span>(r, (__int128)(m.x - n * a.dots[i].x) * (m.x - n * a.dots[i].x) + (__int128)(m.y - n * a.dots[i].y) * (m.y - n * a.dots[i].y));<br>        &#125;<br>        <span class="hljs-comment">// cout &lt;&lt; r &lt;&lt; endl;</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.12Lf&quot;</span>, (<span class="hljs-type">long</span> <span class="hljs-type">double</span>)<span class="hljs-number">4.0</span> / <span class="hljs-number">3</span> * PI * <span class="hljs-built_in">sqrtl</span>(r) / n * r / n / n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-constructive-problems-never-die"><a class="markdownIt-Anchor" href="#c-constructive-problems-never-die"></a> C Constructive Problems Never Die</h2><p>构造</p><h4 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h4><p>给定一个长度为 n 的序列，要求构造一个等长的排列，使得排列每一位都与序列的对应位不同；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>默认排列为1~n，顺次处理每一位，如果此位与序列对应位相同，则将此位与最后一位对换；</p><p>对于最后一位，如果与序列对应位相同，则向前寻找合适的位来对换，若寻找不到，则认为此情况无解；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> b[<span class="hljs-number">100005</span>], a[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        <span class="hljs-type">int</span> n, f = <span class="hljs-number">1</span>;<br>        cin &gt;&gt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i]), a[i] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>            <span class="hljs-keyword">if</span> (b[i] == a[i])<br>                <span class="hljs-built_in">swap</span>(a[i], a[i + <span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">if</span> (a[n] == b[n])<br>        &#123;<br>            <span class="hljs-type">int</span> i = n;<br>            <span class="hljs-keyword">while</span> (b[i] == a[n] &amp;&amp; i &gt;= <span class="hljs-number">1</span>)<br>                i--;<br>            <span class="hljs-keyword">if</span> (i)<br>                <span class="hljs-built_in">swap</span>(a[i], a[n]);<br>            <span class="hljs-keyword">else</span><br>                f = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, a[i]);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-candies"><a class="markdownIt-Anchor" href="#f-candies"></a> F Candies</h2><p>数据结构、贪心</p><h4 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h4><p>给出一个长度为n的循环序列和数字x，若序列中相邻的两位相同或和为x，则删去这两位，与这两位相邻的两位变得相邻；求最多删去多少次；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>考虑贪心维护双向链表暴力做，赛时并没有发现可以卡掉贪心策略或将其复杂度卡至 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的情况；<br />注意判断在双向链表过短时的处理方式；</p><p>也可以将所有满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>&lt;</mo><msub><mi>a</mi><mi>i</mi></msub><mo>⩽</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">x/2&lt;a_i\leqslant x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.78667em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> 的数字处理成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x-a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，之后使用栈来依据相等判据维护，最后处理栈顶和栈底是否可以消除；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><p>下面是第一种</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    ll a;<br>    <span class="hljs-type">int</span> lst, nxt;<br>&#125; lk[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n, x, ct = <span class="hljs-number">0</span>;<br>    cin &gt;&gt; n &gt;&gt; x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;lk[i].a);<br>        lk[i].nxt = (i + <span class="hljs-number">1</span>) % n;<br>        lk[i].lst = (i - <span class="hljs-number">1</span> + n) % n;<br>    &#125;<br>    <span class="hljs-type">int</span> nw = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n - <span class="hljs-number">2</span> * ct &lt;= <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> f = <span class="hljs-number">0</span>, ctt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (ctt / <span class="hljs-number">2</span> &lt;= n - <span class="hljs-number">2</span> * ct)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (lk[nw].a == lk[lk[nw].nxt].a || lk[nw].a + lk[lk[nw].nxt].a == x)<br>            &#123;<br>                <span class="hljs-comment">// printf(&quot;%d %d %d*\n&quot;,nw,lk[nw].a,lk[lk[nw].nxt].a);</span><br>                nw = lk[nw].lst;<br>                lk[nw].nxt = lk[lk[lk[nw].nxt].nxt].nxt;<br>                <span class="hljs-type">int</span> tmp = lk[nw].nxt;<br>                lk[tmp].lst = nw;<br>                ct++;<br>                f++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-comment">// printf(&quot;%d*\n&quot;,nw);</span><br>                nw = lk[nw].nxt;<br>            &#125;<br>            ctt++;<br>            <span class="hljs-comment">// nw%=n;</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (!f)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    cout &lt;&lt; ct;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-regular-expression"><a class="markdownIt-Anchor" href="#g-regular-expression"></a> G Regular Expression</h2><h4 id="题意-4"><a class="markdownIt-Anchor" href="#题意-4"></a> 题意</h4><p>依照题目中给出的正则表达式规则，对于每个题给串找出最短的、全匹配的正则表达式长度，和最短长度下的表达式数目；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>我们发现表达式 <code>.*</code> 即可以表示任意串，所以表达式长度不会超过2；</p><p>对于长度为1的串，其正则表达式最短长度为1，2种情况为 <code>a</code> <code>.</code>；<br />对于长度为2的串，如果每位相同，则最短长度为2，8种情况为<code>aa</code> <code>a.</code> <code>.a</code> <code>a*</code> <code>a+</code> <code>..</code> <code>.*</code> <code>.+</code>；<br />对于长度为2的串，如果每位不同，则最短长度是2，6种情况为<code>ab</code> <code>a.</code> <code>.b</code> <code>..</code> <code>.*</code> <code>.+</code>；<br />对于长度大于等于3的串，如果每位相同，则最短长度为2，4种情况为<code>a*</code> <code>a+</code> <code>.*</code> <code>.+</code>；<br />对于长度大于等于3的串，如果不满足每位相同，则最短长度为2，2种情况为<code>.*</code> <code>.+</code>；<br />（上述a,b均仅为示意）</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-type">int</span> t ; cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span>(t--) &#123;<br>        string s ; cin &gt;&gt; s;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">length</span>() == <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;1 2\n&quot;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125; <br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">length</span>() == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>] == s[<span class="hljs-number">1</span>]) &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;2 8\n&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> cout &lt;&lt; <span class="hljs-string">&quot;2 6\n&quot;</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">bool</span> f = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span> ; i != s.<span class="hljs-built_in">length</span>() ; i ++ ) &#123;<br>            <span class="hljs-keyword">if</span>(s[i] == s[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            f = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">if</span>(f) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;2 4\n&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;2 2\n&quot;</span>;<br>        &#125;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-melborp-elcissalc"><a class="markdownIt-Anchor" href="#j-melborp-elcissalc"></a> J Melborp Elcissalc</h2><p>数学，DP</p><h4 id="题意-5"><a class="markdownIt-Anchor" href="#题意-5"></a> 题意</h4><p>定义由0~k-1数字组成的序列的k意义下好度为该序列所有子序列中，子序列和在k意义下与0同余的数量；求长度为n的序列中k意义下好度为t的序列个数；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>我们将序列转换成模k前缀和，我们定义<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">c[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span>为数字i在模k前缀和中出现的次数；<br />我们发现该序列的好度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msubsup><mi>C</mi><mrow><mi>c</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sum_{i=0}^{k-1}C_{c[i]}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4860079999999998em;vertical-align:-0.49699999999999994em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.378em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mopen mtight">[</span><span class="mord mathdefault mtight">i</span><span class="mclose mtight">]</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.49699999999999994em;"><span></span></span></span></span></span></span></span></span></span>；<br />也就是说每一个模k前缀和序列都对应着一个原始序列，我们只需要统计模k前缀和序列中符合条件的个数即可；</p><p>我们定义状态表示：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j][k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>为仅使用数字0~i，长度为j，好度为k的方案数；<br />有初态：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi>j</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">dp[0][j][(j+1)j/2]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；<br />有状态转移方程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><munderover><mo>∑</mo><mrow><mi>c</mi><mi>t</mi><mo>=</mo><mn>0</mn></mrow><mi>j</mi></munderover><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mfrac><mrow><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>c</mi><mi>t</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><mi>t</mi></munderover><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mi>c</mi><mi>t</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mfrac><mrow><mi>c</mi><mi>t</mi><mo stretchy="false">(</mo><mi>c</mi><mi>t</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo stretchy="false">]</mo><msubsup><mi>C</mi><mi>j</mi><mrow><mi>c</mi><mi>t</mi></mrow></msubsup></mrow><annotation encoding="application/x-tex">dp[i][j][k]=\sum_{j=0}^n\sum_{ct=0}^j\sum_{k=\frac{ct(ct-1)}{2}}^{t}dp[i-1][j-ct][k-\frac{ct(ct-1)}{2}]C_{j}^{ct}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6420320000000004em;vertical-align:-1.7832549999999998em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000007em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4137769999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8587770000000003em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7805610000000005em;"><span style="top:-1.607545em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0377857142857143em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5020714285714285em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.7832549999999998em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.843556em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.383108em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>即从j长度中填入ct个数字i；</p><p>答案即为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[k-1][n][t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span>；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">70</span>;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">998244353</span>;<br>ll dp[N][N][N * N / <span class="hljs-number">2</span>]; <span class="hljs-comment">//使用数字0~i，长度j，贡献k</span><br>ll fc[N], inv[N];<br><span class="hljs-function">ll <span class="hljs-title">qm</span><span class="hljs-params">(ll a, ll b)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (; b; b &gt;&gt;= <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (b &amp; <span class="hljs-number">1</span>)<br>            ans = ans * a % M;<br>        a = a * a % M;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123; <span class="hljs-keyword">return</span> fc[n] * inv[m] % M * inv[n - m] % M; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    fc[<span class="hljs-number">0</span>] = inv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++)<br>    &#123;<br>        fc[i] = fc[i - <span class="hljs-number">1</span>] * i % M;<br>        inv[i] = <span class="hljs-built_in">qm</span>(fc[i], M - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, t;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; t;<br>    <span class="hljs-built_in">init</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; (j + <span class="hljs-number">1</span>) * j / <span class="hljs-number">2</span> &lt;= t; j++)<br>        dp[<span class="hljs-number">0</span>][j][(j + <span class="hljs-number">1</span>) * j / <span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) <span class="hljs-comment">//限定数字</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++) <span class="hljs-comment">//限定长度</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> ct = <span class="hljs-number">0</span>; ct &lt;= j; ct++) <span class="hljs-comment">//限定i的使用量</span><br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = ct * (ct - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; k &lt;= t; k++) <span class="hljs-comment">//限定贡献</span><br>                &#123;<br>                    dp[i][j][k] += dp[i - <span class="hljs-number">1</span>][j - ct][k - ct * (ct - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] * <span class="hljs-built_in">c</span>(j, ct) % M;<br>                    dp[i][j][k] %= M;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; dp[m<span class="hljs-number">-1</span>][n][t];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/33192&quot;&gt;题集链接&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1ev4y1F75d&quot;&gt;视频题解&lt;/a&gt;；&lt;/p&gt;
</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="比赛与题集" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%AF%94%E8%B5%9B%E4%B8%8E%E9%A2%98%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2022牛客暑期多校训练营6（ABGIJM）</title>
    <link href="https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A56%EF%BC%88ABGIJM%EF%BC%89/"/>
    <id>https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A56%EF%BC%88ABGIJM%EF%BC%89/</id>
    <published>2022-08-08T11:59:59.000Z</published>
    <updated>2022-08-25T01:56:34.050Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33191">题集链接</a>；<br /><a href="https://www.bilibili.com/video/BV17W4y1Y74t">视频题解</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#a-array">A Array</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-eezie-and-pie">B Eezie and Pie</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-2">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#g-icon-design">G Icon Design</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-3">题意</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#i-line">I Line</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-4">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#j-number-game">J Number Game</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-5">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#m-game-on-grid">M Game on grid</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-6">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li></ul></p><h2 id="a-array"><a class="markdownIt-Anchor" href="#a-array"></a> A Array</h2><p>构造</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>给定序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∑</mo><mfrac><mn>1</mn><msub><mi>a</mi><mi>i</mi></msub></mfrac><mo>⩽</mo><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\sum\frac 1{a_i}\leqslant\frac 12</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2902079999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ，构造长度不超过1e6的序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，满足在 c 序列首尾相接形成的序列 b 中，任意长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的子串都含有数字 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span> ；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>对于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的限制，我们可以理解为“填充率”，即数字 i 至少占所求序列的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msub><mi>a</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">\frac 1{a_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2902079999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ；</p><p>然后我们考虑构造，考虑序列 c 的长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">2\max(a_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，对于每一个 i ，按 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 升序排列，依次构造，从起始处开始每 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 位填入一个 i ，如果对应位被占，则向左找最近的空位；</p><p>在结尾处，我们考虑可能存在由于被占位造成的左移，使得c序列最后一个 i 和下一个c序列的第一个i之间的距离不满足要求，则我们在结尾处重新寻找空位插入；</p><p>由于保证有解，所以不存在<em>数组前 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 位均被占</em>或<em>找不到空位</em>等情况；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> ans[<span class="hljs-number">1000006</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, mxg = <span class="hljs-number">0</span>;<br>    pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; g[<span class="hljs-number">100005</span>];<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;g[i].first), g[i].second = i, mxg = <span class="hljs-built_in">max</span>(mxg, g[i].first);<br>    <span class="hljs-built_in">sort</span>(g + <span class="hljs-number">1</span>, g + n + <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> c = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br><span class="hljs-type">int</span> j=c;<br><span class="hljs-keyword">while</span>(ans[j])j++,c++;<br>        <span class="hljs-keyword">for</span> (; j &lt;= <span class="hljs-number">2</span>*mxg; j += g[i].first)<br>        &#123;<br><span class="hljs-keyword">while</span>(ans[j])j--;<br>            ans[j] = g[i].second;<br>        &#125;<br><span class="hljs-keyword">if</span>(j<span class="hljs-number">-2</span>*mxg&lt;c)<br>&#123;<br><span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">2</span>*mxg||ans[j])j--;<br>ans[j] = g[i].second;<br>&#125;<br>        c++;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-number">2</span>*mxg);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span>*mxg; i++)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, (ans[i])?ans[i]:<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="b-eezie-and-pie"><a class="markdownIt-Anchor" href="#b-eezie-and-pie"></a> B Eezie and Pie</h2><p>树上差分</p><h4 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h4><p>在一棵以 1 为根的树中，每一个点有一个属性 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> ，表示该点可以覆盖自己和向根方向的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个点（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不含自身），输出每个点可以被几个点覆盖；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>区间加问题，我们考虑差分来解决；</p><p>在dfs形成的每一条链上，我们对末端点的<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">d_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 进行差分，在dfs离开该点时，将该点的差分值加到父亲上，以此统计每个点的被覆盖次数；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>vector&lt;<span class="hljs-type">int</span>&gt; rod[<span class="hljs-number">2000006</span>];<br>ll ans[<span class="hljs-number">2000006</span>], d[<span class="hljs-number">2000006</span>];<br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; tmp;<span class="hljs-comment">//这里的.first实际上无意义</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    tmp.<span class="hljs-built_in">push_back</span>(&#123;x, <span class="hljs-number">1</span>&#125;);<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">int</span>)tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> - d[x] - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span>)<br>        tmp[(<span class="hljs-type">int</span>)tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span> - d[x] - <span class="hljs-number">1</span>].second--;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> u : rod[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (u == f)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(u, x);<br>    &#125;<br><br>    ans[x] = tmp[tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>].second;<br>    <span class="hljs-keyword">if</span> (tmp.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        tmp[tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">2</span>].second += tmp[tmp.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>].second;<br>    &#125;<br>    tmp.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, u, v;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>        rod[u].<span class="hljs-built_in">push_back</span>(v);<br>        rod[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;d[i]);<br>    &#125;<br><span class="hljs-comment">// tmp.push_back(&#123;0,0&#125;);</span><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, ans[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="g-icon-design"><a class="markdownIt-Anchor" href="#g-icon-design"></a> G Icon Design</h2><p>字符串</p><h4 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h4><p>按要求打印字符串</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> n;<br>   cin &gt;&gt; n;<br><br>   set&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; s;<br><br>   <span class="hljs-comment">// N</span><br><br>   <span class="hljs-type">int</span> L = n + <span class="hljs-number">1</span>, U = n;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>; i++) &#123;<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + i&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">1</span>, U + i&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>, U + i&#125;);<br>   &#125;<br><br>   <span class="hljs-comment">// F</span><br><br>   L += <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span> + n + <span class="hljs-number">1</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>; i++) &#123;<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">1</span>, U + i&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + <span class="hljs-number">1</span>&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + n + <span class="hljs-number">2</span>&#125;);<br>   &#125;<br><br>   <span class="hljs-comment">// L</span><br><br>   L += <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span> + n + <span class="hljs-number">1</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>; i++) &#123;<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">1</span>, U + i&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>&#125;);<br>   &#125;<br><br>   <span class="hljs-comment">// S</span><br>   L += <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span> + n + <span class="hljs-number">1</span>;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>; i++) &#123;<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + <span class="hljs-number">1</span>&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + n + <span class="hljs-number">2</span>&#125;);<br>      s.<span class="hljs-built_in">insert</span>(&#123;L + i, U + <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>&#125;);<br>      <span class="hljs-keyword">if</span> (i &lt;= n + <span class="hljs-number">2</span>) &#123;<br>         s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">1</span>, U + i&#125;);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (i &gt;= n + <span class="hljs-number">2</span>) &#123;<br>         s.<span class="hljs-built_in">insert</span>(&#123;L + <span class="hljs-number">2</span> * n + <span class="hljs-number">3</span>, U + i&#125;);<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span> * n + <span class="hljs-number">5</span>; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">13</span> * n + <span class="hljs-number">19</span>; j++) &#123;<br>         <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span> || i == <span class="hljs-number">4</span> * n + <span class="hljs-number">5</span> - <span class="hljs-number">1</span> ||<br>             j == <span class="hljs-number">13</span> * n + <span class="hljs-number">19</span> - <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&#x27;*&#x27;</span>;<br>         &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">find</span>(&#123;j, i&#125;) != s.<span class="hljs-built_in">end</span>()) &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;@&quot;</span>;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; <span class="hljs-string">&quot;.&quot;</span>;<br>         &#125;<br>      &#125;<br>      cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-line"><a class="markdownIt-Anchor" href="#i-line"></a> I Line</h2><p>构造</p><h4 id="题意-4"><a class="markdownIt-Anchor" href="#题意-4"></a> 题意</h4><p>给定向量集 v 和数字 d ，要求生成点集 p ，要求 p 中的每个点在向量集 v 的每个方向上（共线即可）都经过恰好 d 个 p 中的点（含自身）；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>我们首先在 p 中构造原点，再对 p 中的每个点依次沿着 v 中的每个方向构造 d-1 个点；</p><p>为了保证不发生意外共线，我们可以将延长的距离乘一个对 v 中元素两两不同的系数，经测试，取<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn><msup><mn>7</mn><mi>i</mi></msup><mo separator="true">,</mo><mn>2</mn><msup><mn>3</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">37^i,23^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.019104em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span> 均可；<br />经测试，某些质数也会发生意外共线，具体原因待确定；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>pair&lt;ll, ll&gt; vv[<span class="hljs-number">10</span>];<br>vector&lt;pair&lt;pair&lt;ll, ll&gt;, <span class="hljs-type">int</span>&gt;&gt; pp;<br>vector&lt;pair&lt;ll, ll&gt;&gt; p;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(pair&lt;pair&lt;ll, ll&gt;, <span class="hljs-type">int</span>&gt; a, pair&lt;pair&lt;ll, ll&gt;, <span class="hljs-type">int</span>&gt; b)<br>&#123;<br>    <span class="hljs-keyword">return</span> a.first.first == b.first.first &amp;&amp; a.first.second == b.first.second;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, u, v, d;<br>    cin &gt;&gt; n &gt;&gt; d;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;vv[i].first, &amp;vv[i].second);<br>        <span class="hljs-keyword">if</span> (vv[i].first * vv[i].second)<br>        &#123;<br>            <span class="hljs-type">int</span> g = __gcd(<span class="hljs-built_in">abs</span>(vv[i].first), <span class="hljs-built_in">abs</span>(vv[i].second));<br>            vv[i].first /= g;<br>            vv[i].second /= g;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (vv[i].first + vv[i].second)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (vv[i].second)<br>                    vv[i] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (vv[i].first)<br>                    vv[i] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(vv, vv + n);<br>    n = <span class="hljs-built_in">unique</span>(vv, vv + n) - vv;<br>    pp.<span class="hljs-built_in">push_back</span>(&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;, <span class="hljs-number">-1</span>&#125;);<br>    ll bas = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++, bas *= <span class="hljs-number">37</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; pp.<span class="hljs-built_in">size</span>(); k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (pp[k].second == i)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">auto</span> tt = pp[k].first;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j &lt;= d; j++)<br>            &#123;<br>                pp.<span class="hljs-built_in">push_back</span>(<br>                    &#123;&#123;tt.first + vv[i].first * bas * j, tt.second + vv[i].second * bas * j&#125;, i&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, pp.<span class="hljs-built_in">size</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : pp)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, (i.first), (i.second));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="j-number-game"><a class="markdownIt-Anchor" href="#j-number-game"></a> J Number Game</h2><p>数学</p><h4 id="题意-5"><a class="markdownIt-Anchor" href="#题意-5"></a> 题意</h4><p>给定数字 A,B,C ，定义两种操作，问能否通过若干操作使得第三个位置的数字变为 x ；</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>对于一组相同的值，进行若干次操作，这组值只会有两种不同的结果。其中第二个位置（B）的值只有可能是 B 和 A-B ；</p><p>那么对于第三个位置，其生成方式也有两种，即 先与B运算，再与A-B运算 和 先与A-B运算，再与B运算；</p><p>我们可以打表找规律：对于非负整数 k ，第三个位置的值为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mfrac><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mi>A</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mi>k</mi><mi>B</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mi>C</mi><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mfrac><mi>k</mi><mn>2</mn></mfrac><mi>A</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow></msup><mi>k</mi><mi>B</mi><mo>+</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><mi>C</mi></mrow><annotation encoding="application/x-tex">(-1)^{k+1}\frac {k+1}2A+(-1)^kkB+(-1)^kC\\(-1)^{k}\frac {k}2A+(-1)^{k+1}kB+(-1)^kC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord">2</span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p>将k按奇偶讨论，换元为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，如果能求出 n 的非负整数解，即题求情况存在；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span>;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> x, y, z;<br>&#125; ppp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll t, a, b, c, x;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; x;<br>        <span class="hljs-keyword">if</span> (c == x)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * b - a)<br>        &#123;<br>            <span class="hljs-keyword">if</span> ((x + c + b - a) % (a - <span class="hljs-number">2</span> * b) == <span class="hljs-number">0</span> &amp;&amp; (x + c + b - a) / (a - <span class="hljs-number">2</span> * b) &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((x + c - b) % (<span class="hljs-number">2</span> * b - a) == <span class="hljs-number">0</span> &amp;&amp; (x + c - b) / (<span class="hljs-number">2</span> * b - a) &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((x - c) % (<span class="hljs-number">2</span> * b - a) == <span class="hljs-number">0</span> &amp;&amp; (x - c) / (<span class="hljs-number">2</span> * b - a) &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((x - c) % (a - <span class="hljs-number">2</span> * b) == <span class="hljs-number">0</span> &amp;&amp; (x - c) / (a - <span class="hljs-number">2</span> * b) &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a - b - c == x || b - c == x)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="m-game-on-grid"><a class="markdownIt-Anchor" href="#m-game-on-grid"></a> M Game on grid</h2><p>DP</p><h4 id="题意-6"><a class="markdownIt-Anchor" href="#题意-6"></a> 题意</h4><p>给定n*m的网格，一些格点上标有字母A或B ，棋子初始在(0,0)点上，每次移动只能移动到 (i+1,j) 或 (i,j+1) 。若某时刻旗子在A上，则先手赢，若在B上则后手赢，若走到 (n-1,m-1) 点仍未划分胜负，则平局；<br />对于给定网格，请问先手是否有必赢、必平、必输机会；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>我们发现，对于 (i+j)%2=0 的点，接下来一定是先手进行操作，反之为后手先；</p><p>我们调整胜负判定，将先手必输的情况调整为以B判先手胜的先手赢，平局调整为以平局为判定的先手赢<br />考虑DP：</p><p>有状态表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 为走到 (i,j) 点时先手的输赢情况，若为1，则走到该点时，接下来一定会先手赢，若为-1，则一定会先手输，若为0则不定；</p><p>考虑状态转移方程</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>h</mi><mi>e</mi><mi>c</mi><mi>k</mi><mo stretchy="false">(</mo><mi>m</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mtext> </mtext><mi>m</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">!</mo><mo>=</mo><mi mathvariant="normal">.</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mi>j</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mn>2</mn><mo>=</mo><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>min</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mi>j</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mn>2</mn><mo>=</mo><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp[i][j]=\begin{cases}check(mp[i][j])\ mp[i][j]!=.\\\max(dp[i+1][j],dp[i][j+1])\ (i+j)\%2==0\\\min(dp[i+1][j],dp[i][j+1])\ (i+j)\%2==1\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">.</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">max</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mord">%</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop">min</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mord">%</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>即先手倾向于走向先手赢，后手倾向于走向先手输；</p><p>至于将字符映射到1,0,-1的过程，则通过check函数实现；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">502</span>;<br><br><span class="hljs-type">int</span> dp[N][N], n, m;<br><span class="hljs-type">char</span> s[N][N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s[i]);<br><br>    <span class="hljs-keyword">auto</span> dpf = [&amp;](<span class="hljs-keyword">auto</span> ck, <span class="hljs-type">int</span> <span class="hljs-keyword">final</span> = <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--)<br>            &#123;<br>                dp[i][j] = <span class="hljs-built_in">ck</span>(i, j);<br>                <span class="hljs-keyword">if</span> (dp[i][j] != <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span> (i == n - <span class="hljs-number">1</span> &amp;&amp; j == m - <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                vector&lt;<span class="hljs-type">int</span>&gt; nxt;<br>                <span class="hljs-keyword">if</span> (i &lt; n - <span class="hljs-number">1</span>)<br>                    nxt.<span class="hljs-built_in">push_back</span>(dp[i + <span class="hljs-number">1</span>][j]);<br>                <span class="hljs-keyword">if</span> (j &lt; m - <span class="hljs-number">1</span>)<br>                    nxt.<span class="hljs-built_in">push_back</span>(dp[i][j + <span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">if</span> ((i + j) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                &#123;<br>                    dp[i][j] = *<span class="hljs-built_in">max_element</span>(nxt.<span class="hljs-built_in">begin</span>(), nxt.<span class="hljs-built_in">end</span>());<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    dp[i][j] = *<span class="hljs-built_in">min_element</span>(nxt.<span class="hljs-built_in">begin</span>(), nxt.<span class="hljs-built_in">end</span>());<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-keyword">final</span>;<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dpf</span>(<br>            [](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) -&gt; <span class="hljs-type">int</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-string">&#x27;B&#x27;</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">return</span> s[i][j] == <span class="hljs-string">&#x27;A&#x27;</span>;<br>            &#125;))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes &quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no &quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dpf</span>([](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) -&gt; <span class="hljs-type">int</span> &#123; <span class="hljs-keyword">return</span> s[i][j] == <span class="hljs-string">&#x27;.&#x27;</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>; &#125;, <span class="hljs-number">0</span>))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes &quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no &quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dpf</span>(<br>            [](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) -&gt; <span class="hljs-type">int</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-string">&#x27;A&#x27;</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">return</span> s[i][j] == <span class="hljs-string">&#x27;B&#x27;</span>;<br>            &#125;))<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;yes&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;no&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> T;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;T);<br>    <span class="hljs-keyword">while</span> (T--)<br>    &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/33191&quot;&gt;题集链接&lt;/a&gt;；&lt;br /&gt;
&lt;a href=&quot;https://www.bilibili.com/video/BV17W4y1Y74t&quot;&gt;视频题解&lt;/a&gt;；&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="比赛与题集" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%AF%94%E8%B5%9B%E4%B8%8E%E9%A2%98%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>2022牛客暑期多校训练营5（BCDFGHK）</title>
    <link href="https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A55%EF%BC%88BCDFGHK%EF%BC%89/"/>
    <id>https://tanyuu.github.io/2022.07-12/2022%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%90%A55%EF%BC%88BCDFGHK%EF%BC%89/</id>
    <published>2022-08-02T18:02:30.000Z</published>
    <updated>2022-08-25T02:04:40.084Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/33190">题集链接</a>；</p><p><ul class="markdownIt-TOC"><li><a href="#b-watches">B Watches</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#c-bit-transmission">C Bit Transmission</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-2">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#d-birds-in-the-tree">D Birds in the tree</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-3">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#f-a-stack-of-cds">F A Stack of CDs</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-4">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#g-kfc-crazy-thursday">G KFC Crazy Thursday</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-5">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#h-cutting-papers">H Cutting Papers</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-6">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#k-headphones">K Headphones</a><br />*<ul><li><a href="#%E9%A2%98%E6%84%8F-7">题意</a></li><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#ed">ed</a></li></ul></p><h2 id="b-watches"><a class="markdownIt-Anchor" href="#b-watches"></a> B Watches</h2><p>二分</p><h4 id="题意"><a class="markdownIt-Anchor" href="#题意"></a> 题意</h4><p>手表店有 n 块手表出售，第 i 个手表售价 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 。若购买 k 个手表，那么第 i 个手表需要花费 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mi>k</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">a_i+ki</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">i</span></span></span></span> 元。现有 m 元，求最多可购买多少块手表；</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>我们考虑到每个手表的花费与购买总数有关，不方便直接贪心处理，我们便选择二分出 k 后，按照实际花费进行排序并贪心；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>) -&gt; <span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>   <span class="hljs-type">int</span> n, m;<br>   cin &gt;&gt; n &gt;&gt; m;<br><br>   <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; x : a) cin &gt;&gt; x;<br><br>   <span class="hljs-keyword">auto</span> solve = [&amp;](<span class="hljs-type">int</span> k) -&gt; <span class="hljs-type">bool</span> &#123;<br>      vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-built_in">b</span>(a);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>         b[i] += <span class="hljs-number">1ll</span> * (i + <span class="hljs-number">1</span>) * k;<br>      &#125;<br>      <span class="hljs-built_in">sort</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">end</span>());<br>      <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>         sum += b[i];<br>      &#125;<br>      <span class="hljs-keyword">return</span> sum &lt;= m;<br>   &#125;;<br><br>   <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = n;<br>   <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>      <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">solve</span>(mid)) &#123;<br>         ans = mid;<br>         l = mid + <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         r = mid - <span class="hljs-number">1</span>;<br>      &#125;<br>   &#125;<br>   cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="c-bit-transmission"><a class="markdownIt-Anchor" href="#c-bit-transmission"></a> C Bit Transmission</h2><h4 id="题意-2"><a class="markdownIt-Anchor" href="#题意-2"></a> 题意</h4><p>机器人有一长度为 n 的字符串，现在向机器人询问 3n 次某位是否为 1 ，但是在所有询问中，机器人会返回最多一个错误。对于机器人的回答，若存在唯一的字符串则输出，否则返回 -1 ；</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>首先排除一些明显无唯一答案的情况，比如某一位没有被询问过；</p><p>由于是否有错未知，我们需要首先定位错误的发生，对于某被询问大于两次的位，若其结果出现一次不同，则可以断定错误发生在此处；</p><p>若无法定位错误，除所有位均被询问大于两次且答案相同外，其余情况均无唯一原串；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>    &#123;<br>        <span class="hljs-function">vector <span class="hljs-title">a</span><span class="hljs-params">(n, pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * <span class="hljs-number">3</span>; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> x;<br>            string s;<br>            cin &gt;&gt; x &gt;&gt; s;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;Y&#x27;</span>)<br>            &#123;<br>                a[x].second++;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                a[x].first++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">bool</span> f = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[i].first + a[i].second == <span class="hljs-number">0</span>)<span class="hljs-comment">//没有问到</span><br>            &#123;<br>                f = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (f)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (a[i].first + a[i].second &gt; <span class="hljs-number">2</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (a[i].first == <span class="hljs-number">1</span> || a[i].second == <span class="hljs-number">1</span>)<span class="hljs-comment">//错误发生</span><br>                    &#123;<br>                        cnt++;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[i].first != <span class="hljs-number">0</span> &amp;&amp; a[i].second != <span class="hljs-number">0</span>)<span class="hljs-comment">//同一位上至少两个错误</span><br>                    &#123;<br>                        f = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">2</span>)<span class="hljs-comment">//多个错误</span><br>                    &#123;<br>                        f = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>)<span class="hljs-comment">//若无法定位错误</span><br>            &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (a[i].first == <span class="hljs-number">1</span> || a[i].second == <span class="hljs-number">1</span>)<span class="hljs-comment">//无法确定结果真实性</span><br>                    &#123;<br>                        f = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (a[i].first == <span class="hljs-number">1</span> &amp;&amp; a[i].second == <span class="hljs-number">1</span>)<span class="hljs-comment">//若出现11</span><br>                &#123;<br>                    f = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (a[i].first &gt; a[i].second)<br>                &#123;<br>                    cout &lt;&lt; <span class="hljs-number">0</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    cout &lt;&lt; <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            cout &lt;&lt; <span class="hljs-number">-1</span>;<br>        &#125;<br>        cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="d-birds-in-the-tree"><a class="markdownIt-Anchor" href="#d-birds-in-the-tree"></a> D Birds in the tree</h2><p>树状DP</p><h4 id="题意-3"><a class="markdownIt-Anchor" href="#题意-3"></a> 题意</h4><p>给出一个 n 个节点的树，每个节点有颜色 0 或 1 ，求其有多少连通子图，满足度数为 1 的节点颜色相同；</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>构造状态表示：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 为以节点 i 为根的子树中，有多少连通子图，度数为 1 的节点（若 i 不是唯一一个则不考虑 i ）颜色为 j；<br />推导状态转移方程：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><munder><mo>∏</mo><mrow><mi>k</mi><mo>∈</mo><mi>s</mi><mi>o</mi><msub><mi>n</mi><mi>i</mi></msub></mrow></munder><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">[</mo><mi>c</mi><mi>o</mi><mi>l</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">!</mo><mo>=</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]=\prod_{k\in son_i}(1+dp[k][j])-[col[i]!=j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4522180000000002em;vertical-align:-1.402213em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.847887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">o</span><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.402213em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span></span></p><p>前面的连乘式显然为乘法计数原理，对于每一个子节点k，有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[k][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 种选择，还可以不选该子节点；<br />对于后面的减数，则表示若 i 节点颜色与目标相异，则需要去除仅选择 i 一个点的情况；</p><p>答案即为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo>∑</mo><mi>i</mi></munder><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>−</mo><mo stretchy="false">(</mo><munder><mo>∑</mo><mrow><mi>k</mi><mo>∈</mo><mi>s</mi><mi>o</mi><msub><mi>n</mi><mi>i</mi></msub></mrow></munder><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mo stretchy="false">!</mo><mi>c</mi><mi>o</mi><mi>l</mi><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_idp[i][1]+dp[i][0]-(\sum_{k\in son_i}dp[k][!col[n]])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.4522180000000002em;vertical-align:-1.402213em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.847887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight">s</span><span class="mord mathdefault mtight">o</span><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.402213em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">]</span><span class="mopen">[</span><span class="mclose">!</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span></span></p><p>后面的减法是减去以 i 为根节点，并且仅选择了一个子树的情况，此处不符合题意；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> ll M = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>vector&lt;<span class="hljs-type">int</span>&gt; rod[<span class="hljs-number">300005</span>];<br>ll col[<span class="hljs-number">300005</span>];<br>ll dp[<span class="hljs-number">300005</span>][<span class="hljs-number">2</span>];<br>ll ans;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> f)</span></span><br><span class="hljs-function"></span>&#123;<br>    ll tmp1 = <span class="hljs-number">1</span>, tmp0 = <span class="hljs-number">1</span>, sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : rod[x])<br>    &#123;<br>        <span class="hljs-keyword">if</span> (y == f)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(y, x);<br>        sum += (dp[y][col[x] ^ <span class="hljs-number">1</span>]);<br>        sum %= M;<br>        tmp1 *= (<span class="hljs-number">1</span> + dp[y][<span class="hljs-number">1</span>]) % M;<br>        tmp1 %= M;<br>        tmp0 *= (<span class="hljs-number">1</span> + dp[y][<span class="hljs-number">0</span>]) % M;<br>        tmp0 %= M;<br>    &#125;<br>    dp[x][<span class="hljs-number">1</span>] = tmp1 - (col[x] != <span class="hljs-number">1</span>) + M;<br>    dp[x][<span class="hljs-number">0</span>] = tmp0 - (col[x] != <span class="hljs-number">0</span>) + M;<br>    dp[x][<span class="hljs-number">1</span>] %= M;<br>    dp[x][<span class="hljs-number">0</span>] %= M;<br>    ans += dp[x][<span class="hljs-number">1</span>] + dp[x][<span class="hljs-number">0</span>] - sum + M;<br>    ans %= M;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            rod[i].<span class="hljs-built_in">clear</span>();<br>        ans = <span class="hljs-number">0</span>;<br>        string g;<br>        cin &gt;&gt; g;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            col[i + <span class="hljs-number">1</span>] = g[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-type">int</span> u, v;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;u, &amp;v);<br>            rod[u].<span class="hljs-built_in">push_back</span>(v);<br>            rod[v].<span class="hljs-built_in">push_back</span>(u);<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="f-a-stack-of-cds"><a class="markdownIt-Anchor" href="#f-a-stack-of-cds"></a> F A Stack of CDs</h2><p>计算几何</p><h4 id="题意-4"><a class="markdownIt-Anchor" href="#题意-4"></a> 题意</h4><p><a href="https://www.luogu.com.cn/problem/P2510">洛谷原题</a>，更改输入顺序和输出位数即可</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>对于这个数据量，我们可以对每一个盘寻找其被覆盖的区间，并进行区间和并算出被覆盖总长；<br />注意盘被上层内含的情况；</p><p>累加每个盘的剩余总长即是答案；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> double long double</span><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> eps = <span class="hljs-number">1e-16</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sign</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> <span class="hljs-comment">// 符号函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(x) &lt; eps)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-type">double</span> x, y;<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">double</span> a = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> b = <span class="hljs-number">0</span>) &#123; x = a, y = b; &#125;<br>    Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x + a.x, y + a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x - a.x, y - a.y); &#125;<br>    Point <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x * a, y * a); &#125;<br>    Point <span class="hljs-keyword">operator</span>/(<span class="hljs-type">const</span> <span class="hljs-type">double</span> &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(x / a, y / a); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> !<span class="hljs-built_in">sign</span>(x - a.x) &amp;&amp; !<span class="hljs-built_in">sign</span>(y - a.y); &#125;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Point &amp;a) <span class="hljs-type">const</span> &#123; <span class="hljs-keyword">return</span> (<span class="hljs-built_in">fabs</span>(x - a.x) &lt; eps) ? (y &lt; a.y) : (x &lt; a.x); &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Line</span><br>&#123;<br>    Point a, v;<br>    <span class="hljs-built_in">Line</span>(Point x = <span class="hljs-built_in">Point</span>(), Point y = <span class="hljs-built_in">Point</span>()) &#123; a = x, v = y; &#125;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Circle</span><br>&#123;<br>    Point o;<br>    <span class="hljs-type">double</span> r;<br>    <span class="hljs-built_in">Circle</span>(Point x = <span class="hljs-built_in">Point</span>(), <span class="hljs-type">double</span> y = <span class="hljs-number">0</span>) &#123; o = x, r = y; &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">dot</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.x + a.y * b.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">cross</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> a.x * b.y - b.x * a.y; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get_length</span><span class="hljs-params">(Point a)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">dot</span>(a, a)); &#125;<br><span class="hljs-function">Point <span class="hljs-title">get_line_intersection</span><span class="hljs-params">(Line m, Line n)</span></span><br><span class="hljs-function"></span>&#123;<br>    Point u = m.a - n.a;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">cross</span>(m.v, n.v)) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-type">double</span> t = <span class="hljs-built_in">cross</span>(n.v, u) / <span class="hljs-built_in">cross</span>(m.v, n.v);<br>    <span class="hljs-keyword">return</span> m.a + m.v * t;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">distance_to_line</span><span class="hljs-params">(Point p, Line m)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">cross</span>(p - m.a, m.v) / <span class="hljs-built_in">get_length</span>(m.v)); &#125;<br><span class="hljs-function">pair&lt;Point, Point&gt; <span class="hljs-title">line_circle_intersection</span><span class="hljs-params">(Line l, Circle c)</span></span><br><span class="hljs-function"></span>&#123;<br>    Point h = <span class="hljs-built_in">get_line_intersection</span>(l, <span class="hljs-built_in">Line</span>(c.o, <span class="hljs-built_in">Point</span>(-l.v.y, l.v.x)));<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">distance_to_line</span>(h, l) - c.r) &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-built_in">Point</span>(), <span class="hljs-built_in">Point</span>()&#125;;<br>    Point e = l.v / <span class="hljs-built_in">get_length</span>(l.v);<br>    <span class="hljs-type">double</span> k =<br>        <span class="hljs-built_in">sqrt</span>(c.r * c.r - <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">cross</span>(c.o - l.a, l.v)) * <span class="hljs-built_in">fabs</span>(<span class="hljs-built_in">cross</span>(c.o - l.a, l.v)) / <span class="hljs-built_in">dot</span>(l.v, l.v));<br>    <span class="hljs-keyword">return</span> &#123;h - e * k, h + e * k&#125;;<br>&#125;<br>Circle ccl[<span class="hljs-number">1003</span>];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">circle_relation</span><span class="hljs-params">(Circle p, Circle q)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> d = <span class="hljs-built_in">get_length</span>(p.o - q.o), l = <span class="hljs-built_in">fabs</span>(p.r - q.r);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(d - p.r - q.r) &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(d - p.r - q.r) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(d - l) &gt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(d - l) == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function">pair&lt;Point, Point&gt; <span class="hljs-title">circle_circle_intersection</span><span class="hljs-params">(Circle a, Circle b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> d = <span class="hljs-built_in">get_length</span>(a.o - b.o);<br>    <span class="hljs-type">double</span> d1 = a.r * (a.r * a.r + d * d - b.r * b.r) / (<span class="hljs-number">2</span> * a.r * d);<br>    <span class="hljs-type">double</span> h1 = <span class="hljs-built_in">sqrt</span>(a.r * a.r - d1 * d1);<br>    Point ed = b.o - a.o;<br>    Point h = a.o + ed / <span class="hljs-built_in">get_length</span>(ed) * d1;<br>    <span class="hljs-keyword">return</span> &#123;h + <span class="hljs-built_in">Point</span>(ed.y, -ed.x) / <span class="hljs-built_in">get_length</span>(ed) * h1,<br>            h - <span class="hljs-built_in">Point</span>(ed.y, -ed.x) / <span class="hljs-built_in">get_length</span>(ed) * h1&#125;;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">get_angle</span><span class="hljs-params">(Point a, Point b)</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">acos</span>(<span class="hljs-built_in">dot</span>(a, b) / <span class="hljs-built_in">get_length</span>(a) / <span class="hljs-built_in">get_length</span>(b)); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%Lf%Lf%Lf&quot;</span>, &amp;ccl[i].o.x, &amp;ccl[i].o.y, &amp;ccl[i].r);<br>    &#125;<br>    vector&lt;pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt;&gt; lim;<br>    <span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        lim.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-type">double</span> ers = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">bool</span> zero = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++)<br>        &#123;<br>            <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">circle_relation</span>(ccl[i], ccl[j]);<br>            <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span> &amp;&amp; ccl[i].r &lt; ccl[j].r)<br>            &#123;<br>                zero = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">3</span>)<br>            &#123;<br>                <span class="hljs-keyword">auto</span> pii = <span class="hljs-built_in">circle_circle_intersection</span>(ccl[i], ccl[j]);<br>                Point to = ccl[j].o - ccl[i].o;<br>                pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; deg = &#123;<br>                    <span class="hljs-built_in">atan2</span>((pii.first - ccl[i].o).y, (pii.first - ccl[i].o).x),<br>                    <span class="hljs-built_in">atan2</span>((pii.second - ccl[i].o).y, (pii.second - ccl[i].o).x)&#125;;<br>                <span class="hljs-keyword">if</span> (deg.first &gt; deg.second)<br>                &#123;<br>                    <span class="hljs-built_in">swap</span>(deg.first, deg.second);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(<span class="hljs-built_in">fabs</span>(deg.first - <span class="hljs-built_in">atan2</span>(to.y, to.x)) - PI) &gt;= <span class="hljs-number">0</span> ||<br>                    <span class="hljs-built_in">sign</span>(<span class="hljs-built_in">fabs</span>(deg.second - <span class="hljs-built_in">atan2</span>(to.y, to.x)) - PI) &gt;= <span class="hljs-number">0</span>)<br>                &#123;<br>                    lim.<span class="hljs-built_in">push_back</span>(&#123;deg.second, PI&#125;);<br>                    lim.<span class="hljs-built_in">push_back</span>(&#123;-PI, deg.first&#125;);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    lim.<span class="hljs-built_in">push_back</span>(deg);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (zero)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (lim.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            ers = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">sort</span>(lim.<span class="hljs-built_in">begin</span>(), lim.<span class="hljs-built_in">end</span>());<br>            <span class="hljs-type">double</span> st = lim[<span class="hljs-number">0</span>].first, ed = lim[<span class="hljs-number">0</span>].second;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; lim.<span class="hljs-built_in">size</span>(); i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sign</span>(lim[i].first - ed) &lt;= <span class="hljs-number">0</span>)<br>                &#123;<br>                    ed = <span class="hljs-built_in">max</span>(lim[i].second, ed);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    ers += ed - st;<br>                    st = lim[i].first, ed = lim[i].second;<br>                &#125;<br>            &#125;<br>            ers += ed - st;<br>        &#125;<br>        ans += (<span class="hljs-number">2</span> * PI - ers) * ccl[i].r;<br><span class="hljs-comment">//         printf(&quot;*%Lf %Lf %d\n&quot;, ers, ans, lim.size());</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10Lf&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="g-kfc-crazy-thursday"><a class="markdownIt-Anchor" href="#g-kfc-crazy-thursday"></a> G KFC Crazy Thursday</h2><p>Manacher（马拉车算法）</p><h4 id="题意-5"><a class="markdownIt-Anchor" href="#题意-5"></a> 题意</h4><p>给定长度为 n 的小写字母串，分别求有多少以 k , f, c 结尾的回文子串；</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>由于马拉车求的是以每个字符为中心的最长回文串，我们只需要枚举以某点为中心，所有小于等于该点最长回文串半径的回文串，判断是否符合条件并计数即可；</p><p>最初还担心T，实际上可以过~</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">998244353</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">char</span> s[maxn * <span class="hljs-number">2</span>], str[maxn * <span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> d[maxn * <span class="hljs-number">2</span>], len;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getstr</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//重定义字符串</span><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    str[k++] = <span class="hljs-string">&#x27;@&#x27;</span>; <span class="hljs-comment">//开头加个特殊字符防止越界</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        str[k++] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>        str[k++] = s[i];<br>    &#125;<br>    str[k++] = <span class="hljs-string">&#x27;#&#x27;</span>;<br>    len = k;<br>    str[k] = <span class="hljs-number">0</span>; <span class="hljs-comment">//字符串尾设置为0，防止越界</span><br>&#125;<br><span class="hljs-type">int</span> k, f, c;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">manacher</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> mx = <span class="hljs-number">0</span>, id; <span class="hljs-comment">// mx为最右边，id为中心点</span><br>    <span class="hljs-type">int</span> maxx = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; mx)<br>            d[i] = <span class="hljs-built_in">min</span>(mx - i + <span class="hljs-number">1</span>, d[<span class="hljs-number">2</span> * id - i]); <br>        <span class="hljs-keyword">else</span><br>            d[i] = <span class="hljs-number">1</span>; <br>        <span class="hljs-keyword">while</span> (str[i + d[i]] == str[i - d[i]])<br>            d[i]++; <br>        <span class="hljs-keyword">if</span> (d[i] + i - <span class="hljs-number">1</span> &gt; mx)<br>        &#123; <br>            mx = d[i] + i - <span class="hljs-number">1</span>;<br>            id = i;                 <br>            maxx = <span class="hljs-built_in">max</span>(maxx, d[i]); <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (maxx - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span> (cin &gt;&gt; len)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;s);<br>        <span class="hljs-built_in">getstr</span>();<br>        <span class="hljs-built_in">memset</span>(d, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> d);<br>        <span class="hljs-built_in">manacher</span>();<br>        k = f = c = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; len; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= d[i]; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (str[i - j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;k&#x27;</span>)<br>                    k++;<br>                <span class="hljs-keyword">if</span> (str[i - j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;f&#x27;</span>)<br>                    f++;<br>                <span class="hljs-keyword">if</span> (str[i - j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;c&#x27;</span>)<br>                    c++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>, k, f, c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-cutting-papers"><a class="markdownIt-Anchor" href="#h-cutting-papers"></a> H Cutting Papers</h2><p>计算几何</p><h4 id="题意-6"><a class="markdownIt-Anchor" href="#题意-6"></a> 题意</h4><p>给定图形 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi mathvariant="normal">∣</mi><mo>⩽</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">|x|+|y|+|x+y|\leqslant n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>⩽</mo><msup><mi>n</mi><mn>2</mn></msup><mi mathvariant="normal">/</mi><mn>4</mn></mrow><annotation encoding="application/x-tex">x^2+y^2\leqslant n^2/4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord">/</span><span class="mord">4</span></span></span></span> 求两者交面积；</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>经过matplotlib绘制，发现前者形状如下：<br /><img src="https://s2.loli.net/2022/08/25/KIARMfHg1l9YuwC.png" alt="image.png" /><br /><img src="https://s2.loli.net/2022/08/25/y3ueVwmz7vU2sop.png" alt="image.png" /><br />便可以直接表示出面积~</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><p>队友代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> PI = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>);<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">double</span> n;<br>   cin &gt;&gt; n;<br>    <span class="hljs-type">double</span> r = n / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.8f\n&quot;</span> , r * r * PI / <span class="hljs-number">2</span> + <span class="hljs-number">2</span> * r * r);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="k-headphones"><a class="markdownIt-Anchor" href="#k-headphones"></a> K Headphones</h2><h4 id="题意-7"><a class="markdownIt-Anchor" href="#题意-7"></a> 题意</h4><p>现有 n-k 对耳机，每次随机拿一个（不是一对），求最少拿多少次能使手中耳机对数大于k；</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>如果存在解，先考虑最坏情况：<br />若先拿出的 n-k 个耳机都是不成对的，那么还需要再拿 k+1 个才能满足题意；<br />即至少需要拿 n+1 个；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">long</span> <span class="hljs-type">long</span> n,k;<br>   <span class="hljs-keyword">while</span>(cin&gt;&gt;n&gt;&gt;k)<br>   &#123;<br>    <span class="hljs-keyword">if</span>(n-k&gt;=k+<span class="hljs-number">1</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,n+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ed"><a class="markdownIt-Anchor" href="#ed"></a> ed</h2><p>这场的难度梯度有点怪</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/33190&quot;&gt;题集链接&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#b-watches&quot;&gt;B Watches&lt;/a&gt;&lt;b</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="比赛与题集" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%AF%94%E8%B5%9B%E4%B8%8E%E9%A2%98%E9%9B%86/"/>
    
    
  </entry>
  
</feed>
