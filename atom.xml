<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yu_Tang</title>
  
  
  <link href="https://tanyuu.github.io/atom.xml" rel="self"/>
  
  <link href="https://tanyuu.github.io/"/>
  <updated>2022-07-28T10:21:06.927Z</updated>
  <id>https://tanyuu.github.io/</id>
  
  <author>
    <name>Fu Junyuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How did I come from?</title>
    <link href="https://tanyuu.github.io/How%20did%20I%20come%20from/"/>
    <id>https://tanyuu.github.io/How%20did%20I%20come%20from/</id>
    <published>2022-07-26T02:06:57.000Z</published>
    <updated>2022-07-28T10:21:06.927Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2022.07.24</p></blockquote><p>CY老师组织了2022暑假第三次周报，期间RK学长期望与实验室同学来充实友链页；我向学长表示可能会离开CSDN，计划租ECS来建站，之前的友链可能就要改掉了；同时向学长表示关于此计划还要咨询他很多问题，学长则表示：</p><p><img src="https://img-blog.csdnimg.cn/905d71a9510340d08494e293a1a81aa9.png" alt="人和人的体质不能一概而论，学长显然高估了我的能力" /></p><p>于是从21:27搞到了00:25~</p><p>并通过<a href="https://blog.csdn.net/qq_33976344/article/details/123800804">此文章</a>所述办法爬下来了之前CSDN上面的文章，为迁移和备份做好了准备~</p><blockquote><p>2022.07.25</p></blockquote><p>对照着<a href="https://hexo.fluid-dev.com/docs/guide/">Hexo Fluid 配置指南</a>忙活了一晚上，博客终于初具人形~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2022.07.24&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CY老师组织了2022暑假第三次周报，期间RK学长期望与实验室同学来充实友链页；我向学长表示可能会离开CSDN，计划租ECS来建站，之前的友链可能就要改掉了；同时向学长表示关于此计划还</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ECS Ubuntu20.04配置和删除swap虚拟内存</title>
    <link href="https://tanyuu.github.io/2022.07-12/ECS%20Ubuntu20.04%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%A0%E9%99%A4swap%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
    <id>https://tanyuu.github.io/2022.07-12/ECS%20Ubuntu20.04%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%A0%E9%99%A4swap%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</id>
    <published>2022-07-10T06:48:04.000Z</published>
    <updated>2022-08-02T02:42:05.751Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Wz411i7Qh">参考1</a>、<a href="https://blog.csdn.net/qq_33505611/article/details/110501166">参考2</a><br />本文章仅作个人参考之用，恕才疏学浅，作者对文章内容不负责；</p><h2 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h2><p>为解决内存不足的问题，将一部分硬盘空间当作内存之用；</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><ol><li>确定设置，输入<code>:~# free -m</code>，返回值中swap行若为 0 0 0 则说明没有设置虚拟内存；</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">              <span class="hljs-attribute">total</span>        used        free      shared  buff/cache   available<br><span class="hljs-attribute">Mem</span>:           <span class="hljs-number">1983</span>         <span class="hljs-number">658</span>         <span class="hljs-number">469</span>          <span class="hljs-number">27</span>         <span class="hljs-number">854</span>        <span class="hljs-number">1124</span><br><span class="hljs-attribute">Swap</span>:             <span class="hljs-number">0</span>           <span class="hljs-number">0</span>           <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ol start="2"><li>通过<code>:~# cd /</code>进入根目录，<code>:/# mkdir swap</code>新建一个名为swap的文件夹，<code>:/# cd swap</code>进入该文件夹；</li><li>此文件夹内输入<code>:/swap# dd if=/dev/zero of=swapfile bs=1024 count=1048576</code>以创建交换分区文件，其中bs是分块的大小（单位为B），count为分块的个数（交换分区建议大小详见参考2）；有返回内容如下</li></ol><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1048576</span>+<span class="hljs-number">0</span> records in<br><span class="hljs-number">1048576</span>+<span class="hljs-number">0</span> records <span class="hljs-keyword">out</span><br><span class="hljs-symbol">1073741824 </span>bytes (<span class="hljs-number">1.1</span> GB, <span class="hljs-number">1.0</span> GiB) copied, <span class="hljs-number">7.56452</span> s, <span class="hljs-number">142</span> MB/s<br></code></pre></td></tr></table></figure><ol start="4"><li>输入<code>:/swap# sudo mkswap swapfile</code>将生成的文件转换为swap文件；有返回内容如下</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mkswap</span>: swapfile: insecure permissions <span class="hljs-number">0644</span>, <span class="hljs-number">0600</span> suggested.<br><span class="hljs-attribute">Setting</span> up swapspace version <span class="hljs-number">1</span>, size = <span class="hljs-number">1024</span> MiB (<span class="hljs-number">1073737728</span> bytes)<br><span class="hljs-attribute">no</span> label, UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx<br></code></pre></td></tr></table></figure><ol start="5"><li>输入<code>:/swap# sudo swapon swapfile</code>激活swap文件；有返回内容如下</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">swapon: /swap/swapfile:</span> <span class="hljs-string">insecure</span> <span class="hljs-string">permissions</span> <span class="hljs-number">0644</span><span class="hljs-string">,</span> <span class="hljs-number">0600 </span><span class="hljs-string">suggested.</span><br></code></pre></td></tr></table></figure><ol start="6"><li>此时输入<code>:/swap# free -m</code>则可以观察到虚拟内存已开启；</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">              <span class="hljs-attribute">total</span>        used        free      shared  buff/cache   available<br><span class="hljs-attribute">Mem</span>:           <span class="hljs-number">1983</span>         <span class="hljs-number">658</span>          <span class="hljs-number">73</span>          <span class="hljs-number">27</span>        <span class="hljs-number">1250</span>        <span class="hljs-number">1118</span><br><span class="hljs-attribute">Swap</span>:          <span class="hljs-number">1023</span>           <span class="hljs-number">0</span>        <span class="hljs-number">1023</span><br></code></pre></td></tr></table></figure><ol start="7"><li>为了设置系统启动时自动开启swap，我们需要编辑fstab文件，用编辑器打开该文件<code>:/swap# sudo vim /etc/fstab</code></li><li>在最后一行加入<code>/swap swap defaults 0 0</code>后保存并退出；</li></ol><h2 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h2><ol><li>在swap目录下，执行<code>:/swap# sudo swapoff -v swapfile</code>，有返回内容如下</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">swapoff swapfile</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在fstab文件中删除相关行；</li><li>删除swap文件夹<code>/# rm -rf swap</code>；</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Wz411i7Qh&quot;&gt;参考1&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/qq_33505611/article/details/110501166&quot;&gt;参考2&lt;/</summary>
      
    
    
    
    <category term="Linux" scheme="https://tanyuu.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ECS Ubuntu20.04配置vsftpd</title>
    <link href="https://tanyuu.github.io/2022.07-12/ECS%20Ubuntu20.04%E9%85%8D%E7%BD%AEvsftpd/"/>
    <id>https://tanyuu.github.io/2022.07-12/ECS%20Ubuntu20.04%E9%85%8D%E7%BD%AEvsftpd/</id>
    <published>2022-07-10T03:15:09.000Z</published>
    <updated>2022-08-02T02:41:02.201Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Wz411i7Qh">参考1</a>、<a href="https://blog.csdn.net/MyLovelyJay/article/details/88046476">参考2</a><br />本文章仅作个人参考之用，恕才疏学浅，作者对文章内容不负责；</p><p><em>本文图片均链自CSDN</em></p><h2 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h2><p>为更方便地对ECS进行文件管理和文件传输，现通过 Ubuntu 中的 vsftpd 和 Windows 端的 FileZilla 进行 FTP 连接；</p><h2 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h2><h4 id="服务器端"><a class="markdownIt-Anchor" href="#服务器端"></a> 服务器端</h4><ol><li>通过<code>:~# sudo apt update</code>和<code>:~# sudo apt upgrade</code>更新软件列表；</li><li>检查安装，输入<code>:~# sudo service vsftpd start</code>来确定目前是否安装。若需要安装，则有返回</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Failed <span class="hljs-keyword">to</span> <span class="hljs-keyword">start</span> vsftpd.service: Unit vsftpd.service <span class="hljs-keyword">not</span> <span class="hljs-built_in">found</span>.<br></code></pre></td></tr></table></figure><ol start="3"><li>通过<code>:~# sudo apt install vsftpd</code>安装vsftpd；</li><li>先执行<code>:~# cp /etc/vsftpd.conf /etc/vsftpd.conf.bk</code>来备份vsftpd配置文件；</li><li>通过编辑器打开vsftpd.conf，<code>:~# sudo vim /etc/vsftpd.conf</code>；</li><li>在编辑器中找到如下行，删去#以解注释；</li></ol><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#write_enable=YES</span><br></code></pre></td></tr></table></figure><ol start="7"><li>接下来在文末添加三行新的内容后，退出编辑器<br /><code>pasv_enable=yes</code><br /><code>pasv_min_port=10000</code><br /><code>pasv_max_port=10099</code></li><li>防火墙开放tcp端口 10000/10099 和端口21</li><li>为了更安全地使用FTP服务，我们新建一个用户专门用于使用FTP（此处使用用户名tmp指代新用户），输入<code>sudo adduser tmp</code>以新建用户tmp。在设置密码，填入用户信息后完成新建；</li><li>输入<code>:~# sudo service vsftpd start</code>以启动；</li></ol><h4 id="pc端"><a class="markdownIt-Anchor" href="#pc端"></a> PC端</h4><ol start="11"><li><p>通过<a href="https://www.filezilla.cn/">官网</a>来下载 FileZilla 并安装；</p></li><li><p>运行后在此处打开站点管理器<br /><img src="https://img-blog.csdnimg.cn/23a7f0b3f86f4abab3ea85c67147d12a.png" alt="在这里插入图片描述" /></p></li><li><p>打开站点管理器后<br /><img src="https://img-blog.csdnimg.cn/f7cdcc37c47940d6b10328aa8c28b617.png" alt="在这里插入图片描述" /></p></li><li><p>填表后，点击连接，即可浏览和操作ECS的文件夹<br /><img src="https://img-blog.csdnimg.cn/f9080f5ac5c24ac8974901ac045fcd35.png" alt="在这里插入图片描述" /></p></li><li><p>若报错<code>服务器发回了不可路由的地址，使用服务器地址代替</code>，有解决方法：更改Filezilla设置，编辑 - 设置 - 连接-FTP-被动模式，将“使用服务器的外部IP地址来代替”改为“回到主动模式”即可；</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Wz411i7Qh&quot;&gt;参考1&lt;/a&gt;、&lt;a href=&quot;https://blog.csdn.net/MyLovelyJay/article/details/88046476&quot;&gt;参考2&lt;/a</summary>
      
    
    
    
    <category term="Linux" scheme="https://tanyuu.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Serval and Rooted Tree（CF1153D）-DP</title>
    <link href="https://tanyuu.github.io/2022.01-06/Serval%20and%20Rooted%20Tree%EF%BC%88CF1153D%EF%BC%89-DP/"/>
    <id>https://tanyuu.github.io/2022.01-06/Serval%20and%20Rooted%20Tree%EF%BC%88CF1153D%EF%BC%89-DP/</id>
    <published>2022-06-11T01:14:36.000Z</published>
    <updated>2022-08-02T02:39:07.622Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1153/D">题目链接</a>；<br /><a href="https://blog.csdn.net/laysan/article/details/123805810">参考</a>；</p><h2 id="题目大意"><a class="markdownIt-Anchor" href="#题目大意"></a> 题目大意</h2><p>对于一个有 k 个叶子的max min操作树，在 k 个叶子中填入1~k，求树根的最大值；</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>由于题目中不要求输出填充结果，我们可以使用“第几大”来标记大小：对于max节点，其节点值为子节点的最小值，对于min节点，其节点值为子节点的和；在这个过程中，我们压缩掉了很多无用的信息，简化了问题；</p><p>定义状态表示：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span> 为在以 i 为根节点的子树中，i 的值为子树中的第几大；</p><p>定义初值：对于叶子节点 i ，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f[i]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ；</p><p>定义状态转移方程：<br />对于max节点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mtext>min</mtext><mrow><mi>j</mi><mtext> is son</mtext></mrow></msub><mi>f</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i]=\text{min}_{j\text{ is son}}f[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord text"><span class="mord">min</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.317502em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord text mtight"><span class="mord mtight"> is son</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> ；<br />对于min节点，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>j</mi><mtext> is son</mtext></mrow></msub><mi>f</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i]=\sum_{j\text{ is son}}f[j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.185818em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16779199999999994em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mord text mtight"><span class="mord mtight"> is son</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> ；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> op[<span class="hljs-number">300005</span>], f[<span class="hljs-number">300005</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; sn[<span class="hljs-number">300005</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (sn[x].<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        f[x] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> fmx = <span class="hljs-number">1000006</span>, fmn = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> m : sn[x])<br>    &#123;<br>        <span class="hljs-built_in">dfs</span>(m);<br>        fmx = <span class="hljs-built_in">min</span>(fmx, f[m]);<br>        fmn += f[m];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (op[x])<br>        f[x] = fmx;<br>    <span class="hljs-keyword">else</span><br>        f[x] = fmn;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, tmp;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;op[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tmp), sn[tmp].<span class="hljs-built_in">push_back</span>(i);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-keyword">if</span> (sn[i].<span class="hljs-built_in">empty</span>())<br>            k++;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>    cout &lt;&lt; k - f[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1153/D&quot;&gt;题目链接&lt;/a&gt;；&lt;br /&gt;
&lt;a href=&quot;https://blog.csdn.net/laysan/article/details/12380581</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="DP与贪心" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/DP%E4%B8%8E%E8%B4%AA%E5%BF%83/"/>
    
    <category term="图与树" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E5%9B%BE%E4%B8%8E%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Two Merged Sequences（CF 1144 G）（将序列拆分成升序序列和降序序列两部分）-DP</title>
    <link href="https://tanyuu.github.io/2022.01-06/Two%20Merged%20Sequences%EF%BC%88CF%201144%20G%EF%BC%89%EF%BC%88%E5%B0%86%E5%BA%8F%E5%88%97%E6%8B%86%E5%88%86%E6%88%90%E5%8D%87%E5%BA%8F%E5%BA%8F%E5%88%97%E5%92%8C%E9%99%8D%E5%BA%8F%E5%BA%8F%E5%88%97%E4%B8%A4%E9%83%A8%E5%88%86%EF%BC%89-DP/"/>
    <id>https://tanyuu.github.io/2022.01-06/Two%20Merged%20Sequences%EF%BC%88CF%201144%20G%EF%BC%89%EF%BC%88%E5%B0%86%E5%BA%8F%E5%88%97%E6%8B%86%E5%88%86%E6%88%90%E5%8D%87%E5%BA%8F%E5%BA%8F%E5%88%97%E5%92%8C%E9%99%8D%E5%BA%8F%E5%BA%8F%E5%88%97%E4%B8%A4%E9%83%A8%E5%88%86%EF%BC%89-DP/</id>
    <published>2022-06-07T02:54:11.000Z</published>
    <updated>2022-08-02T02:37:42.035Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/1144/G">题目链接</a>；<br /><a href="https://blog.csdn.net/zhouyuheng2003/article/details/89219164">参考</a>；</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>构建状态表示：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 代表在前 i 位中，若第 i 位为升序序列结尾，此时降序序列结尾的最大值；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">op[i][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 代表若第 i 位为升序序列结尾，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span></span></span></span>取当前值时，第 i-1 位在升序序列 / 降序序列（1升0降）；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span> 代表在前 i 位中，若第 i 位为降序序列结尾，此时升序序列结尾的最小值；<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">op[i][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span> 代表若第 i 位为降序序列结尾，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][0]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span></span></span></span>取当前值时，第 i-1 位在升序序列 / 降序序列（1升0降）；</p><p>定义初值：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mo>−</mo><mi>i</mi><mi>n</mi><mi>f</mi><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">dp[i][1]=-inf,dp[i][1]=inf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 即每一位默认是不能参与序列的，直至转移方程时满足条件才可更新；<br />特殊地， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>i</mi><mi>n</mi><mi>f</mi><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mo>−</mo><mi>i</mi><mi>n</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">dp[1][1]=inf,dp[1][0]=-inf</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">−</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> 即第一位既可以在升序序列，也可以在降序序列；</p><p>状态转移方程：<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn><mo separator="true">;</mo><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][1] = dp[i - 1][1],op[i][1] = 1;(a[i - 1] &lt; a[i] \&amp;\&amp; dp[i][1] &lt; dp[i - 1][1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 此位接在前位后做升序序列<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">;</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][1] = a[i - 1],op[i][1] = 0;(dp[i - 1][0] &lt; a[i] \&amp;\&amp; dp[i][1] &lt; a[i - 1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 前位做降序序列结尾，此位做升序序列结尾<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn><mo separator="true">;</mo><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][0] = dp[i - 1][0],op[i][0] = 0;(a[i - 1] &gt; a[i] \&amp;\&amp; dp[i][0] &gt; dp[i - 1][0])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 此位接在前位后做降序序列<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn><mo separator="true">;</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mi mathvariant="normal">&amp;</mi><mi mathvariant="normal">&amp;</mi><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">dp[i][0] = a[i - 1],op[i][0] = 1;(dp[i - 1][1] &gt; a[i] \&amp;\&amp; dp[i][0] &gt; a[i - 1])</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mord">&amp;</span><span class="mord">&amp;</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mclose">)</span></span></span></span> 前位做升序序列结尾，此位做降序序列结尾<br />在上面的两个限制条件中，前一个条件决定了此种情况的可行性，后一个条件决定了做出更新的必要性；</p><p>对于dp后的结果，只要 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">dp[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 不是初始值，即代表此种情况存在可行解，通过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>o</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">op[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 标记的方向回溯即可；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">0x7f7f7f7f</span>;<br><span class="hljs-type">int</span> a[<span class="hljs-number">200005</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">200005</span>][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> op[<span class="hljs-number">200005</span>][<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> opt[<span class="hljs-number">200005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    dp[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = inf, dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = -inf;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    &#123;<br>        dp[i][<span class="hljs-number">1</span>] = -inf, dp[i][<span class="hljs-number">0</span>] = inf;<br>        <span class="hljs-keyword">if</span> (a[i - <span class="hljs-number">1</span>] &lt; a[i] &amp;&amp; dp[i][<span class="hljs-number">1</span>] &lt; dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>])<br>        &#123;<br>            dp[i][<span class="hljs-number">1</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>            op[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] &lt; a[i] &amp;&amp; dp[i][<span class="hljs-number">1</span>] &lt; a[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            dp[i][<span class="hljs-number">1</span>] = a[i - <span class="hljs-number">1</span>];<br>            op[i][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[i - <span class="hljs-number">1</span>] &gt; a[i] &amp;&amp; dp[i][<span class="hljs-number">0</span>] &gt; dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br>        &#123;<br>            dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>            op[i][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] &gt; a[i] &amp;&amp; dp[i][<span class="hljs-number">0</span>] &gt; a[i - <span class="hljs-number">1</span>])<br>        &#123;<br>            dp[i][<span class="hljs-number">0</span>] = a[i - <span class="hljs-number">1</span>];<br>            op[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dp[n][<span class="hljs-number">1</span>] != -inf)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n, optmp = <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>        &#123;<br>            opt[i] = optmp;<br>            optmp = op[i][optmp];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, opt[i] != <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dp[n][<span class="hljs-number">0</span>] != inf)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n, optmp = <span class="hljs-number">0</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>        &#123;<br>            opt[i] = optmp;<br>            optmp = op[i][optmp];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, opt[i] != <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/1144/G&quot;&gt;题目链接&lt;/a&gt;；&lt;br /&gt;
&lt;a href=&quot;https://blog.csdn.net/zhouyuheng2003/article/details/</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="DP与贪心" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/DP%E4%B8%8E%E8%B4%AA%E5%BF%83/"/>
    
    
  </entry>
  
  <entry>
    <title>石子游戏III-博弈论</title>
    <link href="https://tanyuu.github.io/2022.01-06/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8FIII-%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    <id>https://tanyuu.github.io/2022.01-06/%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8FIII-%E5%8D%9A%E5%BC%88%E8%AE%BA/</id>
    <published>2022-05-11T03:19:18.000Z</published>
    <updated>2022-08-02T02:36:46.386Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://oj.daimayuan.top/problem/845">代码源OJ #845. 石子游戏 III</a>；</p><p><a href="https://zhuanlan.zhihu.com/p/508781356">参考题解</a>；<br /><img src="https://s2.loli.net/2022/08/02/gRxfca4VezlK96m.png" alt="在这里插入图片描述" /></p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>我们首先考虑结束前的临界情况：〇 n个堆中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>0</mn></msub><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cnt_0(cnt_0&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 个空堆，其余为非空堆，显然此时 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>0</mn></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_0&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时回合先手必输，即先手无法进行任何操作；</p><p>更进一步，每一回合操作时，回合后手可以通过选择与回合先手互异的 n/2 堆来使每一堆在本回合至少石子数减一；</p><p>那么对于① n个堆中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>1</mn></msub><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cnt_1(cnt_1&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 个一子堆，其余堆子数大于1的情况，我们可以推出如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>1</mn></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_1&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时回合先手必输，即无论回合先手如何操作，回合后手可以将局势控制到情况〇；</p><p>由此来说，对于② n个堆中有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>2</mn></msub><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">cnt_2(cnt_2&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 个二子堆，其余堆子数大于2的情况，我们可以推出如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mn>2</mn></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_2&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时回合先手必输，即若先手将最小子数刷新到1，后手就可以将局势控制到情况①，若最小子数刷新到0，后手就可以控制到情况〇；</p><p>以此类推，对于最小子数堆共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">cnt_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 个时，如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>m</mi></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_m&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> 时回合先手必输（最小的一个数，出现的次数大于 n/2）；否则先手可以通过一次操作将最小子数堆个数更新至 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi><msub><mi>t</mi><mi>m</mi></msub><mo>&gt;</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">cnt_m&gt;n/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76508em;vertical-align:-0.15em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span></span></span></span> ，回合先后手调换，回合先手（全局后手）必输；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> mn=<span class="hljs-number">1e9</span>+<span class="hljs-number">9</span>,n,tmp=<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n),cmn=<span class="hljs-number">0</span>,i=<span class="hljs-number">1</span>;(i&lt;=n)?<span class="hljs-number">1</span>:(<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,cmn&gt;n/<span class="hljs-number">2</span>?<span class="hljs-string">&quot;Bob&quot;</span>:<span class="hljs-string">&quot;Alice&quot;</span>),<span class="hljs-number">0</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp),(mn=(tmp&lt;mn)?cmn=<span class="hljs-number">0</span>,tmp:mn),(cmn+=(tmp==mn)?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>),i++);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://oj.daimayuan.top/problem/845&quot;&gt;代码源OJ #845. 石子游戏 III&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/508781356&quot;&gt;参考题解&lt;/a&gt;；</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="数论与几何" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%95%B0%E8%AE%BA%E4%B8%8E%E5%87%A0%E4%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>长沙学院飞腾迈创杯2022年新生赛（全题解）</title>
    <link href="https://tanyuu.github.io/2022.01-06/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2%E9%A3%9E%E8%85%BE%E8%BF%88%E5%88%9B%E6%9D%AF2022%E5%B9%B4%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/"/>
    <id>https://tanyuu.github.io/2022.01-06/%E9%95%BF%E6%B2%99%E5%AD%A6%E9%99%A2%E9%A3%9E%E8%85%BE%E8%BF%88%E5%88%9B%E6%9D%AF2022%E5%B9%B4%E6%96%B0%E7%94%9F%E8%B5%9B%EF%BC%88%E5%85%A8%E9%A2%98%E8%A7%A3%EF%BC%89/</id>
    <published>2022-05-07T16:28:53.000Z</published>
    <updated>2022-08-02T02:35:17.255Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/34092?&amp;headNav=www#description">题集链接</a>；</p><p><a href="https://ac.nowcoder.com/discuss/948546">官方题解</a>；<br /><ul class="markdownIt-TOC"><li><a href="#op">OP</a></li><li><a href="#a-%E5%B0%8F%E8%B4%AA%E4%B8%80%E6%89%8B">A 小贪一手</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li></ul></li><li><a href="#b-ab-problem-very-easy">B A+B Problem (very easy)</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-2">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-2">代码</a></li></ul></li><li><a href="#c-alice-and-bob">C Alice and Bob</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-3">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-3">代码</a></li></ul></li><li><a href="#d-%E8%BF%9B%E5%8C%96">D 进化</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-4">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-4">代码</a></li></ul></li><li><a href="#e-%E9%98%B2%E7%96%AB%E7%89%A9%E8%B5%84">E 防疫物资</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-5">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-5">代码</a></li></ul></li><li><a href="#f-%E6%9C%89%E6%8C%82">F 有挂</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-6">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-6">代码</a></li></ul></li><li><a href="#g">G</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-7">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-7">代码</a></li></ul></li><li><a href="#h-%E7%88%B1%E7%BE%8E%E4%B9%8B%E5%BF%83%E4%BA%BA%E7%9A%86%E6%9C%89%E4%B9%8B">H 爱美之心人皆有之</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-8">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-8">代码</a></li></ul></li><li><a href="#i-%E7%AD%BE%E7%AD%BE%E7%AD%BE%E5%88%B0">I 签签签到</a><br />*<ul><li><a href="#%E6%80%9D%E8%B7%AF-9">思路</a></li><li><a href="#%E4%BB%A3%E7%A0%81-9">代码</a></li></ul></li></ul></p><h2 id="op"><a class="markdownIt-Anchor" href="#op"></a> OP</h2><p>标准的新生赛，所以补得比较快~<br />下次出题的时候结构可以参考一下这场，难度分布还比较适用；</p><h2 id="a-小贪一手"><a class="markdownIt-Anchor" href="#a-小贪一手"></a> A 小贪一手</h2><p>贪心</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>出于取模的性质，我们可以直接构造~<br />由于保证了解一定存在，也不需要担心无解的问题；</p><h4 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t;<br>    cin&gt;&gt;t;<br>    <span class="hljs-type">int</span> x,y,n;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;x,&amp;y,&amp;n);<br>        <span class="hljs-type">int</span> bas=n/x*x+y;<br>        <span class="hljs-keyword">if</span>(bas&gt;n)bas-=x;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,bas);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="b-ab-problem-very-easy"><a class="markdownIt-Anchor" href="#b-ab-problem-very-easy"></a> B A+B Problem (very easy)</h2><p>模拟，字符串处理</p><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>注意：题目中输入的<code>-</code>为英文的连字符，并非数学的减号；</p><p>先处理出所有合法数字的字符串对整型的映射，再在每次<code>+</code>或字符串结束时分割字符串，映射到数字并计算；</p><h4 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>map&lt;string, <span class="hljs-type">int</span>&gt; mp;<br>string bas[<span class="hljs-number">100</span>] = &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    mp[<span class="hljs-string">&quot;zero&quot;</span>] = <span class="hljs-number">0</span>;bas[<span class="hljs-number">0</span>]=<span class="hljs-string">&quot;zero&quot;</span>;<br>    mp[<span class="hljs-string">&quot;one&quot;</span>] = <span class="hljs-number">1</span>;bas[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;one&quot;</span>;<br>    mp[<span class="hljs-string">&quot;two&quot;</span>] = <span class="hljs-number">2</span>;bas[<span class="hljs-number">2</span>]=<span class="hljs-string">&quot;two&quot;</span>;<br>    mp[<span class="hljs-string">&quot;three&quot;</span>] = <span class="hljs-number">3</span>;bas[<span class="hljs-number">3</span>]=<span class="hljs-string">&quot;three&quot;</span>;<br>    mp[<span class="hljs-string">&quot;four&quot;</span>] = <span class="hljs-number">4</span>;bas[<span class="hljs-number">4</span>]=<span class="hljs-string">&quot;four&quot;</span>;<br>    mp[<span class="hljs-string">&quot;five&quot;</span>] = <span class="hljs-number">5</span>;bas[<span class="hljs-number">5</span>]=<span class="hljs-string">&quot;five&quot;</span>;<br>    mp[<span class="hljs-string">&quot;six&quot;</span>] = <span class="hljs-number">6</span>;bas[<span class="hljs-number">6</span>]=<span class="hljs-string">&quot;six&quot;</span>;<br>    mp[<span class="hljs-string">&quot;seven&quot;</span>] = <span class="hljs-number">7</span>;bas[<span class="hljs-number">7</span>]=<span class="hljs-string">&quot;seven&quot;</span>;<br>    mp[<span class="hljs-string">&quot;eight&quot;</span>] = <span class="hljs-number">8</span>;bas[<span class="hljs-number">8</span>]=<span class="hljs-string">&quot;eight&quot;</span>;<br>    mp[<span class="hljs-string">&quot;nine&quot;</span>] = <span class="hljs-number">9</span>;bas[<span class="hljs-number">9</span>]=<span class="hljs-string">&quot;nine&quot;</span>;<br>    mp[<span class="hljs-string">&quot;ten&quot;</span>] = <span class="hljs-number">10</span>;<br>    mp[<span class="hljs-string">&quot;eleven&quot;</span>] = <span class="hljs-number">11</span>;<br>    mp[<span class="hljs-string">&quot;twelve&quot;</span>] = <span class="hljs-number">12</span>;<br>    mp[<span class="hljs-string">&quot;thirteen&quot;</span>] = <span class="hljs-number">13</span>;<br>    mp[<span class="hljs-string">&quot;fourteen&quot;</span>] = <span class="hljs-number">14</span>;<br>    mp[<span class="hljs-string">&quot;fifteen&quot;</span>] = <span class="hljs-number">15</span>;<br>    mp[<span class="hljs-string">&quot;sixteen&quot;</span>] = <span class="hljs-number">16</span>;<br>    mp[<span class="hljs-string">&quot;seventeen&quot;</span>] = <span class="hljs-number">17</span>;<br>    mp[<span class="hljs-string">&quot;eighteen&quot;</span>] = <span class="hljs-number">18</span>;<br>    mp[<span class="hljs-string">&quot;nineteen&quot;</span>] = <span class="hljs-number">19</span>;<br>    mp[<span class="hljs-string">&quot;twenty&quot;</span>] = <span class="hljs-number">20</span>;bas[<span class="hljs-number">20</span>]=<span class="hljs-string">&quot;twenty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;thirty&quot;</span>] = <span class="hljs-number">30</span>;bas[<span class="hljs-number">30</span>]=<span class="hljs-string">&quot;thirty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;forty&quot;</span>] = <span class="hljs-number">40</span>;bas[<span class="hljs-number">40</span>]=<span class="hljs-string">&quot;forty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;fifty&quot;</span>] = <span class="hljs-number">50</span>;bas[<span class="hljs-number">50</span>]=<span class="hljs-string">&quot;fifty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;sixty&quot;</span>] = <span class="hljs-number">60</span>;bas[<span class="hljs-number">60</span>]=<span class="hljs-string">&quot;sixty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;seventy&quot;</span>] = <span class="hljs-number">70</span>;bas[<span class="hljs-number">70</span>]=<span class="hljs-string">&quot;seventy&quot;</span>;<br>    mp[<span class="hljs-string">&quot;eighty&quot;</span>] = <span class="hljs-number">80</span>;bas[<span class="hljs-number">80</span>]=<span class="hljs-string">&quot;eighty&quot;</span>;<br>    mp[<span class="hljs-string">&quot;ninety&quot;</span>] = <span class="hljs-number">90</span>;bas[<span class="hljs-number">90</span>]=<span class="hljs-string">&quot;ninety&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">21</span>; i &lt;= <span class="hljs-number">99</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (bas[i].<span class="hljs-built_in">length</span>() &lt;= <span class="hljs-number">1</span>)<br>        &#123;<br>            bas[i] = bas[i / <span class="hljs-number">10</span> * <span class="hljs-number">10</span>] + <span class="hljs-string">&#x27;-&#x27;</span> + bas[i % <span class="hljs-number">10</span>];<br>            mp[bas[i]] = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> t;<br>    string gt;<br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--)<br>    &#123;<br>        cin &gt;&gt; gt;<br>        <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (gt[i] == <span class="hljs-string">&#x27;+&#x27;</span> || !gt[i])<br>            &#123;<br>                ans += mp[gt.<span class="hljs-built_in">substr</span>(p, i - p)];<br>                p = i + <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">//printf(&quot;%d &quot;, ans);</span><br>                <span class="hljs-keyword">if</span>(!gt[i]) <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        cout &lt;&lt; ans &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="c-alice-and-bob"><a class="markdownIt-Anchor" href="#c-alice-and-bob"></a> C Alice and Bob</h2><p>博弈论</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p><mark>内容已补全</mark></p><p>由于每次最大拿取量的限制，对于偶数m粒棋子，每一轮（各操作一次）的后手（与全局的先后手无关）可以控制<strong>两人操作完</strong>只剩 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>−</mo><mn>1</mn><mo>−</mo><mo stretchy="false">⌈</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">m-1-\lceil m/2\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span></span></span></span> 粒（对于奇数m粒棋子后手无法控制）；</p><p>由于最后一轮完成后剩余0枚，我们可以解得上一个关键点为2，由2推出再上一个关键点为6……以此类推就会发现关键点的分布规律；</p><p>对于初始棋子数，如果恰好为关键点，则可以保证后手（全局的）必胜，否则先手者可以使棋子点数到达关键点，此时后手则必败了（可以认为全局先手第一次操作后到达关键点，此后全局后手变为回合先手，全局先手可以控制总棋子数到达关键点）；</p><h4 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>vector&lt;<span class="hljs-type">int</span>&gt;ok;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">1000</span>;i=i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>)<br>    &#123;<br>        ok.<span class="hljs-built_in">push_back</span>(i);<br>    &#125;<br>    <span class="hljs-comment">//cout&lt;&lt;ok[ok.size()-1];</span><br>    <span class="hljs-type">int</span> t,n;<br>    cin&gt;&gt;t;<br>    <span class="hljs-keyword">while</span>(t--)<br>    &#123;<br>        cin&gt;&gt;n;<br>        <span class="hljs-type">int</span> f=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ok.<span class="hljs-built_in">size</span>()&amp;&amp;!f;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(n&lt;ok[i])<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(n==ok[i])f=<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(f)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="d-进化"><a class="markdownIt-Anchor" href="#d-进化"></a> D 进化</h2><p>模拟，搜索，贪心</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><p>所有运算项均为正数；<br />对于所有乘法项，显然乘法项越后计算结果越大；</p><p>我们可以将运算项视为不可通行块，找到当前区域边界上的所有运算项，将加法项直接计算，如果没有加法项，则选择倍率最低的乘法项运算；<br />运算项运算后便认为是可通行块，循环以上步骤，直到当前边界上没有新的运算块；</p><p>由于数据很小，我们可以放心大胆地多次bfs；</p><h4 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>]; <span class="hljs-comment">// type,num//-1-&gt;no,0-&gt;ok,1-&gt;add,2-&gt;mut</span><br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; tmp[<span class="hljs-number">70</span>];<br><span class="hljs-type">bool</span> rch[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> di[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>&#125;, dj[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> ctmp = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; que;<br>    <span class="hljs-keyword">if</span> (!mp[x][y].first)<br>        que.<span class="hljs-built_in">push</span>(&#123;x, y&#125;), rch[x][y] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[x][y].first &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        tmp[ctmp++] = &#123;x, y&#125;;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> nowi = que.<span class="hljs-built_in">front</span>().first, nowj = que.<span class="hljs-built_in">front</span>().second;<br>        que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++)<br>        &#123;<br>            <span class="hljs-type">int</span> nni = nowi + di[k], nnj = nowj + dj[k];<br>            <span class="hljs-keyword">if</span> (nni &gt;= <span class="hljs-number">1</span> &amp;&amp; nni &lt;= n &amp;&amp; nnj &gt;= <span class="hljs-number">1</span> &amp;&amp; nnj &lt;= m)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (!mp[nni][nnj].first &amp;&amp; !rch[nni][nnj])<br>                    que.<span class="hljs-built_in">push</span>(&#123;nni, nnj&#125;), rch[nni][nnj] = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[nni][nnj].first &gt; <span class="hljs-number">0</span> &amp;&amp; !rch[nni][nnj])<br>                    tmp[ctmp++] = &#123;nni, nnj&#125;, rch[nni][nnj] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k, ni, nj, tx, ty, t, v;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    string g;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        cin &gt;&gt; g;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>        &#123;<br>            mp[i][j + <span class="hljs-number">1</span>].first = (g[j] == <span class="hljs-string">&#x27;#&#x27;</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (g[j] == <span class="hljs-string">&#x27;S&#x27;</span>)<br>                ni = i, nj = j + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    cin &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d&quot;</span>, &amp;tx, &amp;ty, &amp;t, &amp;v);<br>        mp[tx][ty] = &#123;t, v&#125;;<br>    &#125;<br>    ll ans = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        ctmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(tmp, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> tmp);<br>        <span class="hljs-built_in">memset</span>(rch, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> rch);<br>        <span class="hljs-built_in">bfs</span>(ni, nj);<br>        <span class="hljs-keyword">if</span> (!ctmp)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-type">int</span> addd = <span class="hljs-number">0</span>;<br>        pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mnm = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ctmp; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (mp[tmp[i].first][tmp[i].second].first == <span class="hljs-number">1</span>)<br>                ans += mp[tmp[i].first][tmp[i].second].second,<br>                    mp[tmp[i].first][tmp[i].second].first = <span class="hljs-number">0</span>, addd = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mp[tmp[i].first][tmp[i].second].first == <span class="hljs-number">2</span> &amp;&amp;<br>                     (mnm == <span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>) ||<br>                      mp[tmp[i].first][tmp[i].second].first &lt; mp[mnm.first][mnm.second].first))<br>            &#123;<br>                mnm = &#123;tmp[i].first, tmp[i].second&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!addd)<br>        &#123;<br>            ans *= mp[mnm.first][mnm.second].second;<br>            mp[mnm.first][mnm.second].first = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="e-防疫物资"><a class="markdownIt-Anchor" href="#e-防疫物资"></a> E 防疫物资</h2><p>树的直径</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>题目描述便确定了题中所给是一棵树；</p><p>我们可以发现在每一个送货回路内，任意两节点都可以认为被走了一次（走过的道路可以组成路径），如果将这两个节点用道路连接，那么这两点原路径上的道路都可以被少走一次；</p><p>依此，我们找出这棵树上距离最远的两点即可，就是树的直径；<br />答案可以表示为原路径长-直径长+1；</p><p>树的直径可以由 双dfs法 或者 dp法 求得，时间复杂度相同，这里使用的是前者；</p><h4 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>vector&lt;<span class="hljs-type">int</span>&gt;rod[<span class="hljs-number">100005</span>];<br>ll d[<span class="hljs-number">100005</span>];<br><span class="hljs-type">int</span> pos;<br><span class="hljs-type">int</span> ds=<span class="hljs-number">-1</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> f,<span class="hljs-type">int</span> lth)</span></span><br><span class="hljs-function"></span>&#123;<br>    ds++;<br>    d[u]=d[f]+lth;<br>    <span class="hljs-keyword">if</span>(d[u]&gt;d[pos])pos=u;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rod[u].<span class="hljs-built_in">size</span>(); i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (rod[u][i] == f)<br>            <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(rod[u][i], u,<span class="hljs-number">1</span>);<br>        ds++;<br>    &#125;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">tree_r</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)d[i]=<span class="hljs-number">0</span>;<br>    pos=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> lth=ds;<br>    <span class="hljs-comment">// cout&lt;&lt;lth;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)d[i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">dfs</span>(pos,pos,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> lth-d[pos]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,u,v;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;u,&amp;v);<br>        rod[u].<span class="hljs-built_in">push_back</span>(v);<br>        rod[v].<span class="hljs-built_in">push_back</span>(u);<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-built_in">tree_r</span>(n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="f-有挂"><a class="markdownIt-Anchor" href="#f-有挂"></a> F 有挂</h2><p>线段树 / 树状数组</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><p>区间和线段树模板题；</p><p>也许也可以用差分+树状数组解决；</p><h4 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span>;<br><span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-type">int</span> l, r;<span class="hljs-comment">//l,r为节点的左右界</span><br>    ll sum, lt;<span class="hljs-comment">//sum为节点值，lt为懒标记</span><br>&#125; segt[N &lt;&lt; <span class="hljs-number">2</span> | <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span><span class="hljs-comment">//对懒标记进行下传</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (segt[p].lt)<br>    &#123;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].sum += segt[p].lt * (segt[p &lt;&lt; <span class="hljs-number">1</span>].r - segt[p &lt;&lt; <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>);<br>        segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum += segt[p].lt * (segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].r - segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l + <span class="hljs-number">1</span>);<br>        segt[p &lt;&lt; <span class="hljs-number">1</span>].lt += segt[p].lt;<br>        segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].lt += segt[p].lt;<br>        segt[p].lt = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">icg</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr, ll d)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>    &#123;<br>        segt[p].sum += d * (segt[p].r - segt[p].l + <span class="hljs-number">1</span>);<br>        segt[p].lt += d;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr, d);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">icg</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr, d);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-function">ll <span class="hljs-title">ick</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (cl &lt;= segt[p].l &amp;&amp; segt[p].r &lt;= cr)<br>        <span class="hljs-keyword">return</span> segt[p].sum;<br>    <span class="hljs-built_in">pushdown</span>(p);<br>    <span class="hljs-type">int</span> mid = segt[p].r + segt[p].l &gt;&gt; <span class="hljs-number">1</span>;<br>    ll val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl &lt;= mid)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">if</span> (cr &gt;= mid + <span class="hljs-number">1</span>)<br>        val += <span class="hljs-built_in">ick</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, cl, cr);<br>    <span class="hljs-keyword">return</span> val;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> cl, <span class="hljs-type">int</span> cr)</span></span><br><span class="hljs-function"></span>&#123;<br>    segt[p].l = cl, segt[p].r = cr, segt[p].lt = <span class="hljs-number">0</span>, segt[p].sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (cl == cr)<br>    &#123;<br>        segt[p].sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = cl + cr &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span>, cl, mid);<br>    <span class="hljs-built_in">build</span>(p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, cr);<br>    segt[p].sum = segt[p &lt;&lt; <span class="hljs-number">1</span>].sum + segt[p &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,x,op,l,r,k;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;x;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>,&amp;op,&amp;l,&amp;r);<br>        <span class="hljs-keyword">if</span>(op==<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;k);<br>            <span class="hljs-built_in">icg</span>(<span class="hljs-number">1</span>,l,r,k/x+(!(k%x==<span class="hljs-number">0</span>)));<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>,<span class="hljs-built_in">ick</span>(<span class="hljs-number">1</span>,l,r));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="g"><a class="markdownIt-Anchor" href="#g"></a> G</h2><p>数位dp，感谢汪佬（wxy）；</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>构造状态表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span> 为以 i 结尾长度 m 的区间，如果按照 j 的二进制表示（从低到高第k位（第0位开始表示）为1代表第i-k日打球，0代表该日不打球），欢乐度合法的最大值（若 j 的表示非法，则该值即为 0 ）；</p><p>则有转移方程（状态合法时）</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>j</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">的</mi><mi mathvariant="normal">末</mi><mi>m</mi><mi mathvariant="normal">位</mi><mo stretchy="false">]</mo><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><mi>j</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mi mathvariant="normal">的</mi><mi mathvariant="normal">末</mi><mi>m</mi><mi mathvariant="normal">位</mi><mo stretchy="false">]</mo><mo>=</mo><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">f[i][(j&lt;&lt;1)的末m位]=f[i-1][j]\\f[i][(j&lt;&lt;1)+1的末m位]=f[i-1][j]+a[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">末</span><span class="mord mathdefault">m</span><span class="mord cjk_fallback">位</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">末</span><span class="mord mathdefault">m</span><span class="mord cjk_fallback">位</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span></span></span></span></span></p><p>其中取末m位的过程通过位运算完成；</p><p>由于m最大为8，二进制枚举每个状态不会造成很大的复杂度压力；</p><p><code>__builtin_popcount(t)</code>是封装好的 bitcount 函数；</p><h4 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> f[N][<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">9</span>], n, m, a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt; (<span class="hljs-number">1</span> &lt;&lt; m); ++s)<br>        &#123;<br>            <span class="hljs-type">int</span> t = (s &lt;&lt; <span class="hljs-number">1</span>) &amp; ((<span class="hljs-number">1</span> &lt;&lt; m) - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (__builtin_popcount(t) &lt;= m / <span class="hljs-number">2</span>)<br>                f[i][t] = <span class="hljs-built_in">max</span>(f[i][t], f[i - <span class="hljs-number">1</span>][s]);<br>            <span class="hljs-keyword">if</span> (__builtin_popcount(t) + <span class="hljs-number">1</span> &lt;= m / <span class="hljs-number">2</span>)<br>                f[i][t | <span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(f[i][t | <span class="hljs-number">1</span>], f[i - <span class="hljs-number">1</span>][s] + a[i]);<br>        &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = <span class="hljs-number">0</span>; s &lt; (<span class="hljs-number">1</span> &lt;&lt; m); ++s)<br>        ans = <span class="hljs-built_in">max</span>(ans, f[n][s]);<br>    cout &lt;&lt; ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="h-爱美之心人皆有之"><a class="markdownIt-Anchor" href="#h-爱美之心人皆有之"></a> H 爱美之心人皆有之</h2><p>st表，二分<br />参考并简化了<a href="https://ac.nowcoder.com/acm/contest/view-submission?submissionId=52087251">这份代码</a>；</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><p>st表是一种 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 时空复杂度预处理，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 时间复杂度求区间最大 / 小值的数据结构；</p><p>对于以 i 为左端点的所有区间而言，随着右端点的右移，区间极差会单调递增，我们可以依此二分；</p><p>找到区间极差等于 k 的最左右端点和最右右端点，便可以求出区间个数；<br />需要注意无解的情况；</p><h4 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> mi[N][<span class="hljs-number">21</span>], ma[N][<span class="hljs-number">21</span>], lg[N], a[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ck_mi</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = lg[r - l + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(mi[l][k], mi[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ck_ma</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> k = lg[r - l + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(ma[l][k], ma[r - (<span class="hljs-number">1</span> &lt;&lt; k) + <span class="hljs-number">1</span>][k]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        ma[i][<span class="hljs-number">0</span>] = mi[i][<span class="hljs-number">0</span>] = a[i], lg[i] = <span class="hljs-built_in">log2</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j + (<span class="hljs-number">1</span> &lt;&lt; i) - <span class="hljs-number">1</span> &lt;= n; j++)<br>        &#123;<br>            mi[j][i] = <span class="hljs-built_in">min</span>(mi[j][i - <span class="hljs-number">1</span>], mi[j + (<span class="hljs-number">1</span> &lt;&lt; (i - <span class="hljs-number">1</span>))][i - <span class="hljs-number">1</span>]);<br>            ma[j][i] = <span class="hljs-built_in">max</span>(ma[j][i - <span class="hljs-number">1</span>], ma[j + (<span class="hljs-number">1</span> &lt;&lt; (i - <span class="hljs-number">1</span>))][i - <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> l1 = i, r1 = n;<br>        <span class="hljs-keyword">while</span> (l1 &lt; r1)<br>        &#123;<br>            <span class="hljs-type">int</span> mid = (l1 + r1) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ck_ma</span>(i, mid) - <span class="hljs-built_in">ck_mi</span>(i, mid) &gt;= k)<br>                r1 = mid;<br>            <span class="hljs-keyword">else</span><br>                l1 = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> l2 = i, r2 = n;<br>        <span class="hljs-keyword">while</span> (l2 &lt; r2)<br>        &#123;<br>            <span class="hljs-type">int</span> mid = (l2 + r2 + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ck_ma</span>(i, mid) - <span class="hljs-built_in">ck_mi</span>(i, mid) &lt;= k)<br>                l2 = mid;<br>            <span class="hljs-keyword">else</span><br>                r2 = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ck_ma</span>(i, l1) - <span class="hljs-built_in">ck_mi</span>(i, l1) == k)<br>            ans += l2 - l1 + <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// printf(&quot;%d %d %d\n&quot;,i,l1,l2);</span><br>    &#125;<br>    cout &lt;&lt; ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="i-签签签到"><a class="markdownIt-Anchor" href="#i-签签签到"></a> I 签签签到</h2><p>愚人节快乐</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p><img src="https://s2.loli.net/2022/08/02/bEmrQgv6C2DfAyH.png" alt="在这里插入图片描述" /><br /><img src="https://s2.loli.net/2022/08/02/bEmrQgv6C2DfAyH.png" alt="在这里插入图片描述" /></p><p>脑子空空，注意转义，也可以用raw字符串（ C++11功能）；</p><h4 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;%d%\\n\&quot;&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">R&quot;(%d%\n&quot;)&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/34092?&amp;amp;headNav=www#description&quot;&gt;题集链接&lt;/a&gt;；&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/discus</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="比赛与题集" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%AF%94%E8%B5%9B%E4%B8%8E%E9%A2%98%E9%9B%86/"/>
    
    
  </entry>
  
  <entry>
    <title>第二大数字和-数据结构</title>
    <link href="https://tanyuu.github.io/2022.01-06/%E7%AC%AC%E4%BA%8C%E5%A4%A7%E6%95%B0%E5%AD%97%E5%92%8C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://tanyuu.github.io/2022.01-06/%E7%AC%AC%E4%BA%8C%E5%A4%A7%E6%95%B0%E5%AD%97%E5%92%8C-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-05-01T06:12:56.000Z</published>
    <updated>2022-08-02T02:32:27.514Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://oj.daimayuan.top/problem/846">代码源OJ #846. 第二大数字和</a>；<br /><img src="https://s2.loli.net/2022/08/02/8AmDcNMQvFyPobH.png" alt="在这里插入图片描述" /><br />本文为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>解法；</p><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>我们考虑关于每一个数，<strong>以该数为第二大数字和的区间数</strong>与<strong>在排列中该数左右两侧的第一个和第二个大于该数的数的位置</strong>有关；</p><p>如果记该数位置为 p ，左侧第一个大于该数的位置为 pl1 ，左侧第二个大于该数的位置为 pl2（右侧同理 pr1，pr2 ），（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>r</mi><mn>2</mn><mo>&gt;</mo><mi>p</mi><mi>r</mi><mn>1</mn><mo>&gt;</mo><mi>p</mi><mo>&gt;</mo><mi>p</mi><mi>l</mi><mn>1</mn><mo>&gt;</mo><mi>p</mi><mi>l</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">pr2&gt;pr1&gt;p&gt;pl1&gt;pl2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">2</span></span></span></span>）则以该点为第二大数字的区间有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>p</mi><msub><mi>l</mi><mn>2</mn></msub><mo>−</mo><mi>p</mi><msub><mi>l</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>p</mi><msub><mi>r</mi><mn>1</mn></msub><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>p</mi><mi>r</mi><mn>2</mn><mo>−</mo><mi>p</mi><mi>r</mi><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mi>p</mi><mi>l</mi><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(pl_2-pl_1)(pr_1-p)+(pr2-pr1)(p-pl1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>；</p><p>在操作过程中，我们选择使用类似链表的数据结构，首先假定所有数的左右两侧数都大于它自身，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><msub><mi>l</mi><mn>1</mn></msub><mo>=</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>p</mi><msub><mi>r</mi><mn>1</mn></msub><mo>=</mo><mi>p</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">pl_1=p-1,pr_1=p+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，从小到大处理每一个数，处理后将其左右的相邻数中的 pl1 和 pr1 更新，并抛弃这个数（类似链表中删除元素）。在这个过程中我们就可以保证每个数的 pl1 与 pr1 在使用时一定是正确的；</p><p>在这个过程中，px2 可以通过嵌套表示出，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>p</mi><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">]</mo><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">[px_1]x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在被使用时并不是数px1 的x方向第一个大于其的数，而是数p 的x方向第一个大于其的数（因为数据还没有处理到数px1，只处理了小于数p 的部分）。因此我们只需要妥善维护每个点 p 的 pl1 与 pr1 即可；</p><p>在下面的代码实现中，存储的并不是 px1，而是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>p</mi><mo>−</mo><mi>p</mi><msub><mi>x</mi><mn>1</mn></msub><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|p-px_1|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span> ，实际上没有区别；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ln</span>&#123;<br>    <span class="hljs-type">int</span> l,r;<br>    ll tl,tr;<br>    <span class="hljs-type">int</span> num;<br>&#125;node[<span class="hljs-number">100005</span>];<br><span class="hljs-type">int</span> pos[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,tmp;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;tmp);<br>        pos[tmp]=i;<br>        node[i].l=i<span class="hljs-number">-1</span>;<br>        node[i].r=i+<span class="hljs-number">1</span>;<br>        node[i].tl=node[i].tr=<span class="hljs-number">1</span>;<br>        node[i].num=tmp;<br>    &#125;<br>    <span class="hljs-comment">// node[1].tl=node[n].tr=0;</span><br>    ll ans=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(ll i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> mk=pos[i];<br>        <span class="hljs-comment">// printf(&quot;*%d %d\n&quot;,i,(node[mk].tl*node[node[mk].r].tr+node[mk].tr*node[node[mk].l].tl));</span><br>        ans+=i*(node[mk].tl*node[node[mk].r].tr+node[mk].tr*node[node[mk].l].tl);<br>        node[node[mk].l].tr+=node[mk].tr;<span class="hljs-comment">//维护左右邻</span><br>        node[node[mk].r].tl+=node[mk].tl;<br>        node[node[mk].l].r=node[mk].r;<span class="hljs-comment">//删除元素</span><br>        node[node[mk].r].l=node[mk].l;<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://oj.daimayuan.top/problem/846&quot;&gt;代码源OJ #846. 第二大数字和&lt;/a&gt;；&lt;br /&gt;
&lt;img src=&quot;https://s2.loli.net/2022/08/02/8AmDcNMQvFyPobH.png&quot;</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="数据结构" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>矩形划分-几何</title>
    <link href="https://tanyuu.github.io/2022.01-06/%E7%9F%A9%E5%BD%A2%E5%88%92%E5%88%86-%E5%87%A0%E4%BD%95/"/>
    <id>https://tanyuu.github.io/2022.01-06/%E7%9F%A9%E5%BD%A2%E5%88%92%E5%88%86-%E5%87%A0%E4%BD%95/</id>
    <published>2022-04-29T13:32:35.000Z</published>
    <updated>2022-08-02T02:30:51.225Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://oj.daimayuan.top/problem/853">代码源OJ #853. 矩形划分</a>；<br /><a href="https://www.bilibili.com/video/BV18r4y1n7r7">参考题解</a>；</p><blockquote><p>普适的代价是抽象<br />Abstractness is the price of generality</p></blockquote><p>显然，题目描述中过于抽象，出现理解困难的话可以参考题解视频；<br />我的理解（修正）如下：</p><ol><li>每次会给出两个点 p,q , 你需要在点 p,q 之间连一条线来划分矩形 , 保证 p,q 分别在矩形的一组对边上 , 即要么分别在左右边界上 , 要么分别在上下边界上。</li><li>连的线并不要求是直线 , 可以是曲线 , 但不能与自己有交点 , 不能与矩形边界有除 p,q 以外的交点。</li><li>一条线与其他每条线最多只有一个交点。</li><li>每个交点只能为二线相交，不可以是更多线相交。</li><li>保证给出的所有点两两不同。</li></ol><h2 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h2><p>我们考虑构造过程：</p><ol><li>对于一个没有线的矩形，显然块数为1；</li><li>每在矩形中添加一条与其他线没有交点的线，块数会增加1；</li><li>每在矩形中添加一条与其他线有n个合法交点的线，块数会增加n+1；</li></ol><p>所以我们可以发现，块数可以用：1+线数+交点数来表示；</p><p>对于交点数，我们可以发现所有纵向线都与每条横向线都一定有一个交点；<br />接下来我们讨论同方向线间的交点：<br />我们将线按一侧的坐标排序后，考虑另一侧的坐标，每出现一个逆序对，即说明出现了一次交错，即有一个交点；</p><p>具体操作可以使用归并排序统计逆序对；</p><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br>pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; h[<span class="hljs-number">100005</span>], w[<span class="hljs-number">100005</span>], tmp[<span class="hljs-number">100005</span>]; <span class="hljs-comment">// line&amp;clom</span><br><span class="hljs-function">ll <span class="hljs-title">ds</span><span class="hljs-params">(pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; *a, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// printf(&quot;%d %d\n&quot;, l, r);</span><br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    ll ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (r - l + <span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>)<br>        ans = <span class="hljs-built_in">ds</span>(a, l, mid) + <span class="hljs-built_in">ds</span>(a, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>, c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (a[i].second &lt;= a[j].second)<br>        &#123;<br>            tmp[c++] = a[i];<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            tmp[c++] = a[j];<br>            ans += mid - i + <span class="hljs-number">1</span>;<br>            j++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid)<br>    &#123;<br>        tmp[c++] = a[i];<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (j &lt;= r)<br>    &#123;<br>        tmp[c++] = a[j];<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = l; k &lt;= r; k++)<br>    &#123;<br>        a[k] = tmp[k - l];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n, m, p, q;<br>    ll x, y;<br>    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;h[i].first, &amp;h[i].second);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= y; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;w[i].first, &amp;w[i].second);<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(h + <span class="hljs-number">1</span>, h + <span class="hljs-number">1</span> + (<span class="hljs-type">int</span>)x);<br>    <span class="hljs-built_in">sort</span>(w + <span class="hljs-number">1</span>, w + <span class="hljs-number">1</span> + (<span class="hljs-type">int</span>)y);<br>    ll ans = <span class="hljs-built_in">ds</span>(h, <span class="hljs-number">1</span>, x) + <span class="hljs-built_in">ds</span>(w, <span class="hljs-number">1</span>, y);<br>    cout &lt;&lt; ans + x * y + x + y + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://oj.daimayuan.top/problem/853&quot;&gt;代码源OJ #853. 矩形划分&lt;/a&gt;；&lt;br /&gt;
&lt;a href=&quot;https://www.bilibili.com/video/BV18r4y1n7r7&quot;&gt;参考题解&lt;/a&gt;；</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    <category term="数论与几何" scheme="https://tanyuu.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/%E6%95%B0%E8%AE%BA%E4%B8%8E%E5%87%A0%E4%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>正点stm32f407探索者开发板使用HAL库通过I2C协议配置并读取MPU6050（基础向）</title>
    <link href="https://tanyuu.github.io/2022.01-06/%E6%AD%A3%E7%82%B9stm32f407%E6%8E%A2%E7%B4%A2%E8%80%85%E5%BC%80%E5%8F%91%E6%9D%BF%E4%BD%BF%E7%94%A8HAL%E5%BA%93%E9%80%9A%E8%BF%87I2C%E5%8D%8F%E8%AE%AE%E9%85%8D%E7%BD%AE%E5%B9%B6%E8%AF%BB%E5%8F%96MPU6050%EF%BC%88%E5%9F%BA%E7%A1%80%E5%90%91%EF%BC%89/"/>
    <id>https://tanyuu.github.io/2022.01-06/%E6%AD%A3%E7%82%B9stm32f407%E6%8E%A2%E7%B4%A2%E8%80%85%E5%BC%80%E5%8F%91%E6%9D%BF%E4%BD%BF%E7%94%A8HAL%E5%BA%93%E9%80%9A%E8%BF%87I2C%E5%8D%8F%E8%AE%AE%E9%85%8D%E7%BD%AE%E5%B9%B6%E8%AF%BB%E5%8F%96MPU6050%EF%BC%88%E5%9F%BA%E7%A1%80%E5%90%91%EF%BC%89/</id>
    <published>2022-04-18T13:12:15.000Z</published>
    <updated>2022-08-02T02:29:47.117Z</updated>
    
    <content type="html"><![CDATA[<p><em>此文图片均链自CSDN</em></p><p>参考资料：<a href="https://blog.csdn.net/na2wo4/article/details/104453401">[1]</a>，<a href="https://blog.csdn.net/zj490044512/article/details/83745684">[2]</a>，<a href="http://www.openedv.com/docs/boards/stm32/zdyz_stm32f407_explorer.html">正点原子资料下载中心-&gt;stm32f407探索者开发板</a>：资料A盘:<code>Explorer STM32F4_V2.2_SCH.pdf</code>,<code>探索者IO引脚分配表.xlsx</code>,<code>5，MPU6050资料.rar</code>；</p><p>文章内容仅供参考；<br /><ul class="markdownIt-TOC"><li><a href="#mpu6050%E7%AE%80%E8%BF%B0">MPU6050简述</a></li><li><a href="#mpu6050%E7%9A%84%E5%B0%81%E8%A3%85">MPU6050的封装</a></li><li><a href="#i2c%E7%9A%84%E5%87%BD%E6%95%B0%E6%93%8D%E4%BD%9C">I2C的函数操作</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E5%AF%84%E5%AD%98%E5%99%A8%E6%93%8D%E4%BD%9C%E5%86%85%E5%AE%B9">配置过程寄存器操作内容</a><ul><li><a href="#%E9%87%8D%E7%BD%AEmpu6050">重置MPU6050</a></li><li><a href="#%E5%94%A4%E9%86%92mpu6050%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%97%B6%E9%92%9F%E6%BA%90">唤醒MPU6050并配置时钟源</a></li><li><a href="#%E5%85%B3%E9%97%AD%E6%89%80%E6%9C%89%E4%B8%AD%E6%96%AD">关闭所有中断</a></li><li><a href="#%E5%A4%B1%E8%83%BDfifo%E5%B9%B6%E5%85%B3%E9%97%AD%E4%BC%A0%E6%84%9F%E5%99%A8i2c%E4%B8%BB%E6%9C%BA%E6%A8%A1%E5%BC%8F">失能FIFO并关闭传感器i2c主机模式</a></li><li><a href="#%E6%97%A0%E6%95%B0%E6%8D%AE%E9%9C%80%E8%A6%81%E5%86%99%E5%85%A5fifo">无数据需要写入FIFO</a></li><li><a href="#%E5%85%B3%E9%97%AD%E4%BC%A0%E6%84%9F%E5%99%A8%E5%BE%85%E6%9C%BA%E6%A8%A1%E5%BC%8F">关闭传感器待机模式</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E9%99%80%E8%9E%BA%E4%BB%AA%E5%92%8C%E5%8A%A0%E9%80%9F%E5%BA%A6%E8%AE%A1">配置陀螺仪和加速度计</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E6%95%B0%E5%AD%97%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8">配置数字低通滤波器</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E8%BE%93%E5%87%BA%E7%8E%87">配置输出率</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E4%B8%80%E8%A7%88">配置部分代码一览</a></li></ul></li><li><a href="#%E8%AF%BB%E5%8F%96%E9%83%A8%E5%88%86%E5%AF%84%E5%AD%98%E5%99%A8%E6%93%8D%E4%BD%9C%E5%86%85%E5%AE%B9">读取部分寄存器操作内容</a></li><li><a href="#%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81">一些数据验证</a></li></ul><br />通过STM32f07ZG芯片通过i2c协议向MPU6050的寄存器写数据来配置传感器，并通过该协议读取传感器读数；</p><h2 id="mpu6050简述"><a class="markdownIt-Anchor" href="#mpu6050简述"></a> MPU6050简述</h2><p>在这篇文章中，主要用到了MPU6050集成的3轴MEMS陀螺仪和3轴MEMS加速度计；<br />其中陀螺仪的测量值是正比于角速度，不难理解，也可以方便地直接转换为国际单位制（如何转换下文详述）；<br />对于加速度传感器的测量值，我们可以引入如下模型<br /><img src="https://img-blog.csdnimg.cn/9a5169990bc849aea1e54836db2fa877.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/29e8d214c0c142a6b6586d678f4e7947.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />若我使传感器在地表以1g的加速度竖直向上加速，那么传感器的示数应为<code>Z=-2g</code> ；<br />其测量值即为墙壁对小球造成的加速度，具体表现为小球所受重力加速度与小球与地面加速度的矢量和。同样，测量值与SI（国际单位制）也需要正比换算；</p><h2 id="mpu6050的封装"><a class="markdownIt-Anchor" href="#mpu6050的封装"></a> MPU6050的封装</h2><p><img src="https://img-blog.csdnimg.cn/49193016b59546caa9fb1f8450c83b05.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />我们可以观察到AD0针脚接地，根据AD0电平与传感器Slave地址的关系<br /><img src="https://img-blog.csdnimg.cn/d362ab78335a40a3b8aa0efa731c3938.png" alt="在这里插入图片描述" /><br />我们可以得知传感器的从机地址为0x68；<br />我们结合<img src="https://img-blog.csdnimg.cn/968d7dddaedf46718af9cb49ab9a4a03.png" alt="在这里插入图片描述" /><br />可知I2C的两条线连接到了芯片的PB8和PB9引脚，我们可以将这两条引脚设置为I2C1；<br /><img src="https://img-blog.csdnimg.cn/4e672dfe47644027b0564746cf8171e6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><h2 id="i2c的函数操作"><a class="markdownIt-Anchor" href="#i2c的函数操作"></a> I2C的函数操作</h2><p><img src="https://img-blog.csdnimg.cn/4d5d8547091f47069bc086345c692d96.png" alt="在这里插入图片描述" /><br />在这里我们用到的是这两个函数，内容是以阻塞模式将一定量的数据写入特定的内存地址/以阻塞模式从特定的内存地址读取一定量的数据；<br />函数参数如下（以读从机函数为例）：<br /><img src="https://img-blog.csdnimg.cn/491234f02db94a618e73836aaea2f663.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />第一个值是指向包含指定 I2C 的配置信息的 I2C_HandleTypeDef 结构的指针，这部分是配置完.ioc文件后CubeMAX自动生成的，具体取决于使用的I2C编号，此处即为<code>&amp;hi2c1</code><br /><img src="https://img-blog.csdnimg.cn/5578dddaadab4f62abf43612a485bf7b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />第二个值为七位目标设备地址，注意使用时还需要左移一位，也就是上面提到的0x68；<br />第三个值为内存地址，即从机上的寄存器地址，地址的值需要查询寄存器分配表；<br />第四个值为内存地址长度，每8位二进制数为1，在这篇文章中均为1；<br />第五个值为接收数据的地址，指向要发送的数据；<br />第六个值为要接收的数据量，每8位二进制数为1；<br />第七个值为超时时间，如果超时未收到应答信号，则会在返回值中体现出来，单位毫秒（1000ms=1s）；<br />返回值定义如下（自动生成）：<br /><img src="https://img-blog.csdnimg.cn/c4c67ab636514699b47eeba0f06de536.png" alt="在这里插入图片描述" /><br />写从机函数的第五、六个值变成了指向要发送数据的指针和要发送的数据量，和读从机函数细节相同；</p><h2 id="配置过程寄存器操作内容"><a class="markdownIt-Anchor" href="#配置过程寄存器操作内容"></a> 配置过程寄存器操作内容</h2><p>代码会在最后附上<br /><img src="https://img-blog.csdnimg.cn/fb41ba9b80b845fd95222a873a508ad2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><p>上图的一些名称不是标准命名，仅供参考</p><h3 id="重置mpu6050"><a class="markdownIt-Anchor" href="#重置mpu6050"></a> 重置MPU6050</h3><p><img src="https://img-blog.csdnimg.cn/a9b97727557b4954ba3ca6287296036d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />将<code>MPU_PWR_MGMT1_REG(0x6B)</code>寄存器Bit7写为1，并延时适当时间等待复位；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x80</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT1_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Reset MPU6050</span><br><span class="hljs-built_in">HAL_Delay</span>(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h3 id="唤醒mpu6050并配置时钟源"><a class="markdownIt-Anchor" href="#唤醒mpu6050并配置时钟源"></a> 唤醒MPU6050并配置时钟源</h3><p>将<code>MPU_PWR_MGMT1_REG(0x6B)</code>寄存器Bit6位写为0，Bit210设置为001，即将时钟源定位X轴角速度计；；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x01</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT1_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Awaken MPU6050 &amp;Set clock as PLL X</span><br></code></pre></td></tr></table></figure><h3 id="关闭所有中断"><a class="markdownIt-Anchor" href="#关闭所有中断"></a> 关闭所有中断</h3><p><img src="https://img-blog.csdnimg.cn/a2e4af019da84f98ba1a21846dbf4ae9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />在这个简单实验中不需要配置这部分；<br />将<code>MPU_INT_EN_REG(0x38)</code>寄存器Bit0347均置为1；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_INT_EN_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Close all interrupts</span><br></code></pre></td></tr></table></figure><h3 id="失能fifo并关闭传感器i2c主机模式"><a class="markdownIt-Anchor" href="#失能fifo并关闭传感器i2c主机模式"></a> 失能FIFO并关闭传感器i2c主机模式</h3><p><img src="https://img-blog.csdnimg.cn/38552d693b1845dc97df4f113239db65.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />将<code>MPU_USER_CTRL_REG(0x6A)</code>寄存器Bit654写0；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_USER_CTRL_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Turn off IIC host mode and FIFO</span><br></code></pre></td></tr></table></figure><h3 id="无数据需要写入fifo"><a class="markdownIt-Anchor" href="#无数据需要写入fifo"></a> 无数据需要写入FIFO</h3><p><img src="https://img-blog.csdnimg.cn/f66f2c21d7994bca82f8aeb5973d1a20.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/24152826facb46eaabb6683200d7ef4a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><p>使<code>MPU_FIFO_EN_REG(0x23)</code>寄存器均为0即可；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_FIFO_EN_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// No sensors were added to the FIFO</span><br></code></pre></td></tr></table></figure><h3 id="关闭传感器待机模式"><a class="markdownIt-Anchor" href="#关闭传感器待机模式"></a> 关闭传感器待机模式</h3><p><img src="https://img-blog.csdnimg.cn/a5b32790c8fd4b27a2988a5f6212dcc7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><p>将<code>MPU_PWR_MGMT2_REG(0x6C)</code>寄存器Bit543210位均置0；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT2_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Awaken sensor</span><br></code></pre></td></tr></table></figure><h3 id="配置陀螺仪和加速度计"><a class="markdownIt-Anchor" href="#配置陀螺仪和加速度计"></a> 配置陀螺仪和加速度计</h3><p><img src="https://img-blog.csdnimg.cn/cdef3714be42468fbe920f58ab869b68.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/b071dd66f7954743b08bb95527f9054d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />本次简单实验不需要自检，选择量程即可；<br />将<code>MPU_ACCEL_CFG(0x1C)</code>寄存器和<code>MPU_GYRO_CFG(0X1B)</code>寄存器的Bit43均设置为1（选择最大量程）；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x18</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_ACCEL_CFG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Accelerometer configuration</span><br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_GYRO_CFG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Gyroscope configuration</span><br></code></pre></td></tr></table></figure><h3 id="配置数字低通滤波器"><a class="markdownIt-Anchor" href="#配置数字低通滤波器"></a> 配置数字低通滤波器</h3><p><img src="https://img-blog.csdnimg.cn/737cd2f3d0314900af278e7e6b31c520.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="" /><br />这里选择相对均衡的配置，即将<code>MPU_CONFIGURATION(0x1A)</code>的Bit210配置为011；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x03</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_CONFIGURATION,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Select sampling rate</span><br></code></pre></td></tr></table></figure><h3 id="配置输出率"><a class="markdownIt-Anchor" href="#配置输出率"></a> 配置输出率</h3><p><img src="https://img-blog.csdnimg.cn/445825a6bdc54ed5aa7c677499d5ca8c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /></p><p>根据上式，<code>MPLRT</code>写0即可，将<code>MPU_RATE_DIVIDER(0x19)</code>寄存器所有位写0；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_RATE_DIVIDER,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Select output rate</span><br></code></pre></td></tr></table></figure><h3 id="配置部分代码一览"><a class="markdownIt-Anchor" href="#配置部分代码一览"></a> 配置部分代码一览</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_PWR_MGMT1_REG0X6B</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_PWR_MGMT2_REG0X6C</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_INT_EN_REG0X38</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_USER_CTRL_REG0X6A</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_FIFO_EN_REG0X23</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_DEVICE_ID_REG0X75</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_ACCEL_XOUTH_REG    0X3B</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_GYRO_XOUTH_REG  0X43</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_ACCEL_CFG       0X1C</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_GYRO_CFG        0X1B</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_RATE_DIVIDER    0X19</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_CONFIGURATION   0X1A</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp">HAL_StatusTypeDef stat;<br><span class="hljs-type">uint8_t</span> valu=<span class="hljs-number">0x80</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT1_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Reset MPU6050</span><br><span class="hljs-built_in">HAL_Delay</span>(<span class="hljs-number">100</span>);<br>valu=<span class="hljs-number">0x01</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT1_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Awaken MPU6050 &amp;Set clock as PLL X</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_INT_EN_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Close all interrupts</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_USER_CTRL_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Turn off IIC host mode and FIFO</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_FIFO_EN_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// No sensors were added to the FIFO</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_PWR_MGMT2_REG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Awaken sensor</span><br>valu=<span class="hljs-number">0x18</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_ACCEL_CFG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Accelerometer configuration</span><br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_GYRO_CFG,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Gyroscope configuration</span><br>valu=<span class="hljs-number">0x03</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_CONFIGURATION,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Select sampling rate</span><br>valu=<span class="hljs-number">0x00</span>;<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Write</span>(&amp;hi2c1,<span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_RATE_DIVIDER,<span class="hljs-number">1</span>,&amp;valu,<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">// Select output rate</span><br></code></pre></td></tr></table></figure><h2 id="读取部分寄存器操作内容"><a class="markdownIt-Anchor" href="#读取部分寄存器操作内容"></a> 读取部分寄存器操作内容</h2><p><img src="https://img-blog.csdnimg.cn/021050673d524450a6288afe4a467037.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br /><img src="https://img-blog.csdnimg.cn/2a285b28ad6f4ae3ab2bedf66f630544.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGFuX1l1dQ==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述" /><br />按地址读取测量值即可；<br />接收之后需要把数据处理成16位有符号整数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_ACCEL_XOUTH_REG0X3B</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MPU_GYRO_XOUTH_REG  0X43</span><br><span class="hljs-type">int16_t</span> data16A[<span class="hljs-number">3</span>],data16G[<span class="hljs-number">3</span>];<br><span class="hljs-type">uint8_t</span> dataACCEL[<span class="hljs-number">6</span>],dataGYRO[<span class="hljs-number">6</span>];<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">stat=<span class="hljs-built_in">HAL_I2C_Mem_Read</span>(&amp;hi2c1, <span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_ACCEL_XOUTH_REG, <span class="hljs-number">1</span>, dataACCEL,<span class="hljs-number">6</span>, <span class="hljs-number">100</span>);<br>stat=<span class="hljs-built_in">HAL_I2C_Mem_Read</span>(&amp;hi2c1, <span class="hljs-number">0x68</span>&lt;&lt;<span class="hljs-number">1</span>,MPU_GYRO_XOUTH_REG, <span class="hljs-number">1</span>, dataGYRO,<span class="hljs-number">6</span>, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int8_t</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)<br>data16G[i]=(((<span class="hljs-type">uint16_t</span>)dataGYRO[<span class="hljs-number">2</span>*i])&lt;&lt;<span class="hljs-number">8</span>)|dataGYRO[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>],<br>data16A[i]=(((<span class="hljs-type">uint16_t</span>)dataACCEL[<span class="hljs-number">2</span>*i])&lt;&lt;<span class="hljs-number">8</span>)|dataACCEL[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><p>此时<code>data16·[i]</code>中存储的并不是SI下的数据：<br />对于陀螺仪，如果内存数字为X，则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mi>w</mi><mo>⋅</mo><msub><mtext>LSB</mtext><mrow><mi>A</mi><mi>C</mi><mi>C</mi><mi>E</mi><mi>L</mi></mrow></msub></mrow><annotation encoding="application/x-tex">X=w\cdot \text{LSB}_{ACCEL}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">LSB</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，w的单位即为°/s；<br />对于加速度计，如果内存的数字为X，则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mi>a</mi><mo>⋅</mo><msub><mtext>LSB</mtext><mrow><mi>G</mi><mi>Y</mi><mi>R</mi><mi>O</mi></mrow></msub></mrow><annotation encoding="application/x-tex">X=a\cdot \text{LSB}_{GYRO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">LSB</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，a的单位为g（约9.8m/s<sup>2</sup>），需要注意，加速度值并不是物体相对于地面的加速度值，而是该值与重力加速度的矢量和；<br />对于LSB的值可以依照所选量程对照上表可得；</p><h2 id="一些数据验证"><a class="markdownIt-Anchor" href="#一些数据验证"></a> 一些数据验证</h2><p>我在不同角度下静置开发板，并通过U5的调试模式下以10Hz左右读取了100组加速度计测量值（data16A[i]）的平均值，定义函数</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>=</mo><msqrt><mrow><msubsup><mi>a</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>a</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>a</mi><mn>3</mn><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding="application/x-tex">f([a_1,a_2,a_3])=\sqrt{a_1^2+a_2^2+a_3^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.5413249999999998em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2986750000000002em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959080000000001em;"><span style="top:-2.433692em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span><span style="top:-3.0448000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.26630799999999993em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.258675em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width='400em' height='1.8800000000000001em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10zM1001 80H400000v40H1013z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5413249999999998em;"><span></span></span></span></span></span></span></span></span></span></p><p>绘制下表：</p><table><thead><tr><th>组数</th><th>a1</th><th>a2</th><th>a3</th><th>f([a1,a2,a3])</th></tr></thead><tbody><tr><td>1</td><td>-1.81</td><td>51.35</td><td>2039.58</td><td>2040.23</td></tr><tr><td>2</td><td>385.66</td><td>47.98</td><td>2004.43</td><td>2041.76</td></tr><tr><td>3</td><td>1385.47</td><td>168.05</td><td>1488.20</td><td>2040.22</td></tr><tr><td>4</td><td>-2068.78</td><td>39.14</td><td>10.00</td><td>2069.19</td></tr><tr><td>5</td><td>2.99</td><td>2084.68</td><td>-59.76</td><td>2085.54</td></tr></tbody></table><p>可以观察到，在误差允许范围内，均接近所选量程下最低分辨率的1g（2048LSB/g）；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;此文图片均链自CSDN&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;参考资料：&lt;a href=&quot;https://blog.csdn.net/na2wo4/article/details/104453401&quot;&gt;[1]&lt;/a&gt;，&lt;a href=&quot;https://blog.csdn.net/</summary>
      
    
    
    
    <category term="嵌入式开发" scheme="https://tanyuu.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
</feed>
